id: c0f3acf145cb465426d5
bug_link: https://syzkaller.appspot.com/bug?extid=c0f3acf145cb465426d5
title: kernel BUG in btrfs_ioctl
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 8a4a0b2a3eaf75ca8854f856ef29690c12b2f531
fix_commit: b19c98f237cd76981aaded52c258ce93f7daa8cb
datetime: '2023-07-11T17:31:58+02:00'
fix_commit_message: "btrfs: fix race between balance and cancel/pause\n\nSyzbot reported\
  \ a panic that looks like this:\n\n  assertion failed: fs_info->exclusive_operation\
  \ == BTRFS_EXCLOP_BALANCE_PAUSED, in fs/btrfs/ioctl.c:465\n  ------------[ cut here\
  \ ]------------\n  kernel BUG at fs/btrfs/messages.c:259!\n  RIP: 0010:btrfs_assertfail+0x2c/0x30\
  \ fs/btrfs/messages.c:259\n  Call Trace:\n   <TASK>\n   btrfs_exclop_balance fs/btrfs/ioctl.c:465\
  \ [inline]\n   btrfs_ioctl_balance fs/btrfs/ioctl.c:3564 [inline]\n   btrfs_ioctl+0x531e/0x5b30\
  \ fs/btrfs/ioctl.c:4632\n   vfs_ioctl fs/ioctl.c:51 [inline]\n   __do_sys_ioctl\
  \ fs/ioctl.c:870 [inline]\n   __se_sys_ioctl fs/ioctl.c:856 [inline]\n   __x64_sys_ioctl+0x197/0x210\
  \ fs/ioctl.c:856\n   do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n   do_syscall_64+0x39/0xb0\
  \ arch/x86/entry/common.c:80\n   entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nThe\
  \ reproducer is running a balance and a cancel or pause in parallel.\nThe way balance\
  \ finishes is a bit wonky, if we were paused we need to\nsave the balance_ctl in\
  \ the fs_info, but clear it otherwise and cleanup.\nHowever we rely on the return\
  \ values being specific errors, or having a\ncancel request or no pause request.\
  \  If balance completes and returns 0,\nbut we have a pause or cancel request we\
  \ won't do the appropriate\ncleanup, and then the next time we try to start a balance\
  \ we'll trip\nthis ASSERT.\n\nThe error handling is just wrong here, we always want\
  \ to clean up,\nunless we got -ECANCELLED and we set the appropriate pause flag\
  \ in the\nexclusive op.  With this patch the reproducer ran for an hour without\n\
  tripping, previously it would trip in less than a few minutes.\n\nReported-by: syzbot+c0f3acf145cb465426d5@syzkaller.appspotmail.com\n\
  CC: stable@vger.kernel.org # 6.1+\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\n\
  Reviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 4
covered_count: 0
