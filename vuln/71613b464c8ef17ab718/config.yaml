id: 71613b464c8ef17ab718
bug_link: https://syzkaller.appspot.com/bug?extid=71613b464c8ef17ab718
title: general protection fault in vsock_stream_has_data
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: f6abafcd32f9cfc4b1a2f820ecea70773e26d423
fix_commit: df137da9d6d166e87e40980e36eb8e0bc90483ef
datetime: '2025-01-14T12:29:37+01:00'
fix_commit_message: 'vsock/virtio: cancel close work in the destructor


  During virtio_transport_release() we can schedule a delayed work to

  perform the closing of the socket before destruction.


  The destructor is called either when the socket is really destroyed

  (reference counter to zero), or it can also be called when we are

  de-assigning the transport.


  In the former case, we are sure the delayed work has completed, because

  it holds a reference until it completes, so the destructor will

  definitely be called after the delayed work is finished.

  But in the latter case, the destructor is called by AF_VSOCK core, just

  after the release(), so there may still be delayed work scheduled.


  Refactor the code, moving the code to delete the close work already in

  the do_close() to a new function. Invoke it during destruction to make

  sure we don''t leave any pending work.


  Fixes: c0cfa2d8a788 ("vsock: add multi-transports support")

  Cc: stable@vger.kernel.org

  Reported-by: Hyunwoo Kim <v4bel@theori.io>

  Closes: https://lore.kernel.org/netdev/Z37Sh+utS+iV3+eb@v4bel-B760M-AORUS-ELITE-AX/

  Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>

  Reviewed-by: Luigi Leonardi <leonardi@redhat.com>

  Tested-by: Hyunwoo Kim <v4bel@theori.io>

  Signed-off-by: Paolo Abeni <pabeni@redhat.com>


  '
submodule:
- net/vmw_vsock
hunk_count: 4
covered_count: 3
