id: a5fea9200aefd1cf4818
bug_link: https://syzkaller.appspot.com/bug?extid=a5fea9200aefd1cf4818
title: general protection fault in transparent_hugepage_enabled
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 7550c6079846a24f30d15ac75a941c8515dbedfb
fix_commit: 7635d9cbe8327e131a1d3d8517dc186c2796ce2e
datetime: '2018-12-28T12:11:50-08:00'
fix_commit_message: "mm, thp, proc: report THP eligibility for each vma\n\nUserspace\
  \ falls short when trying to find out whether a specific memory\nrange is eligible\
  \ for THP.  There are usecases that would like to know\nthat\nhttp://lkml.kernel.org/r/alpine.DEB.2.21.1809251248450.50347@chino.kir.corp.google.com\n\
  : This is used to identify heap mappings that should be able to fault thp\n: but\
  \ do not, and they normally point to a low-on-memory or fragmentation\n: issue.\n\
  \nThe only way to deduce this now is to query for hg resp.  nh flags and\nconfronting\
  \ the state with the global setting.  Except that there is also\nPR_SET_THP_DISABLE\
  \ that might change the picture.  So the final logic is\nnot trivial.  Moreover\
  \ the eligibility of the vma depends on the type of\nVMA as well.  In the past we\
  \ have supported only anononymous memory VMAs\nbut things have changed and shmem\
  \ based vmas are supported as well these\ndays and the query logic gets even more\
  \ complicated because the\neligibility depends on the mount option and another global\
  \ configuration\nknob.\n\nSimplify the current state and report the THP eligibility\
  \ in\n/proc/<pid>/smaps for each existing vma.  Reuse\ntransparent_hugepage_enabled\
  \ for this purpose.  The original\nimplementation of this function assumes that\
  \ the caller knows that the vma\nitself is supported for THP so make the core checks\
  \ into\n__transparent_hugepage_enabled and use it for existing callers.\n__show_smap\
  \ just use the new transparent_hugepage_enabled which also\nchecks the vma support\
  \ status (please note that this one has to be out of\nline due to include dependency\
  \ issues).\n\n[mhocko@kernel.org: fix oops with NULL ->f_mapping]\n  Link: http://lkml.kernel.org/r/20181224185106.GC16738@dhcp22.suse.cz\n\
  Link: http://lkml.kernel.org/r/20181211143641.3503-3-mhocko@kernel.org\nSigned-off-by:\
  \ Michal Hocko <mhocko@suse.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCc:\
  \ Dan Williams <dan.j.williams@intel.com>\nCc: David Rientjes <rientjes@google.com>\n\
  Cc: Jan Kara <jack@suse.cz>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Paul Oppenheimer\
  \ <bepvte@gmail.com>\nCc: William Kucharski <william.kucharski@oracle.com>\nSigned-off-by:\
  \ Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\n"
submodule:
- Documentation/filesystems
- fs/proc
- include/linux
- mm
hunk_count: 10
covered_count: 2
