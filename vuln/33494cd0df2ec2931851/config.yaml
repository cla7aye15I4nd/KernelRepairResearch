id: 33494cd0df2ec2931851
bug_link: https://syzkaller.appspot.com/bug?extid=33494cd0df2ec2931851
title: WARNING in nilfs_segctor_do_construct (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 88ac3bbcf73853880a9b2a65c67e6854390741cc
fix_commit: fee5eaecca86afa544355569b831c1f90f334b85
datetime: '2023-06-12T11:31:51-07:00'
fix_commit_message: 'nilfs2: fix possible out-of-bounds segment allocation in resize
  ioctl


  Syzbot reports that in its stress test for resize ioctl, the log writing

  function nilfs_segctor_do_construct hits a WARN_ON in

  nilfs_segctor_truncate_segments().


  It turned out that there is a problem with the current implementation of

  the resize ioctl, which changes the writable range on the device (the

  range of allocatable segments) at the end of the resize process.


  This order is necessary for file system expansion to avoid corrupting the

  superblock at trailing edge.  However, in the case of a file system

  shrink, if log writes occur after truncating out-of-bounds trailing

  segments and before the resize is complete, segments may be allocated from

  the truncated space.


  The userspace resize tool was fine as it limits the range of allocatable

  segments before performing the resize, but it can run into this issue if

  the resize ioctl is called alone.


  Fix this issue by changing nilfs_sufile_resize() to update the range of

  allocatable segments immediately after successful truncation of segment

  space in case of file system shrink.


  Link: https://lkml.kernel.org/r/20230524094348.3784-1-konishi.ryusuke@gmail.com

  Fixes: 4e33f9eab07e ("nilfs2: implement resize ioctl")

  Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>

  Reported-by: syzbot+33494cd0df2ec2931851@syzkaller.appspotmail.com

  Closes: https://lkml.kernel.org/r/0000000000005434c405fbbafdc5@google.com

  Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>

  Cc: <stable@vger.kernel.org>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  '
submodule:
- fs/nilfs2
hunk_count: 1
covered_count: 0
