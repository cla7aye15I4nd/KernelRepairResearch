id: f0b97304ef90f0d0b1dc
bug_link: https://syzkaller.appspot.com/bug?extid=f0b97304ef90f0d0b1dc
title: WARNING in hugetlb_wp
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 052d9b0f7ae1200b4a0783cf934ee4a987d37fd7
fix_commit: f347454d034184b4f0a2caf6e14daf7848cea01c
datetime: '2022-11-30T15:59:00-08:00'
fix_commit_message: "mm/gup: disallow FOLL_FORCE|FOLL_WRITE on hugetlb mappings\n\n\
  hugetlb does not support fake write-faults (write faults without write\npermissions).\
  \  However, we are currently able to trigger a\nFAULT_FLAG_WRITE fault on a VMA\
  \ without VM_WRITE.\n\nIf we'd ever want to support FOLL_FORCE|FOLL_WRITE, we'd\
  \ have to teach\nhugetlb to:\n\n(1) Leave the page mapped R/O after the fake write-fault,\
  \ like\n    maybe_mkwrite() does.\n(2) Allow writing to an exclusive anon page that's\
  \ mapped R/O when\n    FOLL_FORCE is set, like can_follow_write_pte(). E.g.,\n \
  \   __follow_hugetlb_must_fault() needs adjustment.\n\nFor now, it's not clear if\
  \ that added complexity is really required. \nHistory tolds us that FOLL_FORCE is\
  \ dangerous and that we better limit its\nuse to a bare minimum.\n\n--------------------------------------------------------------------------\n\
  \  #include <stdio.h>\n  #include <stdlib.h>\n  #include <fcntl.h>\n  #include <unistd.h>\n\
  \  #include <errno.h>\n  #include <stdint.h>\n  #include <sys/mman.h>\n  #include\
  \ <linux/mman.h>\n\n  int main(int argc, char **argv)\n  {\n          char *map;\n\
  \          int mem_fd;\n\n          map = mmap(NULL, 2 * 1024 * 1024u, PROT_READ,\n\
  \                     MAP_PRIVATE|MAP_ANON|MAP_HUGETLB|MAP_HUGE_2MB, -1, 0);\n \
  \         if (map == MAP_FAILED) {\n                  fprintf(stderr, \"mmap() failed:\
  \ %d\\n\", errno);\n                  return 1;\n          }\n\n          mem_fd\
  \ = open(\"/proc/self/mem\", O_RDWR);\n          if (mem_fd < 0) {\n           \
  \       fprintf(stderr, \"open(/proc/self/mem) failed: %d\\n\", errno);\n      \
  \            return 1;\n          }\n\n          if (pwrite(mem_fd, \"0\", 1, (uintptr_t)\
  \ map) == 1) {\n                  fprintf(stderr, \"write() succeeded, which is\
  \ unexpected\\n\");\n                  return 1;\n          }\n\n          printf(\"\
  write() failed as expected: %d\\n\", errno);\n          return 0;\n  }\n--------------------------------------------------------------------------\n\
  \nFortunately, we have a sanity check in hugetlb_wp() in place ever since\ncommit\
  \ 1d8d14641fd9 (\"mm/hugetlb: support write-faults in shared\nmappings\"), that\
  \ bails out instead of silently mapping a page writable in\na !PROT_WRITE VMA.\n\
  \nConsequently, above reproducer triggers a warning, similar to the one\nreported\
  \ by szsbot:\n\n------------[ cut here ]------------\nWARNING: CPU: 1 PID: 3612\
  \ at mm/hugetlb.c:5313 hugetlb_wp+0x20a/0x1af0 mm/hugetlb.c:5313\nModules linked\
  \ in:\nCPU: 1 PID: 3612 Comm: syz-executor250 Not tainted 6.1.0-rc2-syzkaller #0\n\
  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 10/11/2022\n\
  RIP: 0010:hugetlb_wp+0x20a/0x1af0 mm/hugetlb.c:5313\nCode: ea 03 80 3c 02 00 0f\
  \ 85 31 14 00 00 49 8b 5f 20 31 ff 48 89 dd 83 e5 02 48 89 ee e8 70 ab b7 ff 48\
  \ 85 ed 75 5b e8 76 ae b7 ff <0f> 0b 41 bd 40 00 00 00 e8 69 ae b7 ff 48 b8 00 00\
  \ 00 00 00 fc ff\nRSP: 0018:ffffc90003caf620 EFLAGS: 00010293\nRAX: 0000000000000000\
  \ RBX: 0000000008640070 RCX: 0000000000000000\nRDX: ffff88807b963a80 RSI: ffffffff81c4ed2a\
  \ RDI: 0000000000000007\nRBP: 0000000000000000 R08: 0000000000000007 R09: 0000000000000000\n\
  R10: 0000000000000000 R11: 000000000008c07e R12: ffff888023805800\nR13: 0000000000000000\
  \ R14: ffffffff91217f38 R15: ffff88801d4b0360\nFS:  0000555555bba300(0000) GS:ffff8880b9b00000(0000)\
  \ knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2:\
  \ 00007fff7a47a1b8 CR3: 000000002378d000 CR4: 00000000003506e0\nDR0: 0000000000000000\
  \ DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0\
  \ DR7: 0000000000000400\nCall Trace:\n <TASK>\n hugetlb_no_page mm/hugetlb.c:5755\
  \ [inline]\n hugetlb_fault+0x19cc/0x2060 mm/hugetlb.c:5874\n follow_hugetlb_page+0x3f3/0x1850\
  \ mm/hugetlb.c:6301\n __get_user_pages+0x2cb/0xf10 mm/gup.c:1202\n __get_user_pages_locked\
  \ mm/gup.c:1434 [inline]\n __get_user_pages_remote+0x18f/0x830 mm/gup.c:2187\n get_user_pages_remote+0x84/0xc0\
  \ mm/gup.c:2260\n __access_remote_vm+0x287/0x6b0 mm/memory.c:5517\n ptrace_access_vm+0x181/0x1d0\
  \ kernel/ptrace.c:61\n generic_ptrace_pokedata kernel/ptrace.c:1323 [inline]\n ptrace_request+0xb46/0x10c0\
  \ kernel/ptrace.c:1046\n arch_ptrace+0x36/0x510 arch/x86/kernel/ptrace.c:828\n __do_sys_ptrace\
  \ kernel/ptrace.c:1296 [inline]\n __se_sys_ptrace kernel/ptrace.c:1269 [inline]\n\
  \ __x64_sys_ptrace+0x178/0x2a0 kernel/ptrace.c:1269\n do_syscall_x64 arch/x86/entry/common.c:50\
  \ [inline]\n do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\
  [...]\n\nSo let's silence that warning by teaching GUP code that FOLL_FORCE -- so\n\
  far -- does not apply to hugetlb.\n\nNote that FOLL_FORCE for read-access seems\
  \ to be working as expected.  The\nassumption is that this has been broken forever,\
  \ only ever since above\ncommit, we actually detect the wrong handling and WARN_ON_ONCE().\n\
  \nI assume this has been broken at least since 2014, when mm/gup.c came to\nlife.\
  \  I failed to come up with a suitable Fixes tag quickly.\n\nLink: https://lkml.kernel.org/r/20221031152524.173644-1-david@redhat.com\n\
  Fixes: 1d8d14641fd9 (\"mm/hugetlb: support write-faults in shared mappings\")\n\
  Signed-off-by: David Hildenbrand <david@redhat.com>\nReported-by: <syzbot+f0b97304ef90f0d0b1dc@syzkaller.appspotmail.com>\n\
  Cc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Peter Xu <peterx@redhat.com>\nCc:\
  \ John Hubbard <jhubbard@nvidia.com>\nCc: Jason Gunthorpe <jgg@nvidia.com>\nCc:\
  \ <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\n"
submodule:
- mm
hunk_count: 1
covered_count: 0
