id: ec2234240c96fdd26b93
bug_link: https://syzkaller.appspot.com/bug?extid=ec2234240c96fdd26b93
title: 'BUG: unable to handle kernel paging request in bpf_lru_populate'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 34da87213d3ddd26643aa83deff7ffc6463da0fc
fix_commit: e1868b9e36d0ca52e4e7c6c06953f191446e44df
datetime: '2020-12-07T12:57:25-08:00'
fix_commit_message: "bpf: Avoid overflows involving hash elem_size\n\nUse of bpf_map_charge_init()\
  \ was making sure hash tables would not use more\nthan 4GB of memory.\n\nSince the\
  \ implicit check disappeared, we have to be more careful\nabout overflows, to support\
  \ big hash tables.\n\nsyzbot triggers a panic using :\n\nbpf(BPF_MAP_CREATE, {map_type=BPF_MAP_TYPE_LRU_HASH,\
  \ key_size=16384, value_size=8,\n                     max_entries=262200, map_flags=0,\
  \ inner_map_fd=-1, map_name=\"\",\n                     map_ifindex=0, btf_fd=-1,\
  \ btf_key_type_id=0, btf_value_type_id=0,\n                     btf_vmlinux_value_type_id=0},\
  \ 64) = ...\n\nBUG: KASAN: vmalloc-out-of-bounds in bpf_percpu_lru_populate kernel/bpf/bpf_lru_list.c:594\
  \ [inline]\nBUG: KASAN: vmalloc-out-of-bounds in bpf_lru_populate+0x4ef/0x5e0 kernel/bpf/bpf_lru_list.c:611\n\
  Write of size 2 at addr ffffc90017e4a020 by task syz-executor.5/19786\n\nCPU: 0\
  \ PID: 19786 Comm: syz-executor.5 Not tainted 5.10.0-rc3-syzkaller #0\nHardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\n\
  Call Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0x107/0x163\
  \ lib/dump_stack.c:118\n print_address_description.constprop.0.cold+0x5/0x4c8 mm/kasan/report.c:385\n\
  \ __kasan_report mm/kasan/report.c:545 [inline]\n kasan_report.cold+0x1f/0x37 mm/kasan/report.c:562\n\
  \ bpf_percpu_lru_populate kernel/bpf/bpf_lru_list.c:594 [inline]\n bpf_lru_populate+0x4ef/0x5e0\
  \ kernel/bpf/bpf_lru_list.c:611\n prealloc_init kernel/bpf/hashtab.c:319 [inline]\n\
  \ htab_map_alloc+0xf6e/0x1230 kernel/bpf/hashtab.c:507\n find_and_alloc_map kernel/bpf/syscall.c:123\
  \ [inline]\n map_create kernel/bpf/syscall.c:829 [inline]\n __do_sys_bpf+0xa81/0x5170\
  \ kernel/bpf/syscall.c:4336\n do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46\n\
  \ entry_SYSCALL_64_after_hwframe+0x44/0xa9\nRIP: 0033:0x45deb9\nCode: 0d b4 fb ff\
  \ c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d\
  \ 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 db b3 fb ff c3 66\
  \ 2e 0f 1f 84 00 00 00 00\nRSP: 002b:00007fd93fbc0c78 EFLAGS: 00000246 ORIG_RAX:\
  \ 0000000000000141\nRAX: ffffffffffffffda RBX: 0000000000001a40 RCX: 000000000045deb9\n\
  RDX: 0000000000000040 RSI: 0000000020000280 RDI: 0000000000000000\nRBP: 000000000119bf60\
  \ R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246\
  \ R12: 000000000119bf2c\nR13: 00007ffc08a7be8f R14: 00007fd93fbc19c0 R15: 000000000119bf2c\n\
  \nFixes: 755e5d55367a (\"bpf: Eliminate rlimit-based memory accounting for hashtab\
  \ maps\")\nReported-by: syzbot <syzkaller@googlegroups.com>\nSigned-off-by: Eric\
  \ Dumazet <edumazet@google.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n\
  Acked-by: Roman Gushchin <guro@fb.com>\nLink: https://lore.kernel.org/bpf/20201207182821.3940306-1-eric.dumazet@gmail.com\n"
submodule:
- kernel/bpf
hunk_count: 2
covered_count: 1
