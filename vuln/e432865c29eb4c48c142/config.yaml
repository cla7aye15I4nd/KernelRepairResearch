id: e432865c29eb4c48c142
bug_link: https://syzkaller.appspot.com/bug?extid=e432865c29eb4c48c142
title: general protection fault in __netlink_ns_capable
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: fb32dd3abf7a8fc13271d0d1c45ffc66df28dd15
fix_commit: f428fe4a04cc339166c8bbd489789760de3a0cee
datetime: '2018-01-04T13:42:20-05:00'
fix_commit_message: "rtnetlink: give a user socket to get_target_net()\n\nThis function\
  \ is used from two places: rtnl_dump_ifinfo and\nrtnl_getlink. In rtnl_getlink(),\
  \ we give a request skb into\nget_target_net(), but in rtnl_dump_ifinfo, we give\
  \ a response skb\ninto get_target_net().\nThe problem here is that NETLINK_CB()\
  \ isn't initialized for the response\nskb. In both cases we can get a user socket\
  \ and give it instead of skb\ninto get_target_net().\n\nThis bug was found by syzkaller\
  \ with this call-trace:\n\nkasan: GPF could be caused by NULL-ptr deref or user\
  \ memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\n\
  CPU: 1 PID: 3149 Comm: syzkaller140561 Not tainted 4.15.0-rc4-mm1+ #47\nHardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle 01/01/2011\n\
  RIP: 0010:__netlink_ns_capable+0x8b/0x120 net/netlink/af_netlink.c:868\nRSP: 0018:ffff8801c880f348\
  \ EFLAGS: 00010206\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff8443f900\n\
  RDX: 000000000000007b RSI: ffffffff86510f40 RDI: 00000000000003d8\nRBP: ffff8801c880f360\
  \ R08: 0000000000000000 R09: 1ffff10039101e4f\nR10: 0000000000000000 R11: 0000000000000001\
  \ R12: ffffffff86510f40\nR13: 000000000000000c R14: 0000000000000004 R15: 0000000000000011\n\
  FS:  0000000001a1a880(0000) GS:ffff8801db300000(0000) knlGS:0000000000000000\nCS:\
  \  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020151000 CR3: 00000001c9511005\
  \ CR4: 00000000001606e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n\
  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n\
  \  netlink_ns_capable+0x26/0x30 net/netlink/af_netlink.c:886\n  get_target_net+0x9d/0x120\
  \ net/core/rtnetlink.c:1765\n  rtnl_dump_ifinfo+0x2e5/0xee0 net/core/rtnetlink.c:1806\n\
  \  netlink_dump+0x48c/0xce0 net/netlink/af_netlink.c:2222\n  __netlink_dump_start+0x4f0/0x6d0\
  \ net/netlink/af_netlink.c:2319\n  netlink_dump_start include/linux/netlink.h:214\
  \ [inline]\n  rtnetlink_rcv_msg+0x7f0/0xb10 net/core/rtnetlink.c:4485\n  netlink_rcv_skb+0x21e/0x460\
  \ net/netlink/af_netlink.c:2441\n  rtnetlink_rcv+0x1c/0x20 net/core/rtnetlink.c:4540\n\
  \  netlink_unicast_kernel net/netlink/af_netlink.c:1308 [inline]\n  netlink_unicast+0x4be/0x6a0\
  \ net/netlink/af_netlink.c:1334\n  netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1897\n\
  \nCc: Jiri Benc <jbenc@redhat.com>\nFixes: 79e1ad148c84 (\"rtnetlink: use netnsid\
  \ to query interface\")\nSigned-off-by: Andrei Vagin <avagin@openvz.org>\nSigned-off-by:\
  \ David S. Miller <davem@davemloft.net>\n"
submodule:
- net/core
hunk_count: 3
covered_count: 2
