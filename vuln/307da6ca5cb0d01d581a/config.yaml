id: 307da6ca5cb0d01d581a
bug_link: https://syzkaller.appspot.com/bug?extid=307da6ca5cb0d01d581a
title: WARNING in ext4_iomap_begin (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 28b95ee868072f1cd029245bf96cf02844322f37
fix_commit: ce56d21355cd6f6937aca32f1f44ca749d1e4808
datetime: '2023-10-31T20:20:45-04:00'
fix_commit_message: "ext4: fix racy may inline data check in dio write\n\nsyzbot reports\
  \ that the following warning from ext4_iomap_begin()\ntriggers as of the commit\
  \ referenced below:\n\n        if (WARN_ON_ONCE(ext4_has_inline_data(inode)))\n\
  \                return -ERANGE;\n\nThis occurs during a dio write, which is never\
  \ expected to encounter\nan inode with inline data. To enforce this behavior,\n\
  ext4_dio_write_iter() checks the current inline state of the inode\nand clears the\
  \ MAY_INLINE_DATA state flag to either fall back to\nbuffered writes, or enforce\
  \ that any other writers in progress on\nthe inode are not allowed to create inline\
  \ data.\n\nThe problem is that the check for existing inline data and the state\n\
  flag can span a lock cycle. For example, if the ilock is originally\nlocked shared\
  \ and subsequently upgraded to exclusive, another writer\nmay have reacquired the\
  \ lock and created inline data before the dio\nwrite task acquires the lock and\
  \ proceeds.\n\nThe commit referenced below loosens the lock requirements to allow\n\
  some forms of unaligned dio writes to occur under shared lock, but\nAFAICT the inline\
  \ data check was technically already racy for any\ndio write that would have involved\
  \ a lock cycle. Regardless, lift\nclearing of the state bit to the same lock critical\
  \ section that\nchecks for preexisting inline data on the inode to close the race.\n\
  \nCc: stable@kernel.org\nReported-by: syzbot+307da6ca5cb0d01d581a@syzkaller.appspotmail.com\n\
  Fixes: 310ee0902b8d (\"ext4: allow concurrent unaligned dio overwrites\")\nSigned-off-by:\
  \ Brian Foster <bfoster@redhat.com>\nLink: https://lore.kernel.org/r/20231002185020.531537-1-bfoster@redhat.com\n\
  Signed-off-by: Theodore Ts'o <tytso@mit.edu>\n"
submodule:
- fs/ext4
hunk_count: 1
covered_count: 1
