id: 29c3c12f3214b85ad081
bug_link: https://syzkaller.appspot.com/bug?extid=29c3c12f3214b85ad081
title: general protection fault in tls_sk_proto_close (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 301bd140ed0b24f0da660874c7e8a47dad8c8222
fix_commit: 69135c572d1f84261a6de2a1268513a7e71753e2
datetime: '2022-06-20T10:01:52+01:00'
fix_commit_message: "net/tls: fix tls_sk_proto_close executed repeatedly\n\nAfter\
  \ setting the sock ktls, update ctx->sk_proto to sock->sk_prot by\ntls_update(),\
  \ so now ctx->sk_proto->close is tls_sk_proto_close(). When\nclose the sock, tls_sk_proto_close()\
  \ is called for sock->sk_prot->close\nis tls_sk_proto_close(). But ctx->sk_proto->close()\
  \ will be executed later\nin tls_sk_proto_close(). Thus tls_sk_proto_close() executed\
  \ repeatedly\noccurred. That will trigger the following bug.\n\n=================================================================\n\
  KASAN: null-ptr-deref in range [0x0000000000000010-0x0000000000000017]\nRIP: 0010:tls_sk_proto_close+0xd8/0xaf0\
  \ net/tls/tls_main.c:306\nCall Trace:\n <TASK>\n tls_sk_proto_close+0x356/0xaf0\
  \ net/tls/tls_main.c:329\n inet_release+0x12e/0x280 net/ipv4/af_inet.c:428\n __sock_release+0xcd/0x280\
  \ net/socket.c:650\n sock_close+0x18/0x20 net/socket.c:1365\n\nUpdating a proto\
  \ which is same with sock->sk_prot is incorrect. Add proto\nand sock->sk_prot equality\
  \ check at the head of tls_update() to fix it.\n\nFixes: 95fa145479fb (\"bpf: sockmap/tls,\
  \ close can race with map free\")\nReported-by: syzbot+29c3c12f3214b85ad081@syzkaller.appspotmail.com\n\
  Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>\nSigned-off-by: David\
  \ S. Miller <davem@davemloft.net>\n"
submodule:
- net/tls
hunk_count: 1
covered_count: 0
