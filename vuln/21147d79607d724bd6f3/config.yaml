id: 21147d79607d724bd6f3
bug_link: https://syzkaller.appspot.com/bug?extid=21147d79607d724bd6f3
title: general protection fault in io_commit_cqring
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 7c9e7f0fe0d8abf856a957c150c48778e75154c1
fix_commit: 15dff286d0e0087d4dcd7049911f179e4e4cfd94
datetime: '2019-11-13T09:11:36-07:00'
fix_commit_message: "io_uring: check for validity of ->rings in teardown\n\nNormally\
  \ the rings are always valid, the exception is if we failed to\nallocate the rings\
  \ at setup time. syzbot reports this:\n\nRSP: 002b:00007ffd6e8aa078 EFLAGS: 00000246\
  \ ORIG_RAX: 00000000000001a9\nRAX: ffffffffffffffda RBX: 0000000000000000 RCX: 0000000000441229\n\
  RDX: 0000000000000002 RSI: 0000000020000140 RDI: 0000000000000d0d\nRBP: 00007ffd6e8aa090\
  \ R08: 0000000000000001 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246\
  \ R12: ffffffffffffffff\nR13: 0000000000000003 R14: 0000000000000000 R15: 0000000000000000\n\
  kasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref\
  \ or user memory access\ngeneral protection fault: 0000 [#1] PREEMPT SMP KASAN\n\
  CPU: 1 PID: 8903 Comm: syz-executor410 Not tainted 5.4.0-rc7-next-20191113\nHardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle 01/01/2011\n\
  RIP: 0010:__read_once_size include/linux/compiler.h:199 [inline]\nRIP: 0010:__io_commit_cqring\
  \ fs/io_uring.c:496 [inline]\nRIP: 0010:io_commit_cqring+0x1e1/0xdb0 fs/io_uring.c:592\n\
  Code: 03 0f 8e df 09 00 00 48 8b 45 d0 4c 8d a3 c0 00 00 00 4c 89 e2 48 c1\nea 03\
  \ 44 8b b8 c0 01 00 00 48 b8 00 00 00 00 00 fc ff df <0f> b6 14 02 4c\n89 e0 83\
  \ e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85 61\nRSP: 0018:ffff88808f51fc08 EFLAGS:\
  \ 00010006\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff815abe4a\n\
  RDX: 0000000000000018 RSI: ffffffff81d168d5 RDI: ffff8880a9166100\nRBP: ffff88808f51fc70\
  \ R08: 0000000000000004 R09: ffffed1011ea3f7d\nR10: ffffed1011ea3f7c R11: 0000000000000003\
  \ R12: 00000000000000c0\nR13: ffff8880a91661c0 R14: 1ffff1101522cc10 R15: 0000000000000000\n\
  FS:  0000000001e7a880(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000\nCS:\
  \  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000140 CR3: 000000009a74c000\
  \ CR4: 00000000001406e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n\
  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n\
  \  io_cqring_overflow_flush+0x6b9/0xa90 fs/io_uring.c:673\n  io_ring_ctx_wait_and_kill+0x24f/0x7c0\
  \ fs/io_uring.c:4260\n  io_uring_create fs/io_uring.c:4600 [inline]\n  io_uring_setup+0x1256/0x1cc0\
  \ fs/io_uring.c:4626\n  __do_sys_io_uring_setup fs/io_uring.c:4639 [inline]\n  __se_sys_io_uring_setup\
  \ fs/io_uring.c:4636 [inline]\n  __x64_sys_io_uring_setup+0x54/0x80 fs/io_uring.c:4636\n\
  \  do_syscall_64+0xfa/0x760 arch/x86/entry/common.c:290\n  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  RIP: 0033:0x441229\nCode: e8 5c ae 02 00 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48\
  \ 89 f8 48 89 f7\n48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48>\
  \ 3d 01 f0 ff\nff 0f 83 bb 0a fc ff c3 66 2e 0f 1f 84 00 00 00 00\nRSP: 002b:00007ffd6e8aa078\
  \ EFLAGS: 00000246 ORIG_RAX: 00000000000001a9\nRAX: ffffffffffffffda RBX: 0000000000000000\
  \ RCX: 0000000000441229\nRDX: 0000000000000002 RSI: 0000000020000140 RDI: 0000000000000d0d\n\
  RBP: 00007ffd6e8aa090 R08: 0000000000000001 R09: 0000000000000000\nR10: 0000000000000000\
  \ R11: 0000000000000246 R12: ffffffffffffffff\nR13: 0000000000000003 R14: 0000000000000000\
  \ R15: 0000000000000000\nModules linked in:\n---[ end trace b0f5b127a57f623f ]---\n\
  RIP: 0010:__read_once_size include/linux/compiler.h:199 [inline]\nRIP: 0010:__io_commit_cqring\
  \ fs/io_uring.c:496 [inline]\nRIP: 0010:io_commit_cqring+0x1e1/0xdb0 fs/io_uring.c:592\n\
  Code: 03 0f 8e df 09 00 00 48 8b 45 d0 4c 8d a3 c0 00 00 00 4c 89 e2 48 c1\nea 03\
  \ 44 8b b8 c0 01 00 00 48 b8 00 00 00 00 00 fc ff df <0f> b6 14 02 4c\n89 e0 83\
  \ e0 07 83 c0 03 38 d0 7c 08 84 d2 0f 85 61\nRSP: 0018:ffff88808f51fc08 EFLAGS:\
  \ 00010006\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff815abe4a\n\
  RDX: 0000000000000018 RSI: ffffffff81d168d5 RDI: ffff8880a9166100\nRBP: ffff88808f51fc70\
  \ R08: 0000000000000004 R09: ffffed1011ea3f7d\nR10: ffffed1011ea3f7c R11: 0000000000000003\
  \ R12: 00000000000000c0\nR13: ffff8880a91661c0 R14: 1ffff1101522cc10 R15: 0000000000000000\n\
  FS:  0000000001e7a880(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000\nCS:\
  \  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000140 CR3: 000000009a74c000\
  \ CR4: 00000000001406e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n\
  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n\nwhich is exactly\
  \ the case of failing to allocate the SQ/CQ rings, and\nthen entering shutdown.\
  \ Check if the rings are valid before trying to\naccess them at shutdown time.\n\
  \nReported-by: syzbot+21147d79607d724bd6f3@syzkaller.appspotmail.com\nFixes: 1d7bb1d50fb4\
  \ (\"io_uring: add support for backlogged CQ ring\")\nSigned-off-by: Jens Axboe\
  \ <axboe@kernel.dk>\n"
submodule:
- fs
hunk_count: 1
covered_count: 1
