id: d7581744d5fd27c9fbe1
bug_link: https://syzkaller.appspot.com/bug?extid=d7581744d5fd27c9fbe1
title: 'UBSAN: shift-out-of-bounds in load_balance'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 736cc6b31102236a55470c72523ed0a65eb3f804
fix_commit: 39a2a6eb5c9b66ea7c8055026303b3aa681b49a5
datetime: '2021-03-06T12:40:22+01:00'
fix_commit_message: "sched/fair: Fix shift-out-of-bounds in load_balance()\n\nSyzbot\
  \ reported a handful of occurrences where an sd->nr_balance_failed can\ngrow to\
  \ much higher values than one would expect.\n\nA successful load_balance() resets\
  \ it to 0; a failed one increments\nit. Once it gets to sd->cache_nice_tries + 3,\
  \ this *should* trigger an\nactive balance, which will either set it to sd->cache_nice_tries+1\
  \ or reset\nit to 0. However, in case the to-be-active-balanced task is not allowed\
  \ to\nrun on env->dst_cpu, then the increment is done without any further\nmodification.\n\
  \nThis could then be repeated ad nauseam, and would explain the absurdly high\n\
  values reported by syzbot (86, 149). VincentG noted there is value in\nletting sd->cache_nice_tries\
  \ grow, so the shift itself should be\nfixed. That means preventing:\n\n  \"\"\"\
  \n  If the value of the right operand is negative or is greater than or equal\n\
  \  to the width of the promoted left operand, the behavior is undefined.\n  \"\"\
  \"\n\nThus we need to cap the shift exponent to\n  BITS_PER_TYPE(typeof(lefthand))\
  \ - 1.\n\nI had a look around for other similar cases via coccinelle:\n\n  @expr@\n\
  \  position pos;\n  expression E1;\n  expression E2;\n  @@\n  (\n  E1 >> E2@pos\n\
  \  |\n  E1 >> E2@pos\n  )\n\n  @cst depends on expr@\n  position pos;\n  expression\
  \ expr.E1;\n  constant cst;\n  @@\n  (\n  E1 >> cst@pos\n  |\n  E1 << cst@pos\n\
  \  )\n\n  @script:python depends on !cst@\n  pos << expr.pos;\n  exp << expr.E2;\n\
  \  @@\n  # Dirty hack to ignore constexpr\n  if exp.upper() != exp:\n     coccilib.report.print_report(pos[0],\
  \ \"Possible UB shift here\")\n\nThe only other match in kernel/sched is rq_clock_thermal()\
  \ which employs\nsched_thermal_decay_shift, and that exponent is already capped\
  \ to 10, so\nthat one is fine.\n\nFixes: 5a7f55590467 (\"sched/fair: Relax constraint\
  \ on task's load during load balance\")\nReported-by: syzbot+d7581744d5fd27c9fbe1@syzkaller.appspotmail.com\n\
  Signed-off-by: Valentin Schneider <valentin.schneider@arm.com>\nSigned-off-by: Peter\
  \ Zijlstra (Intel) <peterz@infradead.org>\nSigned-off-by: Ingo Molnar <mingo@kernel.org>\n\
  Link: http://lore.kernel.org/r/000000000000ffac1205b9a2112f@google.com\n"
submodule:
- kernel/sched
hunk_count: 2
covered_count: 1
