id: 89edd67979b52675ddec
bug_link: https://syzkaller.appspot.com/bug?extid=89edd67979b52675ddec
title: 'BUG: unable to handle kernel paging request in __pte_offset_map_lock'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: eb66b8abae98f869c224f7c852b685ae02144564
fix_commit: 9aa1345d66b8132745ffb99b348b1492088da9e2
datetime: '2023-12-06T16:12:45-08:00'
fix_commit_message: 'mm: fix oops when filemap_map_pmd() without prealloc_pte


  syzbot reports oops in lockdep''s __lock_acquire(), called from

  __pte_offset_map_lock() called from filemap_map_pages(); or when I run the

  repro, the oops comes in pmd_install(), called from filemap_map_pmd()

  called from filemap_map_pages(), just before the __pte_offset_map_lock().


  The problem is that filemap_map_pmd() has been assuming that when it finds

  pmd_none(), a page table has already been prepared in prealloc_pte; and

  indeed do_fault_around() has been careful to preallocate one there, when

  it finds pmd_none(): but what if *pmd became none in between?


  My 6.6 mods in mm/khugepaged.c, avoiding mmap_lock for write, have made it

  easy for *pmd to be cleared while servicing a page fault; but even before

  those, a huge *pmd might be zapped while a fault is serviced.


  The difference in symptomatic stack traces comes from the "memory model"

  in use: pmd_install() uses pmd_populate() uses page_to_pfn(): in some

  models that is strict, and will oops on the NULL prealloc_pte; in other

  models, it will construct a bogus value to be populated into *pmd, then

  __pte_offset_map_lock() oops when trying to access split ptlock pointer

  (or some other symptom in normal case of ptlock embedded not pointer).


  Link: https://lore.kernel.org/linux-mm/20231115065506.19780-1-jose.pekkarinen@foxhound.fi/

  Link: https://lkml.kernel.org/r/6ed0c50c-78ef-0719-b3c5-60c0c010431c@google.com

  Fixes: f9ce0be71d1f ("mm: Cleanup faultaround and finish_fault() codepaths")

  Signed-off-by: Hugh Dickins <hughd@google.com>

  Reported-and-tested-by: syzbot+89edd67979b52675ddec@syzkaller.appspotmail.com

  Closes: https://lore.kernel.org/linux-mm/0000000000005e44550608a0806c@google.com/

  Reviewed-by: David Hildenbrand <david@redhat.com>

  Cc: Jann Horn <jannh@google.com>,

  Cc: Jos√© Pekkarinen <jose.pekkarinen@foxhound.fi>

  Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>

  Cc: Matthew Wilcox (Oracle) <willy@infradead.org>

  Cc: <stable@vger.kernel.org>    [5.12+]

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  '
submodule:
- mm
hunk_count: 1
covered_count: 0
