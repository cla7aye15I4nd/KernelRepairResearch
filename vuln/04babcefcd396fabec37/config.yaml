id: 04babcefcd396fabec37
bug_link: https://syzkaller.appspot.com/bug?extid=04babcefcd396fabec37
title: 'KASAN: use-after-free Read in x25_device_event'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: d721fe99f6ada070ae8fc0ec3e01ce5a42def0d9
fix_commit: 95d6ebd53c79522bf9502dbc7e89e0d63f94dae4
datetime: '2019-03-10T11:03:59-07:00'
fix_commit_message: "net/x25: fix use-after-free in x25_device_event()\n\nIn case\
  \ of failure x25_connect() does a x25_neigh_put(x25->neighbour)\nbut forgets to\
  \ clear x25->neighbour pointer, thus triggering use-after-free.\n\nSince the socket\
  \ is visible in x25_list, we need to hold x25_list_lock\nto protect the operation.\n\
  \nsyzbot report :\n\nBUG: KASAN: use-after-free in x25_kill_by_device net/x25/af_x25.c:217\
  \ [inline]\nBUG: KASAN: use-after-free in x25_device_event+0x296/0x2b0 net/x25/af_x25.c:252\n\
  Read of size 8 at addr ffff8880a030edd0 by task syz-executor003/7854\n\nCPU: 0 PID:\
  \ 7854 Comm: syz-executor003 Not tainted 5.0.0+ #97\nHardware name: Google Google\
  \ Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nCall Trace:\n __dump_stack\
  \ lib/dump_stack.c:77 [inline]\n dump_stack+0x172/0x1f0 lib/dump_stack.c:113\n print_address_description.cold+0x7c/0x20d\
  \ mm/kasan/report.c:187\n kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317\n __asan_report_load8_noabort+0x14/0x20\
  \ mm/kasan/generic_report.c:135\n x25_kill_by_device net/x25/af_x25.c:217 [inline]\n\
  \ x25_device_event+0x296/0x2b0 net/x25/af_x25.c:252\n notifier_call_chain+0xc7/0x240\
  \ kernel/notifier.c:93\n __raw_notifier_call_chain kernel/notifier.c:394 [inline]\n\
  \ raw_notifier_call_chain+0x2e/0x40 kernel/notifier.c:401\n call_netdevice_notifiers_info+0x3f/0x90\
  \ net/core/dev.c:1739\n call_netdevice_notifiers_extack net/core/dev.c:1751 [inline]\n\
  \ call_netdevice_notifiers net/core/dev.c:1765 [inline]\n __dev_notify_flags+0x1e9/0x2c0\
  \ net/core/dev.c:7607\n dev_change_flags+0x10d/0x170 net/core/dev.c:7643\n dev_ifsioc+0x2b0/0x940\
  \ net/core/dev_ioctl.c:237\n dev_ioctl+0x1b8/0xc70 net/core/dev_ioctl.c:488\n sock_do_ioctl+0x1bd/0x300\
  \ net/socket.c:995\n sock_ioctl+0x32b/0x610 net/socket.c:1096\n vfs_ioctl fs/ioctl.c:46\
  \ [inline]\n file_ioctl fs/ioctl.c:509 [inline]\n do_vfs_ioctl+0xd6e/0x1390 fs/ioctl.c:696\n\
  \ ksys_ioctl+0xab/0xd0 fs/ioctl.c:713\n __do_sys_ioctl fs/ioctl.c:720 [inline]\n\
  \ __se_sys_ioctl fs/ioctl.c:718 [inline]\n __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718\n\
  \ do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  RIP: 0033:0x4467c9\nCode: e8 0c e8 ff ff 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48\
  \ 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d\
  \ 01 f0 ff ff 0f 83 5b 07 fc ff c3 66 2e 0f 1f 84 00 00 00 00\nRSP: 002b:00007fdbea222d98\
  \ EFLAGS: 00000246 ORIG_RAX: 0000000000000010\nRAX: ffffffffffffffda RBX: 00000000006dbc58\
  \ RCX: 00000000004467c9\nRDX: 0000000020000340 RSI: 0000000000008914 RDI: 0000000000000003\n\
  RBP: 00000000006dbc50 R08: 00007fdbea223700 R09: 0000000000000000\nR10: 00007fdbea223700\
  \ R11: 0000000000000246 R12: 00000000006dbc5c\nR13: 6000030030626669 R14: 0000000000000000\
  \ R15: 0000000030626669\n\nAllocated by task 7843:\n save_stack+0x45/0xd0 mm/kasan/common.c:73\n\
  \ set_track mm/kasan/common.c:85 [inline]\n __kasan_kmalloc mm/kasan/common.c:495\
  \ [inline]\n __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:468\n kasan_kmalloc+0x9/0x10\
  \ mm/kasan/common.c:509\n kmem_cache_alloc_trace+0x151/0x760 mm/slab.c:3615\n kmalloc\
  \ include/linux/slab.h:545 [inline]\n x25_link_device_up+0x46/0x3f0 net/x25/x25_link.c:249\n\
  \ x25_device_event+0x116/0x2b0 net/x25/af_x25.c:242\n notifier_call_chain+0xc7/0x240\
  \ kernel/notifier.c:93\n __raw_notifier_call_chain kernel/notifier.c:394 [inline]\n\
  \ raw_notifier_call_chain+0x2e/0x40 kernel/notifier.c:401\n call_netdevice_notifiers_info+0x3f/0x90\
  \ net/core/dev.c:1739\n call_netdevice_notifiers_extack net/core/dev.c:1751 [inline]\n\
  \ call_netdevice_notifiers net/core/dev.c:1765 [inline]\n __dev_notify_flags+0x121/0x2c0\
  \ net/core/dev.c:7605\n dev_change_flags+0x10d/0x170 net/core/dev.c:7643\n dev_ifsioc+0x2b0/0x940\
  \ net/core/dev_ioctl.c:237\n dev_ioctl+0x1b8/0xc70 net/core/dev_ioctl.c:488\n sock_do_ioctl+0x1bd/0x300\
  \ net/socket.c:995\n sock_ioctl+0x32b/0x610 net/socket.c:1096\n vfs_ioctl fs/ioctl.c:46\
  \ [inline]\n file_ioctl fs/ioctl.c:509 [inline]\n do_vfs_ioctl+0xd6e/0x1390 fs/ioctl.c:696\n\
  \ ksys_ioctl+0xab/0xd0 fs/ioctl.c:713\n __do_sys_ioctl fs/ioctl.c:720 [inline]\n\
  \ __se_sys_ioctl fs/ioctl.c:718 [inline]\n __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718\n\
  \ do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  \nFreed by task 7865:\n save_stack+0x45/0xd0 mm/kasan/common.c:73\n set_track mm/kasan/common.c:85\
  \ [inline]\n __kasan_slab_free+0x102/0x150 mm/kasan/common.c:457\n kasan_slab_free+0xe/0x10\
  \ mm/kasan/common.c:465\n __cache_free mm/slab.c:3494 [inline]\n kfree+0xcf/0x230\
  \ mm/slab.c:3811\n x25_neigh_put include/net/x25.h:253 [inline]\n x25_connect+0x8d8/0xde0\
  \ net/x25/af_x25.c:824\n __sys_connect+0x266/0x330 net/socket.c:1685\n __do_sys_connect\
  \ net/socket.c:1696 [inline]\n __se_sys_connect net/socket.c:1693 [inline]\n __x64_sys_connect+0x73/0xb0\
  \ net/socket.c:1693\n do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  \nThe buggy address belongs to the object at ffff8880a030edc0\n which belongs to\
  \ the cache kmalloc-256 of size 256\nThe buggy address is located 16 bytes inside\
  \ of\n 256-byte region [ffff8880a030edc0, ffff8880a030eec0)\nThe buggy address belongs\
  \ to the page:\npage:ffffea000280c380 count:1 mapcount:0 mapping:ffff88812c3f07c0\
  \ index:0x0\nflags: 0x1fffc0000000200(slab)\nraw: 01fffc0000000200 ffffea0002806788\
  \ ffffea00027f0188 ffff88812c3f07c0\nraw: 0000000000000000 ffff8880a030e000 000000010000000c\
  \ 0000000000000000\npage dumped because: kasan: bad access detected\n\nSigned-off-by:\
  \ Eric Dumazet <edumazet@google.com>\nReported-by: syzbot+04babcefcd396fabec37@syzkaller.appspotmail.com\n\
  Cc: andrew hendry <andrew.hendry@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>\n"
submodule:
- net/x25
hunk_count: 1
covered_count: 0
