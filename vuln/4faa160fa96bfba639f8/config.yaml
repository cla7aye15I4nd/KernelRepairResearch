id: 4faa160fa96bfba639f8
bug_link: https://syzkaller.appspot.com/bug?extid=4faa160fa96bfba639f8
title: kernel BUG at fs/ext4/inline.c:LINE!
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: d73eff68a8c0ea3fc626b08ea84e4cd327ccbe5f
fix_commit: 5c099c4fdc438014d5893629e70a8ba934433ee8
datetime: '2022-12-08T21:49:25-05:00'
fix_commit_message: "ext4: fix kernel BUG in 'ext4_write_inline_data_end()'\n\nSyzbot\
  \ report follow issue:\n------------[ cut here ]------------\nkernel BUG at fs/ext4/inline.c:227!\n\
  invalid opcode: 0000 [#1] PREEMPT SMP KASAN\nCPU: 1 PID: 3629 Comm: syz-executor212\
  \ Not tainted 6.1.0-rc5-syzkaller-00018-g59d0d52c30d4 #0\nHardware name: Google\
  \ Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022\nRIP: 0010:ext4_write_inline_data+0x344/0x3e0\
  \ fs/ext4/inline.c:227\nRSP: 0018:ffffc90003b3f368 EFLAGS: 00010293\nRAX: 0000000000000000\
  \ RBX: ffff8880704e16c0 RCX: 0000000000000000\nRDX: ffff888021763a80 RSI: ffffffff821e31a4\
  \ RDI: 0000000000000006\nRBP: 000000000006818e R08: 0000000000000006 R09: 0000000000068199\n\
  R10: 0000000000000079 R11: 0000000000000000 R12: 000000000000000b\nR13: 0000000000068199\
  \ R14: ffffc90003b3f408 R15: ffff8880704e1c82\nFS:  000055555723e3c0(0000) GS:ffff8880b9b00000(0000)\
  \ knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2:\
  \ 00007fffe8ac9080 CR3: 0000000079f81000 CR4: 0000000000350ee0\nCall Trace:\n <TASK>\n\
  \ ext4_write_inline_data_end+0x2a3/0x12f0 fs/ext4/inline.c:768\n ext4_write_end+0x242/0xdd0\
  \ fs/ext4/inode.c:1313\n ext4_da_write_end+0x3ed/0xa30 fs/ext4/inode.c:3063\n generic_perform_write+0x316/0x570\
  \ mm/filemap.c:3764\n ext4_buffered_write_iter+0x15b/0x460 fs/ext4/file.c:285\n\
  \ ext4_file_write_iter+0x8bc/0x16e0 fs/ext4/file.c:700\n call_write_iter include/linux/fs.h:2191\
  \ [inline]\n do_iter_readv_writev+0x20b/0x3b0 fs/read_write.c:735\n do_iter_write+0x182/0x700\
  \ fs/read_write.c:861\n vfs_iter_write+0x74/0xa0 fs/read_write.c:902\n iter_file_splice_write+0x745/0xc90\
  \ fs/splice.c:686\n do_splice_from fs/splice.c:764 [inline]\n direct_splice_actor+0x114/0x180\
  \ fs/splice.c:931\n splice_direct_to_actor+0x335/0x8a0 fs/splice.c:886\n do_splice_direct+0x1ab/0x280\
  \ fs/splice.c:974\n do_sendfile+0xb19/0x1270 fs/read_write.c:1255\n __do_sys_sendfile64\
  \ fs/read_write.c:1323 [inline]\n __se_sys_sendfile64 fs/read_write.c:1309 [inline]\n\
  \ __x64_sys_sendfile64+0x1d0/0x210 fs/read_write.c:1309\n do_syscall_x64 arch/x86/entry/common.c:50\
  \ [inline]\n do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\
  ---[ end trace 0000000000000000 ]---\n\nAbove issue may happens as follows:\next4_da_write_begin\n\
  \  ext4_da_write_inline_data_begin\n    ext4_da_convert_inline_data_to_extent\n\
  \      ext4_clear_inode_state(inode, EXT4_STATE_MAY_INLINE_DATA);\next4_da_write_end\n\
  \next4_run_li_request\n  ext4_mb_prefetch\n    ext4_read_block_bitmap_nowait\n \
  \     ext4_validate_block_bitmap\n        ext4_mark_group_bitmap_corrupted(sb, block_group,\
  \ EXT4_GROUP_INFO_BBITMAP_CORRUPT)\n\t percpu_counter_sub(&sbi->s_freeclusters_counter,grp->bb_free);\n\
  \t  -> sbi->s_freeclusters_counter become zero\next4_da_write_begin\n  if (ext4_nonda_switch(inode->i_sb))\
  \ -> As freeclusters_counter is zero will return true\n    *fsdata = (void *)FALL_BACK_TO_NONDELALLOC;\n\
  \    ext4_write_begin\next4_da_write_end\n  if (write_mode == FALL_BACK_TO_NONDELALLOC)\n\
  \    ext4_write_end\n      if (inline_data)\n        ext4_write_inline_data_end\n\
  \t  ext4_write_inline_data\n\t    BUG_ON(pos + len > EXT4_I(inode)->i_inline_size);\n\
  \           -> As inode is already convert to extent, so 'pos + len' > inline_size\n\
  \t   -> then trigger BUG.\n\nTo solve this issue, instead of checking ext4_has_inline_data()\
  \ which\nis only cleared after data has been written back, check the\nEXT4_STATE_MAY_INLINE_DATA\
  \ flag in ext4_write_end().\n\nFixes: f19d5870cbf7 (\"ext4: add normal write support\
  \ for inline data\")\nReported-by: syzbot+4faa160fa96bfba639f8@syzkaller.appspotmail.com\n\
  Reported-by: Jun Nie <jun.nie@linaro.org>\nSigned-off-by: Ye Bin <yebin10@huawei.com>\n\
  Link: https://lore.kernel.org/r/20221206144134.1919987-1-yebin@huaweicloud.com\n\
  Signed-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: stable@kernel.org\n"
submodule:
- fs/ext4
hunk_count: 1
covered_count: 0
