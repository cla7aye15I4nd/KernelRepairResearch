id: 2067e764dbcd10721e2e
bug_link: https://syzkaller.appspot.com/bug?extid=2067e764dbcd10721e2e
title: WARNING in ex_handler_fprestore
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 8d651ee9c71bb12fc0c8eb2786b66cbe5aa3e43b
fix_commit: 484cea4f362e1eeb5c869abbfb5f90eae6421b38
datetime: '2021-06-09T09:28:21+02:00'
fix_commit_message: 'x86/fpu: Prevent state corruption in __fpu__restore_sig()


  The non-compacted slowpath uses __copy_from_user() and copies the entire

  user buffer into the kernel buffer, verbatim.  This means that the kernel

  buffer may now contain entirely invalid state on which XRSTOR will #GP.

  validate_user_xstate_header() can detect some of that corruption, but that

  leaves the onus on callers to clear the buffer.


  Prior to XSAVES support, it was possible just to reinitialize the buffer,

  completely, but with supervisor states that is not longer possible as the

  buffer clearing code split got it backwards. Fixing that is possible but

  not corrupting the state in the first place is more robust.


  Avoid corruption of the kernel XSAVE buffer by using copy_user_to_xstate()

  which validates the XSAVE header contents before copying the actual states

  to the kernel. copy_user_to_xstate() was previously only called for

  compacted-format kernel buffers, but it works for both compacted and

  non-compacted forms.


  Using it for the non-compacted form is slower because of multiple

  __copy_from_user() operations, but that cost is less important than robust

  code in an already slow path.


  [ Changelog polished by Dave Hansen ]


  Fixes: b860eb8dce59 ("x86/fpu/xstate: Define new functions for clearing fpregs and
  xstates")

  Reported-by: syzbot+2067e764dbcd10721e2e@syzkaller.appspotmail.com

  Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

  Signed-off-by: Borislav Petkov <bp@suse.de>

  Reviewed-by: Borislav Petkov <bp@suse.de>

  Acked-by: Dave Hansen <dave.hansen@linux.intel.com>

  Acked-by: Rik van Riel <riel@surriel.com>

  Cc: stable@vger.kernel.org

  Link: https://lkml.kernel.org/r/20210608144345.611833074@linutronix.de

  '
submodule:
- arch/x86/kernel/fpu
hunk_count: 1
covered_count: 0
