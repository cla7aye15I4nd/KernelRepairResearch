id: d11f321e7f1923157eac80aa990b446596f46439
bug_link: https://syzkaller.appspot.com/bug?extid=d11f321e7f1923157eac80aa990b446596f46439
title: 'KASAN: use-after-free Read in shm_get_unmapped_area'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 453972283dcbf61fa33c8c0540d9b5e0caf9d570
fix_commit: 3f05317d9889ab75c7190dcd39491d2a97921984
datetime: '2018-04-13T17:10:27-07:00'
fix_commit_message: "ipc/shm: fix use-after-free of shm file via remap_file_pages()\n\
  \nsyzbot reported a use-after-free of shm_file_data(file)->file->f_op in\nshm_get_unmapped_area(),\
  \ called via sys_remap_file_pages().\n\nUnfortunately it couldn't generate a reproducer,\
  \ but I found a bug which\nI think caused it.  When remap_file_pages() is passed\
  \ a full System V\nshared memory segment, the memory is first unmapped, then a new\
  \ map is\ncreated using the ->vm_file.  Between these steps, the shm ID can be\n\
  removed and reused for a new shm segment.  But, shm_mmap() only checks\nwhether\
  \ the ID is currently valid before calling the underlying file's\n->mmap(); it doesn't\
  \ check whether it was reused.  Thus it can use the\nwrong underlying file, one\
  \ that was already freed.\n\nFix this by making the \"outer\" shm file (the one\
  \ that gets put in\n->vm_file) hold a reference to the real shm file, and by making\n\
  __shm_open() require that the file associated with the shm ID matches\nthe one associated\
  \ with the \"outer\" file.\n\nTaking the reference to the real shm file is needed\
  \ to fully solve the\nproblem, since otherwise sfd->file could point to a freed\
  \ file, which\nthen could be reallocated for the reused shm ID, causing the wrong\
  \ shm\nsegment to be mapped (and without the required permission checks).\n\nCommit\
  \ 1ac0b6dec656 (\"ipc/shm: handle removed segments gracefully in\nshm_mmap()\")\
  \ almost fixed this bug, but it didn't go far enough because\nit didn't consider\
  \ the case where the shm ID is reused.\n\nThe following program usually reproduces\
  \ this bug:\n\n\t#include <stdlib.h>\n\t#include <sys/shm.h>\n\t#include <sys/syscall.h>\n\
  \t#include <unistd.h>\n\n\tint main()\n\t{\n\t\tint is_parent = (fork() != 0);\n\
  \t\tsrand(getpid());\n\t\tfor (;;) {\n\t\t\tint id = shmget(0xF00F, 4096, IPC_CREAT|0700);\n\
  \t\t\tif (is_parent) {\n\t\t\t\tvoid *addr = shmat(id, NULL, 0);\n\t\t\t\tusleep(rand()\
  \ % 50);\n\t\t\t\twhile (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));\n\
  \t\t\t} else {\n\t\t\t\tusleep(rand() % 50);\n\t\t\t\tshmctl(id, IPC_RMID, NULL);\n\
  \t\t\t}\n\t\t}\n\t}\n\nIt causes the following NULL pointer dereference due to a\
  \ 'struct file'\nbeing used while it's being freed.  (I couldn't actually get a\
  \ KASAN\nuse-after-free splat like in the syzbot report.  But I think it's\npossible\
  \ with this bug; it would just take a more extraordinary race...)\n\n\tBUG: unable\
  \ to handle kernel NULL pointer dereference at 0000000000000058\n\tPGD 0 P4D 0\n\
  \tOops: 0000 [#1] SMP NOPTI\n\tCPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95\
  \ #189\n\tHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol\
  \ 04/01/2014\n\tRIP: 0010:d_inode include/linux/dcache.h:519 [inline]\n\tRIP: 0010:touch_atime+0x25/0xd0\
  \ fs/inode.c:1724\n\t[...]\n\tCall Trace:\n\t file_accessed include/linux/fs.h:2063\
  \ [inline]\n\t shmem_mmap+0x25/0x40 mm/shmem.c:2149\n\t call_mmap include/linux/fs.h:1789\
  \ [inline]\n\t shm_mmap+0x34/0x80 ipc/shm.c:465\n\t call_mmap include/linux/fs.h:1789\
  \ [inline]\n\t mmap_region+0x309/0x5b0 mm/mmap.c:1712\n\t do_mmap+0x294/0x4a0 mm/mmap.c:1483\n\
  \t do_mmap_pgoff include/linux/mm.h:2235 [inline]\n\t SYSC_remap_file_pages mm/mmap.c:2853\
  \ [inline]\n\t SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769\n\t do_syscall_64+0x64/0x1a0\
  \ arch/x86/entry/common.c:287\n\t entry_SYSCALL_64_after_hwframe+0x42/0xb7\n\n[ebiggers@google.com:\
  \ add comment]\n  Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com\n\
  Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com\nReported-by:\
  \ syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com\nFixes:\
  \ c8d78c1823f4 (\"mm: replace remap_file_pages() syscall with emulation\")\nSigned-off-by:\
  \ Eric Biggers <ebiggers@google.com>\nAcked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\n\
  Acked-by: Davidlohr Bueso <dbueso@suse.de>\nCc: Manfred Spraul <manfred@colorfullife.com>\n\
  Cc: \"Eric W . Biederman\" <ebiederm@xmission.com>\nCc: <stable@vger.kernel.org>\n\
  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds\
  \ <torvalds@linux-foundation.org>\n"
submodule:
- ipc
hunk_count: 4
covered_count: 2
