id: 34122898a11ab689518a
bug_link: https://syzkaller.appspot.com/bug?extid=34122898a11ab689518a
title: kernel BUG in write_all_supers
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: dc08c58696f8555e4a802f1f23c894a330d80ab7
fix_commit: 65f2a3b2323edde7c5de3a44e67fec00873b4217
datetime: '2025-04-01T01:02:42+02:00'
fix_commit_message: "btrfs: remove folio order ASSERT()s in super block writeback\
  \ path\n\n[BUG]\nThere is a syzbot report that the ASSERT() inside write_dev_supers()\
  \ got\ntriggered:\n\n  assertion failed: folio_order(folio) == 0, in fs/btrfs/disk-io.c:3858\n\
  \  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/disk-io.c:3858!\n\
  \  Oops: invalid opcode: 0000 [#1] SMP KASAN NOPTI\n  CPU: 0 UID: 0 PID: 6730 Comm:\
  \ syz-executor378 Not tainted 6.14.0-syzkaller-03565-gf6e0150b2003 #0 PREEMPT(full)\n\
  \  Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1\
  \ 04/01/2014\n  RIP: 0010:write_dev_supers fs/btrfs/disk-io.c:3858 [inline]\n  RIP:\
  \ 0010:write_all_supers+0x400f/0x4090 fs/btrfs/disk-io.c:4155\n  Call Trace:\n \
  \  <TASK>\n   btrfs_commit_transaction+0x1eda/0x3750 fs/btrfs/transaction.c:2528\n\
  \   btrfs_quota_enable+0xfcc/0x21a0 fs/btrfs/qgroup.c:1226\n   btrfs_ioctl_quota_ctl+0x144/0x1c0\
  \ fs/btrfs/ioctl.c:3677\n   vfs_ioctl fs/ioctl.c:51 [inline]\n   __do_sys_ioctl\
  \ fs/ioctl.c:906 [inline]\n   __se_sys_ioctl+0xf1/0x160 fs/ioctl.c:892\n   do_syscall_x64\
  \ arch/x86/entry/syscall_64.c:63 [inline]\n   do_syscall_64+0xf3/0x230 arch/x86/entry/syscall_64.c:94\n\
  \   entry_SYSCALL_64_after_hwframe+0x77/0x7f\n  RIP: 0033:0x7f5ad1f20289\n   </TASK>\n\
  \  ---[ end trace 0000000000000000 ]---\n\n[CAUSE]\nSince commit f93ee0df5139 (\"\
  btrfs: convert super block writes to folio\nin write_dev_supers()\") and commit\
  \ c94b7349b859 (\"btrfs: convert super\nblock writes to folio in wait_dev_supers()\"\
  ), the super block writeback\npath is converted to use folio.\n\nSince the original\
  \ code is using page based interfaces, we have an\n\"ASSERT(folio_order(folio) ==\
  \ 0);\" added to make sure everything is not\nchanged.\n\nBut the folio here is\
  \ not from any btrfs inode, but from the block\ndevice, and we have no control on\
  \ the folio order in bdev, the device\ncan choose whatever folio size they want/need.\n\
  \nE.g. the bdev may even have a block size of multiple pages.\n\nSo the ASSERT()\
  \ is triggered.\n\n[FIX]\nThe super block writeback path has taken larger folios\
  \ into\nconsideration, so there is no need for the ASSERT().\n\nAnd since commit\
  \ bc00965dbff7 (\"btrfs: count super block write errors in\ndevice instead of tracking\
  \ folio error state\"), the wait path no longer\nchecks the folio status but only\
  \ wait for the folio writeback to finish,\nthere is nothing requiring the ASSERT()\
  \ either.\n\nSo we can remove both ASSERT()s safely now.\n\nReported-by: syzbot+34122898a11ab689518a@syzkaller.appspotmail.com\n\
  Signed-off-by: Qu Wenruo <wqu@suse.com>\nReviewed-by: David Sterba <dsterba@suse.com>\n\
  Signed-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 2
covered_count: 1
