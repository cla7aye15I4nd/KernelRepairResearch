id: b437b5a429d680cf2217
bug_link: https://syzkaller.appspot.com/bug?extid=b437b5a429d680cf2217
title: 'KASAN: use-after-free Read in filemap_fault'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: a75d4c33377277b6034dd1e2663bce444f952c14
fix_commit: 6b4c9f4469819a0c1a38a0a4541337e0f9bf6c11
datetime: '2019-03-15T11:21:25-07:00'
fix_commit_message: "filemap: drop the mmap_sem for all blocking operations\n\nCurrently\
  \ we only drop the mmap_sem if there is contention on the page\nlock.  The idea\
  \ is that we issue readahead and then go to lock the page\nwhile it is under IO\
  \ and we want to not hold the mmap_sem during the IO.\n\nThe problem with this is\
  \ the assumption that the readahead does anything.\nIn the case that the box is\
  \ under extreme memory or IO pressure we may end\nup not reading anything at all\
  \ for readahead, which means we will end up\nreading in the page under the mmap_sem.\n\
  \nEven if the readahead does something, it could get throttled because of io\npressure\
  \ on the system and the process is in a lower priority cgroup.\n\nHolding the mmap_sem\
  \ while doing IO is problematic because it can cause\nsystem-wide priority inversions.\
  \  Consider some large company that does a\nlot of web traffic.  This large company\
  \ has load balancing logic in it's\ncore web server, cause some engineer thought\
  \ this was a brilliant plan.\nThis load balancing logic gets statistics from /proc\
  \ about the system,\nwhich trip over processes mmap_sem for various reasons.  Now\
  \ the web\nserver application is in a protected cgroup, but these other processes\
  \ may\nnot be, and if they are being throttled while their mmap_sem is held we'll\n\
  stall, and cause this nice death spiral.\n\nInstead rework filemap fault path to\
  \ drop the mmap sem at any point that\nwe may do IO or block for an extended period\
  \ of time.  This includes while\nissuing readahead, locking the page, or needing\
  \ to call ->readpage because\nreadahead did not occur.  Then once we have a fully\
  \ uptodate page we can\nreturn with VM_FAULT_RETRY and come back again to find our\
  \ nicely in-cache\npage that was gotten outside of the mmap_sem.\n\nThis patch also\
  \ adds a new helper for locking the page with the mmap_sem\ndropped.  This doesn't\
  \ make sense currently as generally speaking if the\npage is already locked it'll\
  \ have been read in (unless there was an error)\nbefore it was unlocked.  However\
  \ a forthcoming patchset will change this\nwith the ability to abort read-ahead\
  \ bio's if necessary, making it more\nlikely that we could contend for a page lock\
  \ and still have a not uptodate\npage.  This allows us to deal with this case by\
  \ grabbing the lock and\nissuing the IO without the mmap_sem held, and then returning\n\
  VM_FAULT_RETRY to come back around.\n\n[josef@toxicpanda.com: v6]\n  Link: http://lkml.kernel.org/r/20181212152757.10017-1-josef@toxicpanda.com\n\
  [kirill@shutemov.name: fix race in filemap_fault()]\n  Link: http://lkml.kernel.org/r/20181228235106.okk3oastsnpxusxs@kshutemo-mobl1\n\
  [akpm@linux-foundation.org: coding style fixes]\nLink: http://lkml.kernel.org/r/20181211173801.29535-4-josef@toxicpanda.com\n\
  Signed-off-by: Josef Bacik <josef@toxicpanda.com>\nAcked-by: Johannes Weiner <hannes@cmpxchg.org>\n\
  Reviewed-by: Andrew Morton <akpm@linux-foundation.org>\nReviewed-by: Jan Kara <jack@suse.cz>\n\
  Tested-by: syzbot+b437b5a429d680cf2217@syzkaller.appspotmail.com\nCc: Dave Chinner\
  \ <david@fromorbit.com>\nCc: Rik van Riel <riel@redhat.com>\nCc: Tejun Heo <tj@kernel.org>\n\
  Cc: \"Kirill A. Shutemov\" <kirill@shutemov.name>\nSigned-off-by: Andrew Morton\
  \ <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\n"
submodule:
- mm
hunk_count: 7
covered_count: 4
