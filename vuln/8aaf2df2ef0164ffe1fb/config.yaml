id: 8aaf2df2ef0164ffe1fb
bug_link: https://syzkaller.appspot.com/bug?extid=8aaf2df2ef0164ffe1fb
title: 'WARNING: locking bug in try_to_wake_up'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: c3b47f49e83197e8dffd023ec568403bcdbb774b
fix_commit: 41fd1e94066a815a7ab0a7025359e9b40e4b3576
datetime: '2024-10-01T19:29:33+02:00'
fix_commit_message: "btrfs: wait for fixup workers before stopping cleaner kthread\
  \ during umount\n\nDuring unmount, at close_ctree(), we have the following steps\
  \ in this order:\n\n1) Park the cleaner kthread - this doesn't destroy the kthread,\
  \ it basically\n   halts its execution (wake ups against it work but do nothing);\n\
  \n2) We stop the cleaner kthread - this results in freeing the respective\n   struct\
  \ task_struct;\n\n3) We call btrfs_stop_all_workers() which waits for any jobs running\
  \ in all\n   the work queues and then free the work queues.\n\nSyzbot reported a\
  \ case where a fixup worker resulted in a crash when doing\na delayed iput on its\
  \ inode while attempting to wake up the cleaner at\nbtrfs_add_delayed_iput(), because\
  \ the task_struct of the cleaner kthread\nwas already freed. This can happen during\
  \ unmount because we don't wait\nfor any fixup workers still running before we call\
  \ kthread_stop() against\nthe cleaner kthread, which stops and free all its resources.\n\
  \nFix this by waiting for any fixup workers at close_ctree() before we call\nkthread_stop()\
  \ against the cleaner and run pending delayed iputs.\n\nThe stack traces reported\
  \ by syzbot were the following:\n\n  BUG: KASAN: slab-use-after-free in __lock_acquire+0x77/0x2050\
  \ kernel/locking/lockdep.c:5065\n  Read of size 8 at addr ffff8880272a8a18 by task\
  \ kworker/u8:3/52\n\n  CPU: 1 UID: 0 PID: 52 Comm: kworker/u8:3 Not tainted 6.12.0-rc1-syzkaller\
  \ #0\n  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS\
  \ Google 09/13/2024\n  Workqueue: btrfs-fixup btrfs_work_helper\n  Call Trace:\n\
  \   <TASK>\n   __dump_stack lib/dump_stack.c:94 [inline]\n   dump_stack_lvl+0x241/0x360\
  \ lib/dump_stack.c:120\n   print_address_description mm/kasan/report.c:377 [inline]\n\
  \   print_report+0x169/0x550 mm/kasan/report.c:488\n   kasan_report+0x143/0x180\
  \ mm/kasan/report.c:601\n   __lock_acquire+0x77/0x2050 kernel/locking/lockdep.c:5065\n\
  \   lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5825\n   __raw_spin_lock_irqsave\
  \ include/linux/spinlock_api_smp.h:110 [inline]\n   _raw_spin_lock_irqsave+0xd5/0x120\
  \ kernel/locking/spinlock.c:162\n   class_raw_spinlock_irqsave_constructor include/linux/spinlock.h:551\
  \ [inline]\n   try_to_wake_up+0xb0/0x1480 kernel/sched/core.c:4154\n   btrfs_writepage_fixup_worker+0xc16/0xdf0\
  \ fs/btrfs/inode.c:2842\n   btrfs_work_helper+0x390/0xc50 fs/btrfs/async-thread.c:314\n\
  \   process_one_work kernel/workqueue.c:3229 [inline]\n   process_scheduled_works+0xa63/0x1850\
  \ kernel/workqueue.c:3310\n   worker_thread+0x870/0xd30 kernel/workqueue.c:3391\n\
  \   kthread+0x2f0/0x390 kernel/kthread.c:389\n   ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147\n\
  \   ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244\n   </TASK>\n\n  Allocated\
  \ by task 2:\n   kasan_save_stack mm/kasan/common.c:47 [inline]\n   kasan_save_track+0x3f/0x80\
  \ mm/kasan/common.c:68\n   unpoison_slab_object mm/kasan/common.c:319 [inline]\n\
  \   __kasan_slab_alloc+0x66/0x80 mm/kasan/common.c:345\n   kasan_slab_alloc include/linux/kasan.h:247\
  \ [inline]\n   slab_post_alloc_hook mm/slub.c:4086 [inline]\n   slab_alloc_node\
  \ mm/slub.c:4135 [inline]\n   kmem_cache_alloc_node_noprof+0x16b/0x320 mm/slub.c:4187\n\
  \   alloc_task_struct_node kernel/fork.c:180 [inline]\n   dup_task_struct+0x57/0x8c0\
  \ kernel/fork.c:1107\n   copy_process+0x5d1/0x3d50 kernel/fork.c:2206\n   kernel_clone+0x223/0x880\
  \ kernel/fork.c:2787\n   kernel_thread+0x1bc/0x240 kernel/fork.c:2849\n   create_kthread\
  \ kernel/kthread.c:412 [inline]\n   kthreadd+0x60d/0x810 kernel/kthread.c:765\n\
  \   ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147\n   ret_from_fork_asm+0x1a/0x30\
  \ arch/x86/entry/entry_64.S:244\n\n  Freed by task 61:\n   kasan_save_stack mm/kasan/common.c:47\
  \ [inline]\n   kasan_save_track+0x3f/0x80 mm/kasan/common.c:68\n   kasan_save_free_info+0x40/0x50\
  \ mm/kasan/generic.c:579\n   poison_slab_object mm/kasan/common.c:247 [inline]\n\
  \   __kasan_slab_free+0x59/0x70 mm/kasan/common.c:264\n   kasan_slab_free include/linux/kasan.h:230\
  \ [inline]\n   slab_free_hook mm/slub.c:2343 [inline]\n   slab_free mm/slub.c:4580\
  \ [inline]\n   kmem_cache_free+0x1a2/0x420 mm/slub.c:4682\n   put_task_struct include/linux/sched/task.h:144\
  \ [inline]\n   delayed_put_task_struct+0x125/0x300 kernel/exit.c:228\n   rcu_do_batch\
  \ kernel/rcu/tree.c:2567 [inline]\n   rcu_core+0xaaa/0x17a0 kernel/rcu/tree.c:2823\n\
  \   handle_softirqs+0x2c5/0x980 kernel/softirq.c:554\n   __do_softirq kernel/softirq.c:588\
  \ [inline]\n   invoke_softirq kernel/softirq.c:428 [inline]\n   __irq_exit_rcu+0xf4/0x1c0\
  \ kernel/softirq.c:637\n   irq_exit_rcu+0x9/0x30 kernel/softirq.c:649\n   instr_sysvec_apic_timer_interrupt\
  \ arch/x86/kernel/apic/apic.c:1037 [inline]\n   sysvec_apic_timer_interrupt+0xa6/0xc0\
  \ arch/x86/kernel/apic/apic.c:1037\n   asm_sysvec_apic_timer_interrupt+0x1a/0x20\
  \ arch/x86/include/asm/idtentry.h:702\n\n  Last potentially related work creation:\n\
  \   kasan_save_stack+0x3f/0x60 mm/kasan/common.c:47\n   __kasan_record_aux_stack+0xac/0xc0\
  \ mm/kasan/generic.c:541\n   __call_rcu_common kernel/rcu/tree.c:3086 [inline]\n\
  \   call_rcu+0x167/0xa70 kernel/rcu/tree.c:3190\n   context_switch kernel/sched/core.c:5318\
  \ [inline]\n   __schedule+0x184b/0x4ae0 kernel/sched/core.c:6675\n   schedule_idle+0x56/0x90\
  \ kernel/sched/core.c:6793\n   do_idle+0x56a/0x5d0 kernel/sched/idle.c:354\n   cpu_startup_entry+0x42/0x60\
  \ kernel/sched/idle.c:424\n   start_secondary+0x102/0x110 arch/x86/kernel/smpboot.c:314\n\
  \   common_startup_64+0x13e/0x147\n\n  The buggy address belongs to the object at\
  \ ffff8880272a8000\n   which belongs to the cache task_struct of size 7424\n  The\
  \ buggy address is located 2584 bytes inside of\n   freed 7424-byte region [ffff8880272a8000,\
  \ ffff8880272a9d00)\n\n  The buggy address belongs to the physical page:\n  page:\
  \ refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x272a8\n  head:\
  \ order:3 mapcount:0 entire_mapcount:0 nr_pages_mapped:0 pincount:0\n  flags: 0xfff00000000040(head|node=0|zone=1|lastcpupid=0x7ff)\n\
  \  page_type: f5(slab)\n  raw: 00fff00000000040 ffff88801bafa500 dead000000000122\
  \ 0000000000000000\n  raw: 0000000000000000 0000000080040004 00000001f5000000 0000000000000000\n\
  \  head: 00fff00000000040 ffff88801bafa500 dead000000000122 0000000000000000\n \
  \ head: 0000000000000000 0000000080040004 00000001f5000000 0000000000000000\n  head:\
  \ 00fff00000000003 ffffea00009caa01 ffffffffffffffff 0000000000000000\n  head: 0000000000000008\
  \ 0000000000000000 00000000ffffffff 0000000000000000\n  page dumped because: kasan:\
  \ bad access detected\n  page_owner tracks the page as allocated\n  page last allocated\
  \ via order 3, migratetype Unmovable, gfp_mask 0xd20c0(__GFP_IO|__GFP_FS|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC),\
  \ pid 2, tgid 2 (kthreadd), ts 71247381401, free_ts 71214998153\n   set_page_owner\
  \ include/linux/page_owner.h:32 [inline]\n   post_alloc_hook+0x1f3/0x230 mm/page_alloc.c:1537\n\
  \   prep_new_page mm/page_alloc.c:1545 [inline]\n   get_page_from_freelist+0x3039/0x3180\
  \ mm/page_alloc.c:3457\n   __alloc_pages_noprof+0x256/0x6c0 mm/page_alloc.c:4733\n\
  \   alloc_pages_mpol_noprof+0x3e8/0x680 mm/mempolicy.c:2265\n   alloc_slab_page+0x6a/0x120\
  \ mm/slub.c:2413\n   allocate_slab+0x5a/0x2f0 mm/slub.c:2579\n   new_slab mm/slub.c:2632\
  \ [inline]\n   ___slab_alloc+0xcd1/0x14b0 mm/slub.c:3819\n   __slab_alloc+0x58/0xa0\
  \ mm/slub.c:3909\n   __slab_alloc_node mm/slub.c:3962 [inline]\n   slab_alloc_node\
  \ mm/slub.c:4123 [inline]\n   kmem_cache_alloc_node_noprof+0x1fe/0x320 mm/slub.c:4187\n\
  \   alloc_task_struct_node kernel/fork.c:180 [inline]\n   dup_task_struct+0x57/0x8c0\
  \ kernel/fork.c:1107\n   copy_process+0x5d1/0x3d50 kernel/fork.c:2206\n   kernel_clone+0x223/0x880\
  \ kernel/fork.c:2787\n   kernel_thread+0x1bc/0x240 kernel/fork.c:2849\n   create_kthread\
  \ kernel/kthread.c:412 [inline]\n   kthreadd+0x60d/0x810 kernel/kthread.c:765\n\
  \   ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147\n   ret_from_fork_asm+0x1a/0x30\
  \ arch/x86/entry/entry_64.S:244\n  page last free pid 5230 tgid 5230 stack trace:\n\
  \   reset_page_owner include/linux/page_owner.h:25 [inline]\n   free_pages_prepare\
  \ mm/page_alloc.c:1108 [inline]\n   free_unref_page+0xcd0/0xf00 mm/page_alloc.c:2638\n\
  \   discard_slab mm/slub.c:2678 [inline]\n   __put_partials+0xeb/0x130 mm/slub.c:3146\n\
  \   put_cpu_partial+0x17c/0x250 mm/slub.c:3221\n   __slab_free+0x2ea/0x3d0 mm/slub.c:4450\n\
  \   qlink_free mm/kasan/quarantine.c:163 [inline]\n   qlist_free_all+0x9a/0x140\
  \ mm/kasan/quarantine.c:179\n   kasan_quarantine_reduce+0x14f/0x170 mm/kasan/quarantine.c:286\n\
  \   __kasan_slab_alloc+0x23/0x80 mm/kasan/common.c:329\n   kasan_slab_alloc include/linux/kasan.h:247\
  \ [inline]\n   slab_post_alloc_hook mm/slub.c:4086 [inline]\n   slab_alloc_node\
  \ mm/slub.c:4135 [inline]\n   kmem_cache_alloc_noprof+0x135/0x2a0 mm/slub.c:4142\n\
  \   getname_flags+0xb7/0x540 fs/namei.c:139\n   do_sys_openat2+0xd2/0x1d0 fs/open.c:1409\n\
  \   do_sys_open fs/open.c:1430 [inline]\n   __do_sys_openat fs/open.c:1446 [inline]\n\
  \   __se_sys_openat fs/open.c:1441 [inline]\n   __x64_sys_openat+0x247/0x2a0 fs/open.c:1441\n\
  \   do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n   do_syscall_64+0xf3/0x230\
  \ arch/x86/entry/common.c:83\n   entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\n  Memory\
  \ state around the buggy address:\n   ffff8880272a8900: fb fb fb fb fb fb fb fb\
  \ fb fb fb fb fb fb fb fb\n   ffff8880272a8980: fb fb fb fb fb fb fb fb fb fb fb\
  \ fb fb fb fb fb\n  >ffff8880272a8a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb\
  \ fb fb\n                              ^\n   ffff8880272a8a80: fb fb fb fb fb fb\
  \ fb fb fb fb fb fb fb fb fb fb\n   ffff8880272a8b00: fb fb fb fb fb fb fb fb fb\
  \ fb fb fb fb fb fb fb\n  ==================================================================\n\
  \nReported-by: syzbot+8aaf2df2ef0164ffe1fb@syzkaller.appspotmail.com\nLink: https://lore.kernel.org/linux-btrfs/66fb36b1.050a0220.aab67.003b.GAE@google.com/\n\
  CC: stable@vger.kernel.org # 4.19+\nReviewed-by: Qu Wenruo <wqu@suse.com>\nReviewed-by:\
  \ Johannes Thumshirn <johannes.thumshirn@wdc.com>\nReviewed-by: David Sterba <dsterba@suse.com>\n\
  Signed-off-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by: David Sterba <dsterba@suse.com>\n\
  Signed-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 1
covered_count: 0
