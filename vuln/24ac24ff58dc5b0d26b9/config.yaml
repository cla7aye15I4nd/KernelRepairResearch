id: 24ac24ff58dc5b0d26b9
bug_link: https://syzkaller.appspot.com/bug?extid=24ac24ff58dc5b0d26b9
title: 'KMSAN: uninit-value in pick_link'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: e3786b29c54cdae3490b07180a54e2461f42144c
fix_commit: 810ee43d9cd245d138a2733d87a24858a23f577d
datetime: '2024-08-13T13:56:46+02:00'
fix_commit_message: "Squashfs: sanity check symbolic link size\n\nSyzkiller reports\
  \ a \"KMSAN: uninit-value in pick_link\" bug.\n\nThis is caused by an uninitialised\
  \ page, which is ultimately caused\nby a corrupted symbolic link size read from\
  \ disk.\n\nThe reason why the corrupted symlink size causes an uninitialised\npage\
  \ is due to the following sequence of events:\n\n1. squashfs_read_inode() is called\
  \ to read the symbolic\n   link from disk.  This assigns the corrupted value\n \
  \  3875536935 to inode->i_size.\n\n2. Later squashfs_symlink_read_folio() is called,\
  \ which assigns\n   this corrupted value to the length variable, which being a\n\
  \   signed int, overflows producing a negative number.\n\n3. The following loop\
  \ that fills in the page contents checks that\n   the copied bytes is less than\
  \ length, which being negative means\n   the loop is skipped, producing an uninitialised\
  \ page.\n\nThis patch adds a sanity check which checks that the symbolic\nlink size\
  \ is not larger than expected.\n\n--\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>\n\
  Link: https://lore.kernel.org/r/20240811232821.13903-1-phillip@squashfs.org.uk\n\
  Reported-by: Lizhi Xu <lizhi.xu@windriver.com>\nReported-by: syzbot+24ac24ff58dc5b0d26b9@syzkaller.appspotmail.com\n\
  Closes: https://lore.kernel.org/all/000000000000a90e8c061e86a76b@google.com/\nV2:\
  \ fix spelling mistake.\nSigned-off-by: Christian Brauner <brauner@kernel.org>\n"
submodule:
- fs/squashfs
hunk_count: 1
covered_count: 0
