id: d0014fb0fc39c5487ae5
bug_link: https://syzkaller.appspot.com/bug?extid=d0014fb0fc39c5487ae5
title: WARNING in btrfs_rebuild_free_space_tree
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: c0d90a79e8e65b89037508276b2b31f41a1b3783
fix_commit: 1e6ed33cabba8f06f532f2e5851a102602823734
datetime: '2025-06-27T19:56:15+02:00'
fix_commit_message: "btrfs: fix failure to rebuild free space tree using multiple\
  \ transactions\n\nIf we are rebuilding a free space tree, while modifying the free\
  \ space\ntree we may need to allocate a new metadata block group.\nIf we end up\
  \ using multiple transactions for the rebuild, when we call\nbtrfs_end_transaction()\
  \ we enter btrfs_create_pending_block_groups()\nwhich calls add_block_group_free_space()\
  \ to add items to the free space\ntree for the block group.\n\nThen later during\
  \ the free space tree rebuild, at\nbtrfs_rebuild_free_space_tree(), we may find\
  \ such new block groups\nand call populate_free_space_tree() for them, which fails\
  \ with -EEXIST\nbecause there are already items in the free space tree. Then we\
  \ abort the\ntransaction with -EEXIST at btrfs_rebuild_free_space_tree().\nNotice\
  \ that we say \"may find\" the new block groups because a new block\ngroup may be\
  \ inserted in the block groups rbtree, which is being iterated\nby the rebuild process,\
  \ before or after the current node where the rebuild\nprocess is currently at.\n\
  \nSyzbot recently reported such case which produces a trace like the\nfollowing:\n\
  \n  ------------[ cut here ]------------\n  BTRFS: Transaction aborted (error -17)\n\
  \  WARNING: CPU: 1 PID: 7626 at fs/btrfs/free-space-tree.c:1341 btrfs_rebuild_free_space_tree+0x470/0x54c\
  \ fs/btrfs/free-space-tree.c:1341\n  Modules linked in:\n  CPU: 1 UID: 0 PID: 7626\
  \ Comm: syz.2.25 Not tainted 6.15.0-rc7-syzkaller-00085-gd7fa1af5b33e-dirty #0 PREEMPT\n\
  \  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\
  \ 05/07/2025\n  pstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)\n\
  \  pc : btrfs_rebuild_free_space_tree+0x470/0x54c fs/btrfs/free-space-tree.c:1341\n\
  \  lr : btrfs_rebuild_free_space_tree+0x470/0x54c fs/btrfs/free-space-tree.c:1341\n\
  \  sp : ffff80009c4f7740\n  x29: ffff80009c4f77b0 x28: ffff0000d4c3f400 x27: 0000000000000000\n\
  \  x26: dfff800000000000 x25: ffff70001389eee8 x24: 0000000000000003\n  x23: 1fffe000182b6e7b\
  \ x22: 0000000000000000 x21: ffff0000c15b73d8\n  x20: 00000000ffffffef x19: ffff0000c15b7378\
  \ x18: 1fffe0003386f276\n  x17: ffff80008f31e000 x16: ffff80008adbe98c x15: 0000000000000001\n\
  \  x14: 1fffe0001b281550 x13: 0000000000000000 x12: 0000000000000000\n  x11: ffff60001b281551\
  \ x10: 0000000000000003 x9 : 1c8922000a902c00\n  x8 : 1c8922000a902c00 x7 : ffff800080485878\
  \ x6 : 0000000000000000\n  x5 : 0000000000000001 x4 : 0000000000000001 x3 : ffff80008047843c\n\
  \  x2 : 0000000000000001 x1 : ffff80008b3ebc40 x0 : 0000000000000001\n  Call trace:\n\
  \   btrfs_rebuild_free_space_tree+0x470/0x54c fs/btrfs/free-space-tree.c:1341 (P)\n\
  \   btrfs_start_pre_rw_mount+0xa78/0xe10 fs/btrfs/disk-io.c:3074\n   btrfs_remount_rw\
  \ fs/btrfs/super.c:1319 [inline]\n   btrfs_reconfigure+0x828/0x2418 fs/btrfs/super.c:1543\n\
  \   reconfigure_super+0x1d4/0x6f0 fs/super.c:1083\n   do_remount fs/namespace.c:3365\
  \ [inline]\n   path_mount+0xb34/0xde0 fs/namespace.c:4200\n   do_mount fs/namespace.c:4221\
  \ [inline]\n   __do_sys_mount fs/namespace.c:4432 [inline]\n   __se_sys_mount fs/namespace.c:4409\
  \ [inline]\n   __arm64_sys_mount+0x3e8/0x468 fs/namespace.c:4409\n   __invoke_syscall\
  \ arch/arm64/kernel/syscall.c:35 [inline]\n   invoke_syscall+0x98/0x2b8 arch/arm64/kernel/syscall.c:49\n\
  \   el0_svc_common+0x130/0x23c arch/arm64/kernel/syscall.c:132\n   do_el0_svc+0x48/0x58\
  \ arch/arm64/kernel/syscall.c:151\n   el0_svc+0x58/0x17c arch/arm64/kernel/entry-common.c:767\n\
  \   el0t_64_sync_handler+0x78/0x108 arch/arm64/kernel/entry-common.c:786\n   el0t_64_sync+0x198/0x19c\
  \ arch/arm64/kernel/entry.S:600\n  irq event stamp: 330\n  hardirqs last  enabled\
  \ at (329): [<ffff80008048590c>] raw_spin_rq_unlock_irq kernel/sched/sched.h:1525\
  \ [inline]\n  hardirqs last  enabled at (329): [<ffff80008048590c>] finish_lock_switch+0xb0/0x1c0\
  \ kernel/sched/core.c:5130\n  hardirqs last disabled at (330): [<ffff80008adb9e60>]\
  \ el1_dbg+0x24/0x80 arch/arm64/kernel/entry-common.c:511\n  softirqs last  enabled\
  \ at (10): [<ffff8000801fbf10>] local_bh_enable+0x10/0x34 include/linux/bottom_half.h:32\n\
  \  softirqs last disabled at (8): [<ffff8000801fbedc>] local_bh_disable+0x10/0x34\
  \ include/linux/bottom_half.h:19\n  ---[ end trace 0000000000000000 ]---\n\nFix\
  \ this by flagging new block groups which had their free space tree\nentries already\
  \ added and then skip them in the rebuild process. Also,\nsince the rebuild may\
  \ be triggered when doing a remount, make sure that\nwhen we clear an existing free\
  \ space tree that we clear such flag from\nevery existing block group, otherwise\
  \ we would skip those block groups\nduring the rebuild.\n\nReported-by: syzbot+d0014fb0fc39c5487ae5@syzkaller.appspotmail.com\n\
  Link: https://lore.kernel.org/linux-btrfs/68460a54.050a0220.daf97.0af5.GAE@google.com/\n\
  Fixes: 882af9f13e83 (\"btrfs: handle free space tree rebuild in multiple transactions\"\
  )\nReviewed-by: Boris Burkov <boris@bur.io>\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\n\
  Signed-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 5
covered_count: 1
