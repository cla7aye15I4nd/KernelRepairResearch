id: 44c32606d8669fb0d45c
bug_link: https://syzkaller.appspot.com/bug?extid=44c32606d8669fb0d45c
title: 'INFO: task hung in __generic_file_fsync (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: b2c0fcd28772f99236d261509bcd242135677965
fix_commit: 85a8ce62c2eabe28b9d76ca4eecf37922402df93
datetime: '2019-12-28T09:44:56-07:00'
fix_commit_message: 'block: add bio_truncate to fix guard_bio_eod


  Some filesystem, such as vfat, may send bio which crosses device boundary,

  and the worse thing is that the IO request starting within device boundaries

  can contain more than one segment past EOD.


  Commit dce30ca9e3b6 ("fs: fix guard_bio_eod to check for real EOD errors")

  tries to fix this issue by returning -EIO for this situation. However,

  this way lets fs user code lose chance to handle -EIO, then sync_inodes_sb()

  may hang for ever.


  Also the current truncating on last segment is dangerous by updating the

  last bvec, given bvec table becomes not immutable any more, and fs bio

  users may not retrieve the truncated pages via bio_for_each_segment_all() in

  its .end_io callback.


  Fixes this issue by supporting multi-segment truncating. And the

  approach is simpler:


  - just update bio size since block layer can make correct bvec with

  the updated bio size. Then bvec table becomes really immutable.


  - zero all truncated segments for read bio


  Cc: Carlos Maiolino <cmaiolino@redhat.com>

  Cc: linux-fsdevel@vger.kernel.org

  Fixed-by: dce30ca9e3b6 ("fs: fix guard_bio_eod to check for real EOD errors")

  Reported-by: syzbot+2b9e54155c8c25d8d165@syzkaller.appspotmail.com

  Signed-off-by: Ming Lei <ming.lei@redhat.com>

  Signed-off-by: Jens Axboe <axboe@kernel.dk>

  '
submodule:
- block
- fs
- include/linux
hunk_count: 4
covered_count: 0
