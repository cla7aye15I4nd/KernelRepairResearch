id: 45212e9d87a98c3f5b42
bug_link: https://syzkaller.appspot.com/bug?extid=45212e9d87a98c3f5b42
title: 'KASAN: slab-use-after-free Read in join_transaction'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: c9c863793395cf0a66c2778a29d72c48c02fbb66
fix_commit: e2f0943cf37305dbdeaf9846e3c941451bcdef63
datetime: '2025-01-23T22:34:14+01:00'
fix_commit_message: "btrfs: fix use-after-free when attempting to join an aborted\
  \ transaction\n\nWhen we are trying to join the current transaction and if it's\
  \ aborted,\nwe read its 'aborted' field after unlocking fs_info->trans_lock and\n\
  without holding any extra reference count on it. This means that a\nconcurrent task\
  \ that is aborting the transaction may free the transaction\nbefore we read its\
  \ 'aborted' field, leading to a use-after-free.\n\nFix this by reading the 'aborted'\
  \ field while holding fs_info->trans_lock\nsince any freeing task must first acquire\
  \ that lock and set\nfs_info->running_transaction to NULL before freeing the transaction.\n\
  \nThis was reported by syzbot and Dmitry with the following stack traces\nfrom KASAN:\n\
  \n   ==================================================================\n   BUG:\
  \ KASAN: slab-use-after-free in join_transaction+0xd9b/0xda0 fs/btrfs/transaction.c:278\n\
  \   Read of size 4 at addr ffff888011839024 by task kworker/u4:9/1128\n\n   CPU:\
  \ 0 UID: 0 PID: 1128 Comm: kworker/u4:9 Not tainted 6.13.0-rc7-syzkaller-00019-gc45323b7560e\
  \ #0\n   Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1\
  \ 04/01/2014\n   Workqueue: events_unbound btrfs_async_reclaim_data_space\n   Call\
  \ Trace:\n    <TASK>\n    __dump_stack lib/dump_stack.c:94 [inline]\n    dump_stack_lvl+0x241/0x360\
  \ lib/dump_stack.c:120\n    print_address_description mm/kasan/report.c:378 [inline]\n\
  \    print_report+0x169/0x550 mm/kasan/report.c:489\n    kasan_report+0x143/0x180\
  \ mm/kasan/report.c:602\n    join_transaction+0xd9b/0xda0 fs/btrfs/transaction.c:278\n\
  \    start_transaction+0xaf8/0x1670 fs/btrfs/transaction.c:697\n    flush_space+0x448/0xcf0\
  \ fs/btrfs/space-info.c:803\n    btrfs_async_reclaim_data_space+0x159/0x510 fs/btrfs/space-info.c:1321\n\
  \    process_one_work kernel/workqueue.c:3236 [inline]\n    process_scheduled_works+0xa66/0x1840\
  \ kernel/workqueue.c:3317\n    worker_thread+0x870/0xd30 kernel/workqueue.c:3398\n\
  \    kthread+0x2f0/0x390 kernel/kthread.c:389\n    ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:147\n\
  \    ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244\n    </TASK>\n\n\
  \   Allocated by task 5315:\n    kasan_save_stack mm/kasan/common.c:47 [inline]\n\
  \    kasan_save_track+0x3f/0x80 mm/kasan/common.c:68\n    poison_kmalloc_redzone\
  \ mm/kasan/common.c:377 [inline]\n    __kasan_kmalloc+0x98/0xb0 mm/kasan/common.c:394\n\
  \    kasan_kmalloc include/linux/kasan.h:260 [inline]\n    __kmalloc_cache_noprof+0x243/0x390\
  \ mm/slub.c:4329\n    kmalloc_noprof include/linux/slab.h:901 [inline]\n    join_transaction+0x144/0xda0\
  \ fs/btrfs/transaction.c:308\n    start_transaction+0xaf8/0x1670 fs/btrfs/transaction.c:697\n\
  \    btrfs_create_common+0x1b2/0x2e0 fs/btrfs/inode.c:6572\n    lookup_open fs/namei.c:3649\
  \ [inline]\n    open_last_lookups fs/namei.c:3748 [inline]\n    path_openat+0x1c03/0x3590\
  \ fs/namei.c:3984\n    do_filp_open+0x27f/0x4e0 fs/namei.c:4014\n    do_sys_openat2+0x13e/0x1d0\
  \ fs/open.c:1402\n    do_sys_open fs/open.c:1417 [inline]\n    __do_sys_creat fs/open.c:1495\
  \ [inline]\n    __se_sys_creat fs/open.c:1489 [inline]\n    __x64_sys_creat+0x123/0x170\
  \ fs/open.c:1489\n    do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n    do_syscall_64+0xf3/0x230\
  \ arch/x86/entry/common.c:83\n    entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\n \
  \  Freed by task 5336:\n    kasan_save_stack mm/kasan/common.c:47 [inline]\n   \
  \ kasan_save_track+0x3f/0x80 mm/kasan/common.c:68\n    kasan_save_free_info+0x40/0x50\
  \ mm/kasan/generic.c:582\n    poison_slab_object mm/kasan/common.c:247 [inline]\n\
  \    __kasan_slab_free+0x59/0x70 mm/kasan/common.c:264\n    kasan_slab_free include/linux/kasan.h:233\
  \ [inline]\n    slab_free_hook mm/slub.c:2353 [inline]\n    slab_free mm/slub.c:4613\
  \ [inline]\n    kfree+0x196/0x430 mm/slub.c:4761\n    cleanup_transaction fs/btrfs/transaction.c:2063\
  \ [inline]\n    btrfs_commit_transaction+0x2c97/0x3720 fs/btrfs/transaction.c:2598\n\
  \    insert_balance_item+0x1284/0x20b0 fs/btrfs/volumes.c:3757\n    btrfs_balance+0x992/0x10c0\
  \ fs/btrfs/volumes.c:4633\n    btrfs_ioctl_balance+0x493/0x7c0 fs/btrfs/ioctl.c:3670\n\
  \    vfs_ioctl fs/ioctl.c:51 [inline]\n    __do_sys_ioctl fs/ioctl.c:906 [inline]\n\
  \    __se_sys_ioctl+0xf5/0x170 fs/ioctl.c:892\n    do_syscall_x64 arch/x86/entry/common.c:52\
  \ [inline]\n    do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n    entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\
  \n   The buggy address belongs to the object at ffff888011839000\n    which belongs\
  \ to the cache kmalloc-2k of size 2048\n   The buggy address is located 36 bytes\
  \ inside of\n    freed 2048-byte region [ffff888011839000, ffff888011839800)\n\n\
  \   The buggy address belongs to the physical page:\n   page: refcount:1 mapcount:0\
  \ mapping:0000000000000000 index:0x0 pfn:0x11838\n   head: order:3 mapcount:0 entire_mapcount:0\
  \ nr_pages_mapped:0 pincount:0\n   flags: 0xfff00000000040(head|node=0|zone=1|lastcpupid=0x7ff)\n\
  \   page_type: f5(slab)\n   raw: 00fff00000000040 ffff88801ac42000 ffffea0000493400\
  \ dead000000000002\n   raw: 0000000000000000 0000000000080008 00000001f5000000 0000000000000000\n\
  \   head: 00fff00000000040 ffff88801ac42000 ffffea0000493400 dead000000000002\n\
  \   head: 0000000000000000 0000000000080008 00000001f5000000 0000000000000000\n\
  \   head: 00fff00000000003 ffffea0000460e01 ffffffffffffffff 0000000000000000\n\
  \   head: 0000000000000008 0000000000000000 00000000ffffffff 0000000000000000\n\
  \   page dumped because: kasan: bad access detected\n   page_owner tracks the page\
  \ as allocated\n   page last allocated via order 3, migratetype Unmovable, gfp_mask\
  \ 0xd20c0(__GFP_IO|__GFP_FS|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC),\
  \ pid 57, tgid 57 (kworker/0:2), ts 67248182943, free_ts 67229742023\n    set_page_owner\
  \ include/linux/page_owner.h:32 [inline]\n    post_alloc_hook+0x1f3/0x230 mm/page_alloc.c:1558\n\
  \    prep_new_page mm/page_alloc.c:1566 [inline]\n    get_page_from_freelist+0x365c/0x37a0\
  \ mm/page_alloc.c:3476\n    __alloc_pages_noprof+0x292/0x710 mm/page_alloc.c:4753\n\
  \    alloc_pages_mpol_noprof+0x3e1/0x780 mm/mempolicy.c:2269\n    alloc_slab_page+0x6a/0x110\
  \ mm/slub.c:2423\n    allocate_slab+0x5a/0x2b0 mm/slub.c:2589\n    new_slab mm/slub.c:2642\
  \ [inline]\n    ___slab_alloc+0xc27/0x14a0 mm/slub.c:3830\n    __slab_alloc+0x58/0xa0\
  \ mm/slub.c:3920\n    __slab_alloc_node mm/slub.c:3995 [inline]\n    slab_alloc_node\
  \ mm/slub.c:4156 [inline]\n    __do_kmalloc_node mm/slub.c:4297 [inline]\n    __kmalloc_node_track_caller_noprof+0x2e9/0x4c0\
  \ mm/slub.c:4317\n    kmalloc_reserve+0x111/0x2a0 net/core/skbuff.c:609\n    __alloc_skb+0x1f3/0x440\
  \ net/core/skbuff.c:678\n    alloc_skb include/linux/skbuff.h:1323 [inline]\n  \
  \  alloc_skb_with_frags+0xc3/0x820 net/core/skbuff.c:6612\n    sock_alloc_send_pskb+0x91a/0xa60\
  \ net/core/sock.c:2884\n    sock_alloc_send_skb include/net/sock.h:1803 [inline]\n\
  \    mld_newpack+0x1c3/0xaf0 net/ipv6/mcast.c:1747\n    add_grhead net/ipv6/mcast.c:1850\
  \ [inline]\n    add_grec+0x1492/0x19a0 net/ipv6/mcast.c:1988\n    mld_send_cr net/ipv6/mcast.c:2114\
  \ [inline]\n    mld_ifc_work+0x691/0xd90 net/ipv6/mcast.c:2651\n   page last free\
  \ pid 5300 tgid 5300 stack trace:\n    reset_page_owner include/linux/page_owner.h:25\
  \ [inline]\n    free_pages_prepare mm/page_alloc.c:1127 [inline]\n    free_unref_page+0xd3f/0x1010\
  \ mm/page_alloc.c:2659\n    __slab_free+0x2c2/0x380 mm/slub.c:4524\n    qlink_free\
  \ mm/kasan/quarantine.c:163 [inline]\n    qlist_free_all+0x9a/0x140 mm/kasan/quarantine.c:179\n\
  \    kasan_quarantine_reduce+0x14f/0x170 mm/kasan/quarantine.c:286\n    __kasan_slab_alloc+0x23/0x80\
  \ mm/kasan/common.c:329\n    kasan_slab_alloc include/linux/kasan.h:250 [inline]\n\
  \    slab_post_alloc_hook mm/slub.c:4119 [inline]\n    slab_alloc_node mm/slub.c:4168\
  \ [inline]\n    __do_kmalloc_node mm/slub.c:4297 [inline]\n    __kmalloc_noprof+0x236/0x4c0\
  \ mm/slub.c:4310\n    kmalloc_noprof include/linux/slab.h:905 [inline]\n    kzalloc_noprof\
  \ include/linux/slab.h:1037 [inline]\n    fib_create_info+0xc14/0x25b0 net/ipv4/fib_semantics.c:1435\n\
  \    fib_table_insert+0x1f6/0x1f20 net/ipv4/fib_trie.c:1231\n    fib_magic+0x3d8/0x620\
  \ net/ipv4/fib_frontend.c:1112\n    fib_add_ifaddr+0x40c/0x5e0 net/ipv4/fib_frontend.c:1156\n\
  \    fib_netdev_event+0x375/0x490 net/ipv4/fib_frontend.c:1494\n    notifier_call_chain+0x1a5/0x3f0\
  \ kernel/notifier.c:85\n    __dev_notify_flags+0x207/0x400\n    dev_change_flags+0xf0/0x1a0\
  \ net/core/dev.c:9045\n    do_setlink+0xc90/0x4210 net/core/rtnetlink.c:3109\n \
  \   rtnl_changelink net/core/rtnetlink.c:3723 [inline]\n    __rtnl_newlink net/core/rtnetlink.c:3875\
  \ [inline]\n    rtnl_newlink+0x1bb6/0x2210 net/core/rtnetlink.c:4012\n\n   Memory\
  \ state around the buggy address:\n    ffff888011838f00: fc fc fc fc fc fc fc fc\
  \ fc fc fc fc fc fc fc fc\n    ffff888011838f80: fc fc fc fc fc fc fc fc fc fc fc\
  \ fc fc fc fc fc\n   >ffff888011839000: fa fb fb fb fb fb fb fb fb fb fb fb fb fb\
  \ fb fb\n                                  ^\n    ffff888011839080: fb fb fb fb\
  \ fb fb fb fb fb fb fb fb fb fb fb fb\n    ffff888011839100: fb fb fb fb fb fb fb\
  \ fb fb fb fb fb fb fb fb fb\n   ==================================================================\n\
  \nReported-by: syzbot+45212e9d87a98c3f5b42@syzkaller.appspotmail.com\nLink: https://lore.kernel.org/linux-btrfs/678e7da5.050a0220.303755.007c.GAE@google.com/\n\
  Reported-by: Dmitry Vyukov <dvyukov@google.com>\nLink: https://lore.kernel.org/linux-btrfs/CACT4Y+ZFBdo7pT8L2AzM=vegZwjp-wNkVJZQf0Ta3vZqtExaSw@mail.gmail.com/\n\
  Fixes: 871383be592b (\"btrfs: add missing unlocks to transaction abort paths\")\n\
  Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>\nReviewed-by: Qu Wenruo\
  \ <wqu@suse.com>\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by:\
  \ David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 1
covered_count: 1
