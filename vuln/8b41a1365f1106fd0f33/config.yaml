id: 8b41a1365f1106fd0f33
bug_link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33
title: 'INFO: task hung in p9_fd_close'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 60ece0833b6c2bc1465eb2803fec20b670e2ee93
fix_commit: ef575281b21e9a34dfae544a187c6aac2ae424a9
datetime: '2022-10-07T09:59:36+09:00'
fix_commit_message: "9p/trans_fd: always use O_NONBLOCK read/write\n\nsyzbot is reporting\
  \ hung task at p9_fd_close() [1], for p9_mux_poll_stop()\n from p9_conn_destroy()\
  \ from p9_fd_close() is failing to interrupt already\nstarted kernel_read() from\
  \ p9_fd_read() from p9_read_work() and/or\nkernel_write() from p9_fd_write() from\
  \ p9_write_work() requests.\n\nSince p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop()\
  \ does not\nneed to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()\n\
  does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,\np9_mux_poll_stop()\
  \ needs to interrupt kernel_read()/kernel_write() when\nthe file descriptor refers\
  \ to a pipe. In other words, pipe file descriptor\nneeds to be handled as if socket\
  \ file descriptor.\n\nWe somehow need to interrupt kernel_read()/kernel_write()\
  \ on pipes.\n\nA minimal change, which this patch is doing, is to set O_NONBLOCK\
  \ flag\n from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing\n\
  of regular files. But this approach changes O_NONBLOCK flag on userspace-\nsupplied\
  \ file descriptors (which might break userspace programs), and\nO_NONBLOCK flag\
  \ could be changed by userspace. It would be possible to set\nO_NONBLOCK flag every\
  \ time p9_fd_read()/p9_fd_write() is invoked, but still\nremains small race window\
  \ for clearing O_NONBLOCK flag.\n\nIf we don't want to manipulate O_NONBLOCK flag,\
  \ we might be able to\nsurround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)\n\
  and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are\nprocessed\
  \ by kernel threads which process global system_wq workqueue,\nsignals could not\
  \ be delivered from remote threads when p9_mux_poll_stop()\n from p9_conn_destroy()\
  \ from p9_fd_close() is called. Therefore, calling\nset_thread_flag(TIF_SIGPENDING)/recalc_sigpending()\
  \ every time would be\nneeded if we count on signals for making kernel_read()/kernel_write()\n\
  non-blocking.\n\nLink: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp\n\
  Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]\nReported-by:\
  \ syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>\nSigned-off-by:\
  \ Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nTested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>\n\
  Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>\n[Dominique: add comment\
  \ at Christian's suggestion]\nSigned-off-by: Dominique Martinet <asmadeus@codewreck.org>\n"
submodule:
- net/9p
hunk_count: 1
covered_count: 0
