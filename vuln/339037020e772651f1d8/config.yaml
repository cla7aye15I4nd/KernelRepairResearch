id: 339037020e772651f1d8
bug_link: https://syzkaller.appspot.com/bug?extid=339037020e772651f1d8
title: general protection fault in bpf_tcp_close (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 53ae914d898e5dd5984d352d5fa0b23410f966a0
fix_commit: e06fa9c16ce4b740996189fa5610eabcee734e6c
datetime: '2018-08-27T20:22:05-07:00'
fix_commit_message: 'bpf, sockmap: fix potential use after free in bpf_tcp_close


  bpf_tcp_close() we pop the psock linkage to a map via psock_map_pop().

  A parallel update on the sock hash map can happen between psock_map_pop()

  and lookup_elem_raw() where we override the element under link->hash /

  link->key. In bpf_tcp_close()''s lookup_elem_raw() we subsequently only

  test whether an element is present, but we do not test whether the

  element is infact the element we were looking for.


  We lock the sock in bpf_tcp_close() during that time, so do we hold

  the lock in sock_hash_update_elem(). However, the latter locks the

  sock which is newly updated, not the one we''re purging from the hash

  table. This means that while one CPU is doing the lookup from bpf_tcp_close(),

  another CPU is doing the map update in parallel, dropped our sock from

  the hlist and released the psock.


  Subsequently the first CPU will find the new sock and attempts to drop

  and release the old sock yet another time. Fix is that we need to check

  the elements for a match after lookup, similar as we do in the sock map.

  Note that the hash tab elems are freed via RCU, so access to their

  link->hash / link->key is fine since we''re under RCU read side there.


  Fixes: e9db4ef6bf4c ("bpf: sockhash fix omitted bucket lock in sock_close")

  Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

  Acked-by: John Fastabend <john.fastabend@gmail.com>

  Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  '
submodule:
- kernel/bpf
hunk_count: 1
covered_count: 1
