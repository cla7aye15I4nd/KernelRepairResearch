id: f4aacdfef2c6a6529c3e
bug_link: https://syzkaller.appspot.com/bug?extid=f4aacdfef2c6a6529c3e
title: possible deadlock in sk_clone_lock (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 82ac39ebd6db0c9f7a97a934bda1e3e101a9d201
fix_commit: 3d041393ea8c815f773020fb4a995331a69c0139
datetime: '2024-10-15T10:57:02-07:00'
fix_commit_message: "mptcp: prevent MPC handshake on port-based signal endpoints\n\
  \nSyzkaller reported a lockdep splat:\n\n  ============================================\n\
  \  WARNING: possible recursive locking detected\n  6.11.0-rc6-syzkaller-00019-g67784a74e258\
  \ #0 Not tainted\n  --------------------------------------------\n  syz-executor364/5113\
  \ is trying to acquire lock:\n  ffff8880449f1958 (k-slock-AF_INET){+.-.}-{2:2},\
  \ at: spin_lock include/linux/spinlock.h:351 [inline]\n  ffff8880449f1958 (k-slock-AF_INET){+.-.}-{2:2},\
  \ at: sk_clone_lock+0x2cd/0xf40 net/core/sock.c:2328\n\n  but task is already holding\
  \ lock:\n  ffff88803fe3cb58 (k-slock-AF_INET){+.-.}-{2:2}, at: spin_lock include/linux/spinlock.h:351\
  \ [inline]\n  ffff88803fe3cb58 (k-slock-AF_INET){+.-.}-{2:2}, at: sk_clone_lock+0x2cd/0xf40\
  \ net/core/sock.c:2328\n\n  other info that might help us debug this:\n   Possible\
  \ unsafe locking scenario:\n\n         CPU0\n         ----\n    lock(k-slock-AF_INET);\n\
  \    lock(k-slock-AF_INET);\n\n   *** DEADLOCK ***\n\n   May be due to missing lock\
  \ nesting notation\n\n  7 locks held by syz-executor364/5113:\n   #0: ffff8880449f0e18\
  \ (sk_lock-AF_INET){+.+.}-{0:0}, at: lock_sock include/net/sock.h:1607 [inline]\n\
  \   #0: ffff8880449f0e18 (sk_lock-AF_INET){+.+.}-{0:0}, at: mptcp_sendmsg+0x153/0x1b10\
  \ net/mptcp/protocol.c:1806\n   #1: ffff88803fe39ad8 (k-sk_lock-AF_INET){+.+.}-{0:0},\
  \ at: lock_sock include/net/sock.h:1607 [inline]\n   #1: ffff88803fe39ad8 (k-sk_lock-AF_INET){+.+.}-{0:0},\
  \ at: mptcp_sendmsg_fastopen+0x11f/0x530 net/mptcp/protocol.c:1727\n   #2: ffffffff8e938320\
  \ (rcu_read_lock){....}-{1:2}, at: rcu_lock_acquire include/linux/rcupdate.h:326\
  \ [inline]\n   #2: ffffffff8e938320 (rcu_read_lock){....}-{1:2}, at: rcu_read_lock\
  \ include/linux/rcupdate.h:838 [inline]\n   #2: ffffffff8e938320 (rcu_read_lock){....}-{1:2},\
  \ at: __ip_queue_xmit+0x5f/0x1b80 net/ipv4/ip_output.c:470\n   #3: ffffffff8e938320\
  \ (rcu_read_lock){....}-{1:2}, at: rcu_lock_acquire include/linux/rcupdate.h:326\
  \ [inline]\n   #3: ffffffff8e938320 (rcu_read_lock){....}-{1:2}, at: rcu_read_lock\
  \ include/linux/rcupdate.h:838 [inline]\n   #3: ffffffff8e938320 (rcu_read_lock){....}-{1:2},\
  \ at: ip_finish_output2+0x45f/0x1390 net/ipv4/ip_output.c:228\n   #4: ffffffff8e938320\
  \ (rcu_read_lock){....}-{1:2}, at: local_lock_acquire include/linux/local_lock_internal.h:29\
  \ [inline]\n   #4: ffffffff8e938320 (rcu_read_lock){....}-{1:2}, at: process_backlog+0x33b/0x15b0\
  \ net/core/dev.c:6104\n   #5: ffffffff8e938320 (rcu_read_lock){....}-{1:2}, at:\
  \ rcu_lock_acquire include/linux/rcupdate.h:326 [inline]\n   #5: ffffffff8e938320\
  \ (rcu_read_lock){....}-{1:2}, at: rcu_read_lock include/linux/rcupdate.h:838 [inline]\n\
  \   #5: ffffffff8e938320 (rcu_read_lock){....}-{1:2}, at: ip_local_deliver_finish+0x230/0x5f0\
  \ net/ipv4/ip_input.c:232\n   #6: ffff88803fe3cb58 (k-slock-AF_INET){+.-.}-{2:2},\
  \ at: spin_lock include/linux/spinlock.h:351 [inline]\n   #6: ffff88803fe3cb58 (k-slock-AF_INET){+.-.}-{2:2},\
  \ at: sk_clone_lock+0x2cd/0xf40 net/core/sock.c:2328\n\n  stack backtrace:\n  CPU:\
  \ 0 UID: 0 PID: 5113 Comm: syz-executor364 Not tainted 6.11.0-rc6-syzkaller-00019-g67784a74e258\
  \ #0\n  Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1\
  \ 04/01/2014\n  Call Trace:\n   <IRQ>\n   __dump_stack lib/dump_stack.c:93 [inline]\n\
  \   dump_stack_lvl+0x241/0x360 lib/dump_stack.c:119\n   check_deadlock kernel/locking/lockdep.c:3061\
  \ [inline]\n   validate_chain+0x15d3/0x5900 kernel/locking/lockdep.c:3855\n   __lock_acquire+0x137a/0x2040\
  \ kernel/locking/lockdep.c:5142\n   lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5759\n\
  \   __raw_spin_lock include/linux/spinlock_api_smp.h:133 [inline]\n   _raw_spin_lock+0x2e/0x40\
  \ kernel/locking/spinlock.c:154\n   spin_lock include/linux/spinlock.h:351 [inline]\n\
  \   sk_clone_lock+0x2cd/0xf40 net/core/sock.c:2328\n   mptcp_sk_clone_init+0x32/0x13c0\
  \ net/mptcp/protocol.c:3279\n   subflow_syn_recv_sock+0x931/0x1920 net/mptcp/subflow.c:874\n\
  \   tcp_check_req+0xfe4/0x1a20 net/ipv4/tcp_minisocks.c:853\n   tcp_v4_rcv+0x1c3e/0x37f0\
  \ net/ipv4/tcp_ipv4.c:2267\n   ip_protocol_deliver_rcu+0x22e/0x440 net/ipv4/ip_input.c:205\n\
  \   ip_local_deliver_finish+0x341/0x5f0 net/ipv4/ip_input.c:233\n   NF_HOOK+0x3a4/0x450\
  \ include/linux/netfilter.h:314\n   NF_HOOK+0x3a4/0x450 include/linux/netfilter.h:314\n\
  \   __netif_receive_skb_one_core net/core/dev.c:5661 [inline]\n   __netif_receive_skb+0x2bf/0x650\
  \ net/core/dev.c:5775\n   process_backlog+0x662/0x15b0 net/core/dev.c:6108\n   __napi_poll+0xcb/0x490\
  \ net/core/dev.c:6772\n   napi_poll net/core/dev.c:6841 [inline]\n   net_rx_action+0x89b/0x1240\
  \ net/core/dev.c:6963\n   handle_softirqs+0x2c4/0x970 kernel/softirq.c:554\n   do_softirq+0x11b/0x1e0\
  \ kernel/softirq.c:455\n   </IRQ>\n   <TASK>\n   __local_bh_enable_ip+0x1bb/0x200\
  \ kernel/softirq.c:382\n   local_bh_enable include/linux/bottom_half.h:33 [inline]\n\
  \   rcu_read_unlock_bh include/linux/rcupdate.h:908 [inline]\n   __dev_queue_xmit+0x1763/0x3e90\
  \ net/core/dev.c:4450\n   dev_queue_xmit include/linux/netdevice.h:3105 [inline]\n\
  \   neigh_hh_output include/net/neighbour.h:526 [inline]\n   neigh_output include/net/neighbour.h:540\
  \ [inline]\n   ip_finish_output2+0xd41/0x1390 net/ipv4/ip_output.c:235\n   ip_local_out\
  \ net/ipv4/ip_output.c:129 [inline]\n   __ip_queue_xmit+0x118c/0x1b80 net/ipv4/ip_output.c:535\n\
  \   __tcp_transmit_skb+0x2544/0x3b30 net/ipv4/tcp_output.c:1466\n   tcp_rcv_synsent_state_process\
  \ net/ipv4/tcp_input.c:6542 [inline]\n   tcp_rcv_state_process+0x2c32/0x4570 net/ipv4/tcp_input.c:6729\n\
  \   tcp_v4_do_rcv+0x77d/0xc70 net/ipv4/tcp_ipv4.c:1934\n   sk_backlog_rcv include/net/sock.h:1111\
  \ [inline]\n   __release_sock+0x214/0x350 net/core/sock.c:3004\n   release_sock+0x61/0x1f0\
  \ net/core/sock.c:3558\n   mptcp_sendmsg_fastopen+0x1ad/0x530 net/mptcp/protocol.c:1733\n\
  \   mptcp_sendmsg+0x1884/0x1b10 net/mptcp/protocol.c:1812\n   sock_sendmsg_nosec\
  \ net/socket.c:730 [inline]\n   __sock_sendmsg+0x1a6/0x270 net/socket.c:745\n  \
  \ ____sys_sendmsg+0x525/0x7d0 net/socket.c:2597\n   ___sys_sendmsg net/socket.c:2651\
  \ [inline]\n   __sys_sendmmsg+0x3b2/0x740 net/socket.c:2737\n   __do_sys_sendmmsg\
  \ net/socket.c:2766 [inline]\n   __se_sys_sendmmsg net/socket.c:2763 [inline]\n\
  \   __x64_sys_sendmmsg+0xa0/0xb0 net/socket.c:2763\n   do_syscall_x64 arch/x86/entry/common.c:52\
  \ [inline]\n   do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n   entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\
  \  RIP: 0033:0x7f04fb13a6b9\n  Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 01 1a 00\
  \ 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f\
  \ 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48\n  RSP:\
  \ 002b:00007ffd651f42d8 EFLAGS: 00000246 ORIG_RAX: 0000000000000133\n  RAX: ffffffffffffffda\
  \ RBX: 0000000000000003 RCX: 00007f04fb13a6b9\n  RDX: 0000000000000001 RSI: 0000000020000d00\
  \ RDI: 0000000000000004\n  RBP: 00007ffd651f4310 R08: 0000000000000001 R09: 0000000000000001\n\
  \  R10: 0000000020000080 R11: 0000000000000246 R12: 00000000000f4240\n  R13: 00007f04fb187449\
  \ R14: 00007ffd651f42f4 R15: 00007ffd651f4300\n   </TASK>\n\nAs noted by Cong Wang,\
  \ the splat is false positive, but the code\npath leading to the report is an unexpected\
  \ one: a client is\nattempting an MPC handshake towards the in-kernel listener created\n\
  by the in-kernel PM for a port based signal endpoint.\n\nSuch connection will be\
  \ never accepted; many of them can make the\nlistener queue full and preventing\
  \ the creation of MPJ subflow via\nsuch listener - its intended role.\n\nExplicitly\
  \ detect this scenario at initial-syn time and drop the\nincoming MPC request.\n\
  \nFixes: 1729cf186d8a (\"mptcp: create the listening socket for new port\")\nCc:\
  \ stable@vger.kernel.org\nReported-by: syzbot+f4aacdfef2c6a6529c3e@syzkaller.appspotmail.com\n\
  Closes: https://syzkaller.appspot.com/bug?extid=f4aacdfef2c6a6529c3e\nCc: Cong Wang\
  \ <cong.wang@bytedance.com>\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\nReviewed-by:\
  \ Matthieu Baerts (NGI0) <matttbe@kernel.org>\nReviewed-by: Mat Martineau <martineau@kernel.org>\n\
  Signed-off-by: Matthieu Baerts (NGI0) <matttbe@kernel.org>\nLink: https://patch.msgid.link/20241014-net-mptcp-mpc-port-endp-v2-1-7faea8e6b6ae@kernel.org\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/mptcp
hunk_count: 7
covered_count: 1
