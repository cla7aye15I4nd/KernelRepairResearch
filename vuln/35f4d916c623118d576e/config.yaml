id: 35f4d916c623118d576e
bug_link: https://syzkaller.appspot.com/bug?extid=35f4d916c623118d576e
title: 'KASAN: slab-out-of-bounds Read in usb_reset_and_verify_device'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 11c302f29eaf925c777d615c691017bf2d14466d
fix_commit: 3dd550a2d36596a1b0ee7955da3b611c031d3873
datetime: '2019-09-04T18:24:00+02:00'
fix_commit_message: "USB: usbcore: Fix slab-out-of-bounds bug during device reset\n\
  \nThe syzbot fuzzer provoked a slab-out-of-bounds error in the USB core:\n\nBUG:\
  \ KASAN: slab-out-of-bounds in memcmp+0xa6/0xb0 lib/string.c:904\nRead of size 1\
  \ at addr ffff8881d175bed6 by task kworker/0:3/2746\n\nCPU: 0 PID: 2746 Comm: kworker/0:3\
  \ Not tainted 5.3.0-rc5+ #28\nHardware name: Google Google Compute Engine/Google\
  \ Compute Engine, BIOS\nGoogle 01/01/2011\nWorkqueue: usb_hub_wq hub_event\nCall\
  \ Trace:\n  __dump_stack lib/dump_stack.c:77 [inline]\n  dump_stack+0xca/0x13e lib/dump_stack.c:113\n\
  \  print_address_description+0x6a/0x32c mm/kasan/report.c:351\n  __kasan_report.cold+0x1a/0x33\
  \ mm/kasan/report.c:482\n  kasan_report+0xe/0x12 mm/kasan/common.c:612\n  memcmp+0xa6/0xb0\
  \ lib/string.c:904\n  memcmp include/linux/string.h:400 [inline]\n  descriptors_changed\
  \ drivers/usb/core/hub.c:5579 [inline]\n  usb_reset_and_verify_device+0x564/0x1300\
  \ drivers/usb/core/hub.c:5729\n  usb_reset_device+0x4c1/0x920 drivers/usb/core/hub.c:5898\n\
  \  rt2x00usb_probe+0x53/0x7af\ndrivers/net/wireless/ralink/rt2x00/rt2x00usb.c:806\n\
  \nThe error occurs when the descriptors_changed() routine (called during\na device\
  \ reset) attempts to compare the old and new BOS and capability\ndescriptors.  The\
  \ length it uses for the comparison is the\nwTotalLength value stored in BOS descriptor,\
  \ but this value is not\nnecessarily the same as the length actually allocated for\
  \ the\ndescriptors.  If it is larger the routine will call memcmp() with a\nlength\
  \ that is too big, thus reading beyond the end of the allocated\nregion and leading\
  \ to this fault.\n\nThe kernel reads the BOS descriptor twice: first to get the\
  \ total\nlength of all the capability descriptors, and second to read it along\n\
  with all those other descriptors.  A malicious (or very faulty) device\nmay send\
  \ different values for the BOS descriptor fields each time.\nThe memory area will\
  \ be allocated using the wTotalLength value read\nthe first time, but stored within\
  \ it will be the value read the second\ntime.\n\nTo prevent this possibility from\
  \ causing any errors, this patch\nmodifies the BOS descriptor after it has been\
  \ read the second time:\nIt sets the wTotalLength field to the actual length of\
  \ the descriptors\nthat were read in and validated.  Then the memcpy() call, or\
  \ any other\ncode using these descriptors, will be able to rely on wTotalLength\n\
  being valid.\n\nReported-and-tested-by: syzbot+35f4d916c623118d576e@syzkaller.appspotmail.com\n\
  Signed-off-by: Alan Stern <stern@rowland.harvard.edu>\nCC: <stable@vger.kernel.org>\n\
  Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.1909041154260.1722-100000@iolanthe.rowland.org\n\
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\n"
submodule:
- drivers/usb/core
hunk_count: 4
covered_count: 3
