id: c298c9f0e46a3c86332b
bug_link: https://syzkaller.appspot.com/bug?extid=c298c9f0e46a3c86332b
title: WARNING in gre_tap_xmit (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: a5b1051ad5a7028a4a5a2f569f8caf3a56c7163c
fix_commit: 4b911a9690d72641879ea6d13cce1de31d346d79
datetime: '2024-04-26T12:20:01+02:00'
fix_commit_message: "nsh: Restore skb->{protocol,data,mac_header} for outer header\
  \ in nsh_gso_segment().\n\nsyzbot triggered various splats (see [0] and links) by\
  \ a crafted GSO\npacket of VIRTIO_NET_HDR_GSO_UDP layering the following protocols:\n\
  \n  ETH_P_8021AD + ETH_P_NSH + ETH_P_IPV6 + IPPROTO_UDP\n\nNSH can encapsulate IPv4,\
  \ IPv6, Ethernet, NSH, and MPLS.  As the inner\nprotocol can be Ethernet, NSH GSO\
  \ handler, nsh_gso_segment(), calls\nskb_mac_gso_segment() to invoke inner protocol\
  \ GSO handlers.\n\nnsh_gso_segment() does the following for the original skb before\n\
  calling skb_mac_gso_segment()\n\n  1. reset skb->network_header\n  2. save the original\
  \ skb->{mac_heaeder,mac_len} in a local variable\n  3. pull the NSH header\n  4.\
  \ resets skb->mac_header\n  5. set up skb->mac_len and skb->protocol for the inner\
  \ protocol.\n\nand does the following for the segmented skb\n\n  6. set ntohs(ETH_P_NSH)\
  \ to skb->protocol\n  7. push the NSH header\n  8. restore skb->mac_header\n  9.\
  \ set skb->mac_header + mac_len to skb->network_header\n 10. restore skb->mac_len\n\
  \nThere are two problems in 6-7 and 8-9.\n\n  (a)\n  After 6 & 7, skb->data points\
  \ to the NSH header, so the outer header\n  (ETH_P_8021AD in this case) is stripped\
  \ when skb is sent out of netdev.\n\n  Also, if NSH is encapsulated by NSH + Ethernet\
  \ (so NSH-Ethernet-NSH),\n  skb_pull() in the first nsh_gso_segment() will make\
  \ skb->data point\n  to the middle of the outer NSH or Ethernet header because the\
  \ Ethernet\n  header is not pulled by the second nsh_gso_segment().\n\n  (b)\n \
  \ While restoring skb->{mac_header,network_header} in 8 & 9,\n  nsh_gso_segment()\
  \ does not assume that the data in the linear\n  buffer is shifted.\n\n  However,\
  \ udp6_ufo_fragment() could shift the data and change\n  skb->mac_header accordingly\
  \ as demonstrated by syzbot.\n\n  If this happens, even the restored skb->mac_header\
  \ points to\n  the middle of the outer header.\n\nIt seems nsh_gso_segment() has\
  \ never worked with outer headers so far.\n\nAt the end of nsh_gso_segment(), the\
  \ outer header must be restored for\nthe segmented skb, instead of the NSH header.\n\
  \nTo do that, let's calculate the outer header position relatively from\nthe inner\
  \ header and set skb->{data,mac_header,protocol} properly.\n\n[0]:\nBUG: KMSAN:\
  \ uninit-value in ipvlan_process_outbound drivers/net/ipvlan/ipvlan_core.c:524 [inline]\n\
  BUG: KMSAN: uninit-value in ipvlan_xmit_mode_l3 drivers/net/ipvlan/ipvlan_core.c:602\
  \ [inline]\nBUG: KMSAN: uninit-value in ipvlan_queue_xmit+0xf44/0x16b0 drivers/net/ipvlan/ipvlan_core.c:668\n\
  \ ipvlan_process_outbound drivers/net/ipvlan/ipvlan_core.c:524 [inline]\n ipvlan_xmit_mode_l3\
  \ drivers/net/ipvlan/ipvlan_core.c:602 [inline]\n ipvlan_queue_xmit+0xf44/0x16b0\
  \ drivers/net/ipvlan/ipvlan_core.c:668\n ipvlan_start_xmit+0x5c/0x1a0 drivers/net/ipvlan/ipvlan_main.c:222\n\
  \ __netdev_start_xmit include/linux/netdevice.h:4989 [inline]\n netdev_start_xmit\
  \ include/linux/netdevice.h:5003 [inline]\n xmit_one net/core/dev.c:3547 [inline]\n\
  \ dev_hard_start_xmit+0x244/0xa10 net/core/dev.c:3563\n __dev_queue_xmit+0x33ed/0x51c0\
  \ net/core/dev.c:4351\n dev_queue_xmit include/linux/netdevice.h:3171 [inline]\n\
  \ packet_xmit+0x9c/0x6b0 net/packet/af_packet.c:276\n packet_snd net/packet/af_packet.c:3081\
  \ [inline]\n packet_sendmsg+0x8aef/0x9f10 net/packet/af_packet.c:3113\n sock_sendmsg_nosec\
  \ net/socket.c:730 [inline]\n __sock_sendmsg net/socket.c:745 [inline]\n __sys_sendto+0x735/0xa10\
  \ net/socket.c:2191\n __do_sys_sendto net/socket.c:2203 [inline]\n __se_sys_sendto\
  \ net/socket.c:2199 [inline]\n __x64_sys_sendto+0x125/0x1c0 net/socket.c:2199\n\
  \ do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0xcf/0x1e0\
  \ arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x63/0x6b\n\nUninit\
  \ was created at:\n slab_post_alloc_hook mm/slub.c:3819 [inline]\n slab_alloc_node\
  \ mm/slub.c:3860 [inline]\n __do_kmalloc_node mm/slub.c:3980 [inline]\n __kmalloc_node_track_caller+0x705/0x1000\
  \ mm/slub.c:4001\n kmalloc_reserve+0x249/0x4a0 net/core/skbuff.c:582\n __alloc_skb+0x352/0x790\
  \ net/core/skbuff.c:651\n skb_segment+0x20aa/0x7080 net/core/skbuff.c:4647\n udp6_ufo_fragment+0xcab/0x1150\
  \ net/ipv6/udp_offload.c:109\n ipv6_gso_segment+0x14be/0x2ca0 net/ipv6/ip6_offload.c:152\n\
  \ skb_mac_gso_segment+0x3e8/0x760 net/core/gso.c:53\n nsh_gso_segment+0x6f4/0xf70\
  \ net/nsh/nsh.c:108\n skb_mac_gso_segment+0x3e8/0x760 net/core/gso.c:53\n __skb_gso_segment+0x4b0/0x730\
  \ net/core/gso.c:124\n skb_gso_segment include/net/gso.h:83 [inline]\n validate_xmit_skb+0x107f/0x1930\
  \ net/core/dev.c:3628\n __dev_queue_xmit+0x1f28/0x51c0 net/core/dev.c:4343\n dev_queue_xmit\
  \ include/linux/netdevice.h:3171 [inline]\n packet_xmit+0x9c/0x6b0 net/packet/af_packet.c:276\n\
  \ packet_snd net/packet/af_packet.c:3081 [inline]\n packet_sendmsg+0x8aef/0x9f10\
  \ net/packet/af_packet.c:3113\n sock_sendmsg_nosec net/socket.c:730 [inline]\n __sock_sendmsg\
  \ net/socket.c:745 [inline]\n __sys_sendto+0x735/0xa10 net/socket.c:2191\n __do_sys_sendto\
  \ net/socket.c:2203 [inline]\n __se_sys_sendto net/socket.c:2199 [inline]\n __x64_sys_sendto+0x125/0x1c0\
  \ net/socket.c:2199\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0xcf/0x1e0\
  \ arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x63/0x6b\n\nCPU:\
  \ 1 PID: 5101 Comm: syz-executor421 Not tainted 6.8.0-rc5-syzkaller-00297-gf2e367d6ad3b\
  \ #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\
  \ 01/25/2024\n\nFixes: c411ed854584 (\"nsh: add GSO support\")\nReported-and-tested-by:\
  \ syzbot+42a0dc856239de4de60e@syzkaller.appspotmail.com\nCloses: https://syzkaller.appspot.com/bug?extid=42a0dc856239de4de60e\n\
  Reported-and-tested-by: syzbot+c298c9f0e46a3c86332b@syzkaller.appspotmail.com\n\
  Closes: https://syzkaller.appspot.com/bug?extid=c298c9f0e46a3c86332b\nLink: https://lore.kernel.org/netdev/20240415222041.18537-1-kuniyu@amazon.com/\n\
  Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nLink: https://lore.kernel.org/r/20240424023549.21862-1-kuniyu@amazon.com\n\
  Signed-off-by: Paolo Abeni <pabeni@redhat.com>\n"
submodule:
- net/nsh
hunk_count: 2
covered_count: 0
