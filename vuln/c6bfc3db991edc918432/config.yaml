id: c6bfc3db991edc918432
bug_link: https://syzkaller.appspot.com/bug?extid=c6bfc3db991edc918432
title: general protection fault in selinux_socket_recvmsg
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: f2fb6b6275eba9d312957ca44c487bd780da6169
fix_commit: 0a82e230c68860b7286dad8644d9d9f7cfd755d2
datetime: '2020-05-26T20:18:24-07:00'
fix_commit_message: "mptcp: avoid NULL-ptr derefence on fallback\n\nIn the MPTCP receive\
  \ path we must cope with TCP fallback\non blocking recvmsg(). Currently in such\
  \ code path we detect\nthe fallback condition, but we don't fetch the struct socket\n\
  required for fallback.\n\nThe above allowed syzkaller to trigger a NULL pointer\n\
  dereference:\n\ngeneral protection fault, probably for non-canonical address 0xdffffc0000000004:\
  \ 0000 [#1] PREEMPT SMP KASAN\nKASAN: null-ptr-deref in range [0x0000000000000020-0x0000000000000027]\n\
  CPU: 1 PID: 7226 Comm: syz-executor523 Not tainted 5.7.0-rc6-syzkaller #0\nHardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\n\
  RIP: 0010:sock_recvmsg_nosec net/socket.c:886 [inline]\nRIP: 0010:sock_recvmsg+0x92/0x110\
  \ net/socket.c:904\nCode: 5b 41 5c 41 5d 41 5e 41 5f 5d c3 44 89 6c 24 04 e8 53\
  \ 18 1d fb 4d 8d 6f 20 4c 89 e8 48 c1 e8 03 48 b9 00 00 00 00 00 fc ff df <80> 3c\
  \ 08 00 74 08 4c 89 ef e8 20 12 5b fb bd a0 00 00 00 49 03 6d\nRSP: 0018:ffffc90001077b98\
  \ EFLAGS: 00010202\nRAX: 0000000000000004 RBX: ffffc90001077dc0 RCX: dffffc0000000000\n\
  RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000\nRBP: 0000000000000000\
  \ R08: ffffffff86565e59 R09: ffffed10115afeaa\nR10: ffffed10115afeaa R11: 0000000000000000\
  \ R12: 1ffff9200020efbc\nR13: 0000000000000020 R14: ffffc90001077de0 R15: 0000000000000000\n\
  FS:  00007fc6a3abe700(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000\nCS:\
  \  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000004d0050 CR3: 00000000969f0000\
  \ CR4: 00000000001406e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n\
  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n\
  \ mptcp_recvmsg+0x18d5/0x19b0 net/mptcp/protocol.c:891\n inet_recvmsg+0xf6/0x1d0\
  \ net/ipv4/af_inet.c:838\n sock_recvmsg_nosec net/socket.c:886 [inline]\n sock_recvmsg\
  \ net/socket.c:904 [inline]\n __sys_recvfrom+0x2f3/0x470 net/socket.c:2057\n __do_sys_recvfrom\
  \ net/socket.c:2075 [inline]\n __se_sys_recvfrom net/socket.c:2071 [inline]\n __x64_sys_recvfrom+0xda/0xf0\
  \ net/socket.c:2071\n do_syscall_64+0xf3/0x1b0 arch/x86/entry/common.c:295\n entry_SYSCALL_64_after_hwframe+0x49/0xb3\n\
  \nAddress the issue initializing the struct socket reference\nbefore entering the\
  \ fallback code.\n\nReported-and-tested-by: syzbot+c6bfc3db991edc918432@syzkaller.appspotmail.com\n\
  Suggested-by: Ondrej Mosnacek <omosnace@redhat.com>\nFixes: 8ab183deb26a (\"mptcp:\
  \ cope with later TCP fallback\")\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\n\
  Reviewed-by: Mat Martineau <mathew.j.martineau@linux.intel.com>\nSigned-off-by:\
  \ David S. Miller <davem@davemloft.net>\n"
submodule:
- net/mptcp
hunk_count: 1
covered_count: 0
