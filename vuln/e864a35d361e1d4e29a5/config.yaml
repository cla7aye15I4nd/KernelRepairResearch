id: e864a35d361e1d4e29a5
bug_link: https://syzkaller.appspot.com/bug?extid=e864a35d361e1d4e29a5
title: kernel BUG at lib/string.c:LINE! (5)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 1c78544eaa4660096aeb6a57ec82b42cdb3bfe5a
fix_commit: 35be8851d172c6e3db836c0f28c19087b10c9e00
datetime: '2020-09-21T12:39:21+02:00'
fix_commit_message: "btrfs: fix overflow when copying corrupt csums for a message\n\
  \nSyzkaller reported a buffer overflow in btree_readpage_end_io_hook()\nwhen loop\
  \ mounting a crafted image:\n\n  detected buffer overflow in memcpy\n  ------------[\
  \ cut here ]------------\n  kernel BUG at lib/string.c:1129!\n  invalid opcode:\
  \ 0000 [#1] PREEMPT SMP KASAN\n  CPU: 1 PID: 26 Comm: kworker/u4:2 Not tainted 5.9.0-rc4-syzkaller\
  \ #0\n  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS\
  \ Google 01/01/2011\n  Workqueue: btrfs-endio-meta btrfs_work_helper\n  RIP: 0010:fortify_panic+0xf/0x20\
  \ lib/string.c:1129\n  RSP: 0018:ffffc90000e27980 EFLAGS: 00010286\n  RAX: 0000000000000022\
  \ RBX: ffff8880a80dca64 RCX: 0000000000000000\n  RDX: ffff8880a90860c0 RSI: ffffffff815dba07\
  \ RDI: fffff520001c4f22\n  RBP: ffff8880a80dca00 R08: 0000000000000022 R09: ffff8880ae7318e7\n\
  \  R10: 0000000000000000 R11: 0000000000077578 R12: 00000000ffffff6e\n  R13: 0000000000000008\
  \ R14: ffffc90000e27a40 R15: 1ffff920001c4f3c\n  FS:  0000000000000000(0000) GS:ffff8880ae700000(0000)\
  \ knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n\
  \  CR2: 0000557335f440d0 CR3: 000000009647d000 CR4: 00000000001506e0\n  DR0: 0000000000000000\
  \ DR1: 0000000000000000 DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000fffe0ff0\
  \ DR7: 0000000000000400\n  Call Trace:\n   memcpy include/linux/string.h:405 [inline]\n\
  \   btree_readpage_end_io_hook.cold+0x206/0x221 fs/btrfs/disk-io.c:642\n   end_bio_extent_readpage+0x4de/0x10c0\
  \ fs/btrfs/extent_io.c:2854\n   bio_endio+0x3cf/0x7f0 block/bio.c:1449\n   end_workqueue_fn+0x114/0x170\
  \ fs/btrfs/disk-io.c:1695\n   btrfs_work_helper+0x221/0xe20 fs/btrfs/async-thread.c:318\n\
  \   process_one_work+0x94c/0x1670 kernel/workqueue.c:2269\n   worker_thread+0x64c/0x1120\
  \ kernel/workqueue.c:2415\n   kthread+0x3b5/0x4a0 kernel/kthread.c:292\n   ret_from_fork+0x1f/0x30\
  \ arch/x86/entry/entry_64.S:294\n  Modules linked in:\n  ---[ end trace b68924293169feef\
  \ ]---\n  RIP: 0010:fortify_panic+0xf/0x20 lib/string.c:1129\n  RSP: 0018:ffffc90000e27980\
  \ EFLAGS: 00010286\n  RAX: 0000000000000022 RBX: ffff8880a80dca64 RCX: 0000000000000000\n\
  \  RDX: ffff8880a90860c0 RSI: ffffffff815dba07 RDI: fffff520001c4f22\n  RBP: ffff8880a80dca00\
  \ R08: 0000000000000022 R09: ffff8880ae7318e7\n  R10: 0000000000000000 R11: 0000000000077578\
  \ R12: 00000000ffffff6e\n  R13: 0000000000000008 R14: ffffc90000e27a40 R15: 1ffff920001c4f3c\n\
  \  FS:  0000000000000000(0000) GS:ffff8880ae700000(0000) knlGS:0000000000000000\n\
  \  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00007f95b7c4d008 CR3:\
  \ 000000009647d000 CR4: 00000000001506e0\n  DR0: 0000000000000000 DR1: 0000000000000000\
  \ DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n\
  \nThe overflow happens, because in btree_readpage_end_io_hook() we assume\nthat\
  \ we have found a 4 byte checksum instead of the real possible 32\nbytes we have\
  \ for the checksums.\n\nWith the fix applied:\n\n[   35.726623] BTRFS: device fsid\
  \ 815caf9a-dc43-4d2a-ac54-764b8333d765 devid 1 transid 5 /dev/loop0 scanned by syz-repro\
  \ (215)\n[   35.738994] BTRFS info (device loop0): disk space caching is enabled\n\
  [   35.738998] BTRFS info (device loop0): has skinny extents\n[   35.743337] BTRFS\
  \ warning (device loop0): loop0 checksum verify failed on 1052672 wanted 0xf9c035fc8d239a54\
  \ found 0x67a25c14b7eabcf9 level 0\n[   35.743420] BTRFS error (device loop0): failed\
  \ to read chunk root\n[   35.745899] BTRFS error (device loop0): open_ctree failed\n\
  \nReported-by: syzbot+e864a35d361e1d4e29a5@syzkaller.appspotmail.com\nFixes: d5178578bcd4\
  \ (\"btrfs: directly call into crypto framework for checksumming\")\nCC: stable@vger.kernel.org\
  \ # 5.4+\nSigned-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>\nSigned-off-by:\
  \ David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 1
covered_count: 1
