id: e783f671527912cd9403
bug_link: https://syzkaller.appspot.com/bug?extid=e783f671527912cd9403
title: general protection fault in ip6t_do_table
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 01ea306f2ac2baff98d472da719193e738759d93
fix_commit: 57ebd808a97d7c5b1e1afb937c2db22beba3c1f8
datetime: '2018-02-14T20:47:41+01:00'
fix_commit_message: 'netfilter: add back stackpointer size checks


  The rationale for removing the check is only correct for rulesets

  generated by ip(6)tables.


  In iptables, a jump can only occur to a user-defined chain, i.e.

  because we size the stack based on number of user-defined chains we

  cannot exceed stack size.


  However, the underlying binary format has no such restriction,

  and the validation step only ensures that the jump target is a

  valid rule start point.


  IOW, its possible to build a rule blob that has no user-defined

  chains but does contain a jump.


  If this happens, no jump stack gets allocated and crash occurs

  because no jumpstack was allocated.


  Fixes: 7814b6ec6d0d6 ("netfilter: xtables: don''t save/restore jumpstack offset")

  Reported-by: syzbot+e783f671527912cd9403@syzkaller.appspotmail.com

  Signed-off-by: Florian Westphal <fw@strlen.de>

  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

  '
submodule:
- net/ipv4
- net/ipv6
hunk_count: 3
covered_count: 1
