id: 4727d10d6a805738b0f2
bug_link: https://syzkaller.appspot.com/bug?extid=4727d10d6a805738b0f2
title: WARNING in kvm_handle_mmio_return
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 8e929cb546ee42c9a61d24fae60605e9e3192354
fix_commit: e735a5da64420a86be370b216c269b5dd8e830e2
datetime: '2024-10-26T14:37:49+00:00'
fix_commit_message: "KVM: arm64: Don't retire aborted MMIO instruction\n\nReturning\
  \ an abort to the guest for an unsupported MMIO access is a\ndocumented feature\
  \ of the KVM UAPI. Nevertheless, it's clear that this\nplumbing has seen limited\
  \ testing, since userspace can trivially cause a\nWARN in the MMIO return:\n\n \
  \ WARNING: CPU: 0 PID: 30558 at arch/arm64/include/asm/kvm_emulate.h:536 kvm_handle_mmio_return+0x46c/0x5c4\
  \ arch/arm64/include/asm/kvm_emulate.h:536\n  Call trace:\n   kvm_handle_mmio_return+0x46c/0x5c4\
  \ arch/arm64/include/asm/kvm_emulate.h:536\n   kvm_arch_vcpu_ioctl_run+0x98/0x15b4\
  \ arch/arm64/kvm/arm.c:1133\n   kvm_vcpu_ioctl+0x75c/0xa78 virt/kvm/kvm_main.c:4487\n\
  \   __do_sys_ioctl fs/ioctl.c:51 [inline]\n   __se_sys_ioctl fs/ioctl.c:893 [inline]\n\
  \   __arm64_sys_ioctl+0x14c/0x1c8 fs/ioctl.c:893\n   __invoke_syscall arch/arm64/kernel/syscall.c:35\
  \ [inline]\n   invoke_syscall+0x98/0x2b8 arch/arm64/kernel/syscall.c:49\n   el0_svc_common+0x1e0/0x23c\
  \ arch/arm64/kernel/syscall.c:132\n   do_el0_svc+0x48/0x58 arch/arm64/kernel/syscall.c:151\n\
  \   el0_svc+0x38/0x68 arch/arm64/kernel/entry-common.c:712\n   el0t_64_sync_handler+0x90/0xfc\
  \ arch/arm64/kernel/entry-common.c:730\n   el0t_64_sync+0x190/0x194 arch/arm64/kernel/entry.S:598\n\
  \nThe splat is complaining that KVM is advancing PC while an exception is\npending,\
  \ i.e. that KVM is retiring the MMIO instruction despite a\npending synchronous\
  \ external abort. Womp womp.\n\nFix the glaring UAPI bug by skipping over all the\
  \ MMIO emulation in\ncase there is a pending synchronous exception. Note that while\
  \ userspace\nis capable of pending an asynchronous exception (SError, IRQ, or FIQ),\n\
  it is still safe to retire the MMIO instruction in this case as (1) they\nare by\
  \ definition asynchronous, and (2) KVM relies on hardware support\nfor pending/delivering\
  \ these exceptions instead of the software state\nmachine for advancing PC.\n\n\
  Cc: stable@vger.kernel.org\nFixes: da345174ceca (\"KVM: arm/arm64: Allow user injection\
  \ of external data aborts\")\nReported-by: Alexander Potapenko <glider@google.com>\n\
  Reviewed-by: Marc Zyngier <maz@kernel.org>\nLink: https://lore.kernel.org/r/20241025203106.3529261-2-oliver.upton@linux.dev\n\
  Signed-off-by: Oliver Upton <oliver.upton@linux.dev>\n"
submodule:
- arch/arm64/kvm
hunk_count: 2
covered_count: 2
