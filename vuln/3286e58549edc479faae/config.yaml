id: 3286e58549edc479faae
bug_link: https://syzkaller.appspot.com/bug?extid=3286e58549edc479faae
title: 'WARNING: locking bug in copy_process'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 8b0e1fea3056a411300fb3a2d8f3ca9af54ace44
fix_commit: c3b7112df86b769927a60a6d7175988ca3d60f09
datetime: '2019-05-10T14:26:12+02:00'
fix_commit_message: "fork: do not release lock that wasn't taken\n\nAvoid calling\
  \ cgroup_threadgroup_change_end() without having called\ncgroup_threadgroup_change_begin()\
  \ first.\n\nDuring process creation we need to check whether the cgroup we are in\n\
  allows us to fork. To perform this check the cgroup needs to guard itself\nagainst\
  \ threadgroup changes and takes a lock.\nPrior to CLONE_PIDFD the cleanup target\
  \ \"bad_fork_free_pid\" would also need\nto call cgroup_threadgroup_change_end()\
  \ because said lock had already been\ntaken.\nHowever, this is not the case anymore\
  \ with the addition of CLONE_PIDFD. We\nare now allocating a pidfd before we check\
  \ whether the cgroup we're in can\nfork and thus prior to taking the lock. So when\
  \ copy_process() fails at the\nright step it would release a lock we haven't taken.\n\
  This bug is not even very subtle to be honest. It's just not very clear\nfrom the\
  \ naming of cgroup_threadgroup_change_{begin,end}() that a lock is\ntaken.\n\nHere's\
  \ the relevant splat:\n\nentry_SYSENTER_compat+0x70/0x7f arch/x86/entry/entry_64_compat.S:139\n\
  RIP: 0023:0xf7fec849\nCode: 85 d2 74 02 89 0a 5b 5d c3 8b 04 24 c3 8b 14 24 c3 8b\
  \ 3c 24 c3 90 90\n90 90 90 90 90 90 90 90 90 90 51 52 55 89 e5 0f 34 cd 80 <5d>\
  \ 5a 59 c3 90\n90 90 90 eb 0d 90 90 90 90 90 90 90 90 90 90 90 90\nRSP: 002b:00000000ffed5a8c\
  \ EFLAGS: 00000246 ORIG_RAX: 0000000000000078\nRAX: ffffffffffffffda RBX: 0000000000003ffc\
  \ RCX: 0000000000000000\nRDX: 00000000200005c0 RSI: 0000000000000000 RDI: 0000000000000000\n\
  RBP: 0000000000000012 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000\
  \ R11: 0000000000000000 R12: 0000000000000000\nR13: 0000000000000000 R14: 0000000000000000\
  \ R15: 0000000000000000\n------------[ cut here ]------------\nDEBUG_LOCKS_WARN_ON(depth\
  \ <= 0)\nWARNING: CPU: 1 PID: 7744 at kernel/locking/lockdep.c:4052 __lock_release\n\
  kernel/locking/lockdep.c:4052 [inline]\nWARNING: CPU: 1 PID: 7744 at kernel/locking/lockdep.c:4052\n\
  lock_release+0x667/0xa00 kernel/locking/lockdep.c:4321\nKernel panic - not syncing:\
  \ panic_on_warn set ...\nCPU: 1 PID: 7744 Comm: syz-executor007 Not tainted 5.1.0+\
  \ #4\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS\n\
  Google 01/01/2011\nCall Trace:\n  __dump_stack lib/dump_stack.c:77 [inline]\n  dump_stack+0x172/0x1f0\
  \ lib/dump_stack.c:113\n  panic+0x2cb/0x65c kernel/panic.c:214\n  __warn.cold+0x20/0x45\
  \ kernel/panic.c:566\n  report_bug+0x263/0x2b0 lib/bug.c:186\n  fixup_bug arch/x86/kernel/traps.c:179\
  \ [inline]\n  fixup_bug arch/x86/kernel/traps.c:174 [inline]\n  do_error_trap+0x11b/0x200\
  \ arch/x86/kernel/traps.c:272\n  do_invalid_op+0x37/0x50 arch/x86/kernel/traps.c:291\n\
  \  invalid_op+0x14/0x20 arch/x86/entry/entry_64.S:972\nRIP: 0010:__lock_release\
  \ kernel/locking/lockdep.c:4052 [inline]\nRIP: 0010:lock_release+0x667/0xa00 kernel/locking/lockdep.c:4321\n\
  Code: 0f 85 a0 03 00 00 8b 35 77 66 08 08 85 f6 75 23 48 c7 c6 a0 55 6b 87\n48 c7\
  \ c7 40 25 6b 87 4c 89 85 70 ff ff ff e8 b7 a9 eb ff <0f> 0b 4c 8b 85\n70 ff ff\
  \ ff 4c 89 ea 4c 89 e6 4c 89 c7 e8 52 63 ff\nRSP: 0018:ffff888094117b48 EFLAGS:\
  \ 00010086\nRAX: 0000000000000000 RBX: 1ffff11012822f6f RCX: 0000000000000000\n\
  RDX: 0000000000000000 RSI: ffffffff815af236 RDI: ffffed1012822f5b\nRBP: ffff888094117c00\
  \ R08: ffff888092bfc400 R09: fffffbfff113301d\nR10: fffffbfff113301c R11: ffffffff889980e3\
  \ R12: ffffffff8a451df8\nR13: ffffffff8142e71f R14: ffffffff8a44cc80 R15: ffff888094117bd8\n\
  \  percpu_up_read.constprop.0+0xcb/0x110 include/linux/percpu-rwsem.h:92\n  cgroup_threadgroup_change_end\
  \ include/linux/cgroup-defs.h:712 [inline]\n  copy_process.part.0+0x47ff/0x6710\
  \ kernel/fork.c:2222\n  copy_process kernel/fork.c:1772 [inline]\n  _do_fork+0x25d/0xfd0\
  \ kernel/fork.c:2338\n  __do_compat_sys_x86_clone arch/x86/ia32/sys_ia32.c:240 [inline]\n\
  \  __se_compat_sys_x86_clone arch/x86/ia32/sys_ia32.c:236 [inline]\n  __ia32_compat_sys_x86_clone+0xbc/0x140\
  \ arch/x86/ia32/sys_ia32.c:236\n  do_syscall_32_irqs_on arch/x86/entry/common.c:334\
  \ [inline]\n  do_fast_syscall_32+0x281/0xd54 arch/x86/entry/common.c:405\n  entry_SYSENTER_compat+0x70/0x7f\
  \ arch/x86/entry/entry_64_compat.S:139\nRIP: 0023:0xf7fec849\nCode: 85 d2 74 02\
  \ 89 0a 5b 5d c3 8b 04 24 c3 8b 14 24 c3 8b 3c 24 c3 90 90\n90 90 90 90 90 90 90\
  \ 90 90 90 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90\n90 90 90 eb 0d 90 90 90\
  \ 90 90 90 90 90 90 90 90 90\nRSP: 002b:00000000ffed5a8c EFLAGS: 00000246 ORIG_RAX:\
  \ 0000000000000078\nRAX: ffffffffffffffda RBX: 0000000000003ffc RCX: 0000000000000000\n\
  RDX: 00000000200005c0 RSI: 0000000000000000 RDI: 0000000000000000\nRBP: 0000000000000012\
  \ R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000000\
  \ R12: 0000000000000000\nR13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\n\
  Kernel Offset: disabled\nRebooting in 86400 seconds..\n\nReported-and-tested-by:\
  \ syzbot+3286e58549edc479faae@syzkaller.appspotmail.com\nFixes: b3e583825266 (\"\
  clone: add CLONE_PIDFD\")\nSigned-off-by: Christian Brauner <christian@brauner.io>\n"
submodule:
- kernel
hunk_count: 2
covered_count: 1
