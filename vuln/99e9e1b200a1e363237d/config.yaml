id: 99e9e1b200a1e363237d
bug_link: https://syzkaller.appspot.com/bug?extid=99e9e1b200a1e363237d
title: general protection fault in j1939_jsk_del (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 1a2e9d2f794e8789d8b4503340ea3465163db2f8
fix_commit: 00d4e14d2e4caf5f7254a505fee5eeca8cd37bd4
datetime: '2019-12-08T11:52:02+01:00'
fix_commit_message: "can: j1939: j1939_sk_bind(): take priv after lock is held\n\n\
  syzbot reproduced following crash:\n\n===============================================================================\n\
  kasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref\
  \ or user memory access\ngeneral protection fault: 0000 [#1] PREEMPT SMP KASAN\n\
  CPU: 0 PID: 9844 Comm: syz-executor.0 Not tainted 5.4.0-syzkaller #0\nHardware name:\
  \ Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle 01/01/2011\n\
  RIP: 0010:__lock_acquire+0x1254/0x4a00 kernel/locking/lockdep.c:3828\nCode: 00 0f\
  \ 85 96 24 00 00 48 81 c4 f0 00 00 00 5b 41 5c 41 5d 41 5e 41\n5f 5d c3 48 b8 00\
  \ 00 00 00 00 fc ff df 4c 89 f2 48 c1 ea 03 <80> 3c 02\n00 0f 85 0b 28 00 00 49\
  \ 81 3e 20 19 78 8a 0f 84 5f ee ff\nRSP: 0018:ffff888099c3fb48 EFLAGS: 00010006\n\
  RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000218\
  \ RSI: 0000000000000000 RDI: 0000000000000001\nRBP: ffff888099c3fc60 R08: 0000000000000001\
  \ R09: 0000000000000001\nR10: fffffbfff146e1d0 R11: ffff888098720400 R12: 00000000000010c0\n\
  R13: 0000000000000000 R14: 00000000000010c0 R15: 0000000000000000\nFS:  00007f0559e98700(0000)\
  \ GS:ffff8880ae800000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000\
  \ CR0: 0000000080050033\nCR2: 00007fe4d89e0000 CR3: 0000000099606000 CR4: 00000000001406f0\n\
  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000\
  \ DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n lock_acquire+0x190/0x410\
  \ kernel/locking/lockdep.c:4485\n __raw_spin_lock_bh include/linux/spinlock_api_smp.h:135\
  \ [inline]\n _raw_spin_lock_bh+0x33/0x50 kernel/locking/spinlock.c:175\n spin_lock_bh\
  \ include/linux/spinlock.h:343 [inline]\n j1939_jsk_del+0x32/0x210 net/can/j1939/socket.c:89\n\
  \ j1939_sk_bind+0x2ea/0x8f0 net/can/j1939/socket.c:448\n __sys_bind+0x239/0x290\
  \ net/socket.c:1648\n __do_sys_bind net/socket.c:1659 [inline]\n __se_sys_bind net/socket.c:1657\
  \ [inline]\n __x64_sys_bind+0x73/0xb0 net/socket.c:1657\n do_syscall_64+0xfa/0x790\
  \ arch/x86/entry/common.c:294\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x45a679\n\
  Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89\nf7 48 89\
  \ d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01\nf0 ff ff 0f 83\
  \ 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00\nRSP: 002b:00007f0559e97c78 EFLAGS:\
  \ 00000246 ORIG_RAX: 0000000000000031\nRAX: ffffffffffffffda RBX: 0000000000000003\
  \ RCX: 000000000045a679\nRDX: 0000000000000018 RSI: 0000000020000240 RDI: 0000000000000003\n\
  RBP: 000000000075bf20 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000\
  \ R11: 0000000000000246 R12: 00007f0559e986d4\nR13: 00000000004c09e9 R14: 00000000004d37d0\
  \ R15: 00000000ffffffff\nModules linked in:\n------------[ cut here ]------------\n\
  WARNING: CPU: 0 PID: 9844 at kernel/locking/mutex.c:1419\nmutex_trylock+0x279/0x2f0\
  \ kernel/locking/mutex.c:1427\n===============================================================================\n\
  \nThis issues was caused by null pointer deference. Where j1939_sk_bind()\nwas using\
  \ currently not existing priv.\n\nPossible scenario may look as following:\ncpu0\
  \                                    cpu1\nbind()\n                            \
  \            bind()\n j1939_sk_bind()\n                                        \
  \ j1939_sk_bind()\n  priv = jsk->priv;\n                                       \
  \  priv = jsk->priv;\n  lock_sock(sock->sk);\n  priv = j1939_netdev_start(ndev);\n\
  \  j1939_jsk_add(priv, jsk);\n    jsk->priv = priv;\n  relase_sock(sock->sk);\n\
  \                                         lock_sock(sock->sk);\n               \
  \                          j1939_jsk_del(priv, jsk);\n                         \
  \                ..... ooops ......\n\nWith this patch we move \"priv = jsk->priv;\"\
  \ after the lock, to avoid\nassigning of wrong priv pointer.\n\nReported-by: syzbot+99e9e1b200a1e363237d@syzkaller.appspotmail.com\n\
  Fixes: 9d71dd0c7009 (\"can: add support of SAE J1939 protocol\")\nSigned-off-by:\
  \ Oleksij Rempel <o.rempel@pengutronix.de>\nCc: linux-stable <stable@vger.kernel.org>\
  \ # >= v5.4\nSigned-off-by: Marc Kleine-Budde <mkl@pengutronix.de>\n"
submodule:
- net/can
hunk_count: 2
covered_count: 2
