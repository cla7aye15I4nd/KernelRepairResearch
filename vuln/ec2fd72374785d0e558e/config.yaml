id: ec2fd72374785d0e558e
bug_link: https://syzkaller.appspot.com/bug?extid=ec2fd72374785d0e558e
title: 'BUG: sleeping function called from invalid context in rxe_alloc_nl'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: def4cd43f522253645b72c97181399c241b54536
fix_commit: c4369575b2bc2993edf8223a8f5c9f510ee629d0
datetime: '2021-01-28T15:29:55-04:00'
fix_commit_message: 'RDMA/rxe: Fix bug in rxe_alloc()


  A recent patch which added an ''unlocked'' version of rxe_alloc introduced a

  bug causing kzalloc(..., GFP_KERNEL) to be called while holding a spin

  lock. This patch corrects that error.


  rxe_alloc_nl() should always be called while holding the pool->pool_lock

  so the 2nd argument to kzalloc there should be GFP_ATOMIC.


  rxe_alloc() prior to the change only locked the code around checking that

  pool->state is RXE_POOL_STATE_VALID to avoid races between working threads

  and a thread shutting down the rxe driver. This patch reverts rxe_alloc()

  to this behavior so the lock is not held when kzalloc() is called.


  Link: https://lore.kernel.org/r/20210125211641.2694-2-rpearson@hpe.com

  Reported-by: syzbot+ec2fd72374785d0e558e@syzkaller.appspotmail.com

  Fixes: 3853c35e243d ("RDMA/rxe: Add unlocked versions of pool APIs")

  Signed-off-by: Bob Pearson <rpearson@hpe.com>

  Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>

  '
submodule:
- drivers/infiniband/sw/rxe
hunk_count: 3
covered_count: 3
