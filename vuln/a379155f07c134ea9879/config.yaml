id: a379155f07c134ea9879
bug_link: https://syzkaller.appspot.com/bug?extid=a379155f07c134ea9879
title: possible deadlock in __btrfs_release_delayed_node (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 77d20c685b6baeb942606a93ed861c191381b73e
fix_commit: e110f8911ddb93e6f55da14ccbbe705397b30d0b
datetime: '2023-09-08T14:10:53+02:00'
fix_commit_message: "btrfs: fix lockdep splat and potential deadlock after failure\
  \ running delayed items\n\nWhen running delayed items we are holding a delayed node's\
  \ mutex and then\nwe will attempt to modify a subvolume btree to insert/update/delete\
  \ the\ndelayed items. However if have an error during the insertions for example,\n\
  btrfs_insert_delayed_items() may return with a path that has locked extent\nbuffers\
  \ (a leaf at the very least), and then we attempt to release the\ndelayed node at\
  \ __btrfs_run_delayed_items(), which requires taking the\ndelayed node's mutex,\
  \ causing an ABBA type of deadlock. This was reported\nby syzbot and the lockdep\
  \ splat is the following:\n\n  WARNING: possible circular locking dependency detected\n\
  \  6.5.0-rc7-syzkaller-00024-g93f5de5f648d #0 Not tainted\n  ------------------------------------------------------\n\
  \  syz-executor.2/13257 is trying to acquire lock:\n  ffff88801835c0c0 (&delayed_node->mutex){+.+.}-{3:3},\
  \ at: __btrfs_release_delayed_node+0x9a/0xaa0 fs/btrfs/delayed-inode.c:256\n\n \
  \ but task is already holding lock:\n  ffff88802a5ab8e8 (btrfs-tree-00){++++}-{3:3},\
  \ at: __btrfs_tree_lock+0x3c/0x2a0 fs/btrfs/locking.c:198\n\n  which lock already\
  \ depends on the new lock.\n\n  the existing dependency chain (in reverse order)\
  \ is:\n\n  -> #1 (btrfs-tree-00){++++}-{3:3}:\n         __lock_release kernel/locking/lockdep.c:5475\
  \ [inline]\n         lock_release+0x36f/0x9d0 kernel/locking/lockdep.c:5781\n  \
  \       up_write+0x79/0x580 kernel/locking/rwsem.c:1625\n         btrfs_tree_unlock_rw\
  \ fs/btrfs/locking.h:189 [inline]\n         btrfs_unlock_up_safe+0x179/0x3b0 fs/btrfs/locking.c:239\n\
  \         search_leaf fs/btrfs/ctree.c:1986 [inline]\n         btrfs_search_slot+0x2511/0x2f80\
  \ fs/btrfs/ctree.c:2230\n         btrfs_insert_empty_items+0x9c/0x180 fs/btrfs/ctree.c:4376\n\
  \         btrfs_insert_delayed_item fs/btrfs/delayed-inode.c:746 [inline]\n    \
  \     btrfs_insert_delayed_items fs/btrfs/delayed-inode.c:824 [inline]\n       \
  \  __btrfs_commit_inode_delayed_items+0xd24/0x2410 fs/btrfs/delayed-inode.c:1111\n\
  \         __btrfs_run_delayed_items+0x1db/0x430 fs/btrfs/delayed-inode.c:1153\n\
  \         flush_space+0x269/0xe70 fs/btrfs/space-info.c:723\n         btrfs_async_reclaim_metadata_space+0x106/0x350\
  \ fs/btrfs/space-info.c:1078\n         process_one_work+0x92c/0x12c0 kernel/workqueue.c:2600\n\
  \         worker_thread+0xa63/0x1210 kernel/workqueue.c:2751\n         kthread+0x2b8/0x350\
  \ kernel/kthread.c:389\n         ret_from_fork+0x2e/0x60 arch/x86/kernel/process.c:145\n\
  \         ret_from_fork_asm+0x11/0x20 arch/x86/entry/entry_64.S:304\n\n  -> #0 (&delayed_node->mutex){+.+.}-{3:3}:\n\
  \         check_prev_add kernel/locking/lockdep.c:3142 [inline]\n         check_prevs_add\
  \ kernel/locking/lockdep.c:3261 [inline]\n         validate_chain kernel/locking/lockdep.c:3876\
  \ [inline]\n         __lock_acquire+0x39ff/0x7f70 kernel/locking/lockdep.c:5144\n\
  \         lock_acquire+0x1e3/0x520 kernel/locking/lockdep.c:5761\n         __mutex_lock_common+0x1d8/0x2530\
  \ kernel/locking/mutex.c:603\n         __mutex_lock kernel/locking/mutex.c:747 [inline]\n\
  \         mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799\n         __btrfs_release_delayed_node+0x9a/0xaa0\
  \ fs/btrfs/delayed-inode.c:256\n         btrfs_release_delayed_node fs/btrfs/delayed-inode.c:281\
  \ [inline]\n         __btrfs_run_delayed_items+0x2b5/0x430 fs/btrfs/delayed-inode.c:1156\n\
  \         btrfs_commit_transaction+0x859/0x2ff0 fs/btrfs/transaction.c:2276\n  \
  \       btrfs_sync_file+0xf56/0x1330 fs/btrfs/file.c:1988\n         vfs_fsync_range\
  \ fs/sync.c:188 [inline]\n         vfs_fsync fs/sync.c:202 [inline]\n         do_fsync\
  \ fs/sync.c:212 [inline]\n         __do_sys_fsync fs/sync.c:220 [inline]\n     \
  \    __se_sys_fsync fs/sync.c:218 [inline]\n         __x64_sys_fsync+0x196/0x1e0\
  \ fs/sync.c:218\n         do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n \
  \        do_syscall_64+0x41/0xc0 arch/x86/entry/common.c:80\n         entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\
  \n  other info that might help us debug this:\n\n   Possible unsafe locking scenario:\n\
  \n         CPU0                    CPU1\n         ----                    ----\n\
  \    lock(btrfs-tree-00);\n                                 lock(&delayed_node->mutex);\n\
  \                                 lock(btrfs-tree-00);\n    lock(&delayed_node->mutex);\n\
  \n   *** DEADLOCK ***\n\n  3 locks held by syz-executor.2/13257:\n   #0: ffff88802c1ee370\
  \ (btrfs_trans_num_writers){++++}-{0:0}, at: spin_unlock include/linux/spinlock.h:391\
  \ [inline]\n   #0: ffff88802c1ee370 (btrfs_trans_num_writers){++++}-{0:0}, at: join_transaction+0xb87/0xe00\
  \ fs/btrfs/transaction.c:287\n   #1: ffff88802c1ee398 (btrfs_trans_num_extwriters){++++}-{0:0},\
  \ at: join_transaction+0xbb2/0xe00 fs/btrfs/transaction.c:288\n   #2: ffff88802a5ab8e8\
  \ (btrfs-tree-00){++++}-{3:3}, at: __btrfs_tree_lock+0x3c/0x2a0 fs/btrfs/locking.c:198\n\
  \n  stack backtrace:\n  CPU: 0 PID: 13257 Comm: syz-executor.2 Not tainted 6.5.0-rc7-syzkaller-00024-g93f5de5f648d\
  \ #0\n  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS\
  \ Google 07/26/2023\n  Call Trace:\n   <TASK>\n   __dump_stack lib/dump_stack.c:88\
  \ [inline]\n   dump_stack_lvl+0x1e7/0x2d0 lib/dump_stack.c:106\n   check_noncircular+0x375/0x4a0\
  \ kernel/locking/lockdep.c:2195\n   check_prev_add kernel/locking/lockdep.c:3142\
  \ [inline]\n   check_prevs_add kernel/locking/lockdep.c:3261 [inline]\n   validate_chain\
  \ kernel/locking/lockdep.c:3876 [inline]\n   __lock_acquire+0x39ff/0x7f70 kernel/locking/lockdep.c:5144\n\
  \   lock_acquire+0x1e3/0x520 kernel/locking/lockdep.c:5761\n   __mutex_lock_common+0x1d8/0x2530\
  \ kernel/locking/mutex.c:603\n   __mutex_lock kernel/locking/mutex.c:747 [inline]\n\
  \   mutex_lock_nested+0x1b/0x20 kernel/locking/mutex.c:799\n   __btrfs_release_delayed_node+0x9a/0xaa0\
  \ fs/btrfs/delayed-inode.c:256\n   btrfs_release_delayed_node fs/btrfs/delayed-inode.c:281\
  \ [inline]\n   __btrfs_run_delayed_items+0x2b5/0x430 fs/btrfs/delayed-inode.c:1156\n\
  \   btrfs_commit_transaction+0x859/0x2ff0 fs/btrfs/transaction.c:2276\n   btrfs_sync_file+0xf56/0x1330\
  \ fs/btrfs/file.c:1988\n   vfs_fsync_range fs/sync.c:188 [inline]\n   vfs_fsync\
  \ fs/sync.c:202 [inline]\n   do_fsync fs/sync.c:212 [inline]\n   __do_sys_fsync\
  \ fs/sync.c:220 [inline]\n   __se_sys_fsync fs/sync.c:218 [inline]\n   __x64_sys_fsync+0x196/0x1e0\
  \ fs/sync.c:218\n   do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n   do_syscall_64+0x41/0xc0\
  \ arch/x86/entry/common.c:80\n   entry_SYSCALL_64_after_hwframe+0x63/0xcd\n  RIP:\
  \ 0033:0x7f3ad047cae9\n  Code: 28 00 00 00 75 (...)\n  RSP: 002b:00007f3ad12510c8\
  \ EFLAGS: 00000246 ORIG_RAX: 000000000000004a\n  RAX: ffffffffffffffda RBX: 00007f3ad059bf80\
  \ RCX: 00007f3ad047cae9\n  RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000005\n\
  \  RBP: 00007f3ad04c847a R08: 0000000000000000 R09: 0000000000000000\n  R10: 0000000000000000\
  \ R11: 0000000000000246 R12: 0000000000000000\n  R13: 000000000000000b R14: 00007f3ad059bf80\
  \ R15: 00007ffe56af92f8\n   </TASK>\n  ------------[ cut here ]------------\n\n\
  Fix this by releasing the path before releasing the delayed node in the\nerror path\
  \ at __btrfs_run_delayed_items().\n\nReported-by: syzbot+a379155f07c134ea9879@syzkaller.appspotmail.com\n\
  Link: https://lore.kernel.org/linux-btrfs/000000000000abba27060403b5bd@google.com/\n\
  CC: stable@vger.kernel.org # 4.14+\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\n\
  Signed-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 1
covered_count: 1
