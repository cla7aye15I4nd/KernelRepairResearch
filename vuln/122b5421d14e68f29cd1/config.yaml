id: 122b5421d14e68f29cd1
bug_link: https://syzkaller.appspot.com/bug?extid=122b5421d14e68f29cd1
title: possible deadlock in bpf_lru_push_free
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 492e0d0d6f2eb4badfd2868addf9da0f651eba0e
fix_commit: b9aff38de2cb166476988020428985c5f7412ffc
datetime: '2020-02-19T16:01:25-08:00'
fix_commit_message: "bpf: Fix a potential deadlock with bpf_map_do_batch\n\nCommit\
  \ 057996380a42 (\"bpf: Add batch ops to all htab bpf map\")\nadded lookup_and_delete\
  \ batch operation for hash table.\nThe current implementation has bpf_lru_push_free()\
  \ inside\nthe bucket lock, which may cause a deadlock.\n\nsyzbot reports:\n   ->\
  \ #2 (&htab->buckets[i].lock#2){....}:\n       __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110\
  \ [inline]\n       _raw_spin_lock_irqsave+0x95/0xcd kernel/locking/spinlock.c:159\n\
  \       htab_lru_map_delete_node+0xce/0x2f0 kernel/bpf/hashtab.c:593\n       __bpf_lru_list_shrink_inactive\
  \ kernel/bpf/bpf_lru_list.c:220 [inline]\n       __bpf_lru_list_shrink+0xf9/0x470\
  \ kernel/bpf/bpf_lru_list.c:266\n       bpf_lru_list_pop_free_to_local kernel/bpf/bpf_lru_list.c:340\
  \ [inline]\n       bpf_common_lru_pop_free kernel/bpf/bpf_lru_list.c:447 [inline]\n\
  \       bpf_lru_pop_free+0x87c/0x1670 kernel/bpf/bpf_lru_list.c:499\n       prealloc_lru_pop+0x2c/0xa0\
  \ kernel/bpf/hashtab.c:132\n       __htab_lru_percpu_map_update_elem+0x67e/0xa90\
  \ kernel/bpf/hashtab.c:1069\n       bpf_percpu_hash_update+0x16e/0x210 kernel/bpf/hashtab.c:1585\n\
  \       bpf_map_update_value.isra.0+0x2d7/0x8e0 kernel/bpf/syscall.c:181\n     \
  \  generic_map_update_batch+0x41f/0x610 kernel/bpf/syscall.c:1319\n       bpf_map_do_batch+0x3f5/0x510\
  \ kernel/bpf/syscall.c:3348\n       __do_sys_bpf+0x9b7/0x41e0 kernel/bpf/syscall.c:3460\n\
  \       __se_sys_bpf kernel/bpf/syscall.c:3355 [inline]\n       __x64_sys_bpf+0x73/0xb0\
  \ kernel/bpf/syscall.c:3355\n       do_syscall_64+0xfa/0x790 arch/x86/entry/common.c:294\n\
  \       entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\n   -> #0 (&loc_l->lock){....}:\n\
  \       check_prev_add kernel/locking/lockdep.c:2475 [inline]\n       check_prevs_add\
  \ kernel/locking/lockdep.c:2580 [inline]\n       validate_chain kernel/locking/lockdep.c:2970\
  \ [inline]\n       __lock_acquire+0x2596/0x4a00 kernel/locking/lockdep.c:3954\n\
  \       lock_acquire+0x190/0x410 kernel/locking/lockdep.c:4484\n       __raw_spin_lock_irqsave\
  \ include/linux/spinlock_api_smp.h:110 [inline]\n       _raw_spin_lock_irqsave+0x95/0xcd\
  \ kernel/locking/spinlock.c:159\n       bpf_common_lru_push_free kernel/bpf/bpf_lru_list.c:516\
  \ [inline]\n       bpf_lru_push_free+0x250/0x5b0 kernel/bpf/bpf_lru_list.c:555\n\
  \       __htab_map_lookup_and_delete_batch+0x8d4/0x1540 kernel/bpf/hashtab.c:1374\n\
  \       htab_lru_map_lookup_and_delete_batch+0x34/0x40 kernel/bpf/hashtab.c:1491\n\
  \       bpf_map_do_batch+0x3f5/0x510 kernel/bpf/syscall.c:3348\n       __do_sys_bpf+0x1f7d/0x41e0\
  \ kernel/bpf/syscall.c:3456\n       __se_sys_bpf kernel/bpf/syscall.c:3355 [inline]\n\
  \       __x64_sys_bpf+0x73/0xb0 kernel/bpf/syscall.c:3355\n       do_syscall_64+0xfa/0x790\
  \ arch/x86/entry/common.c:294\n       entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  \n    Possible unsafe locking scenario:\n\n          CPU0                    CPU2\n\
  \          ----                    ----\n     lock(&htab->buckets[i].lock#2);\n\
  \                                  lock(&l->lock);\n                           \
  \       lock(&htab->buckets[i].lock#2);\n     lock(&loc_l->lock);\n\n    *** DEADLOCK\
  \ ***\n\nTo fix the issue, for htab_lru_map_lookup_and_delete_batch() in CPU0,\n\
  let us do bpf_lru_push_free() out of the htab bucket lock. This can\navoid the above\
  \ deadlock scenario.\n\nFixes: 057996380a42 (\"bpf: Add batch ops to all htab bpf\
  \ map\")\nReported-by: syzbot+a38ff3d9356388f2fb83@syzkaller.appspotmail.com\nReported-by:\
  \ syzbot+122b5421d14e68f29cd1@syzkaller.appspotmail.com\nSuggested-by: Hillf Danton\
  \ <hdanton@sina.com>\nSuggested-by: Martin KaFai Lau <kafai@fb.com>\nSigned-off-by:\
  \ Yonghong Song <yhs@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n\
  Reviewed-by: Jakub Sitnicki <jakub@cloudflare.com>\nAcked-by: Brian Vazquez <brianvv@google.com>\n\
  Acked-by: Martin KaFai Lau <kafai@fb.com>\nLink: https://lore.kernel.org/bpf/20200219234757.3544014-1-yhs@fb.com\n"
submodule:
- kernel/bpf
hunk_count: 5
covered_count: 5
