id: a504cb5bae4fe117ba94
bug_link: https://syzkaller.appspot.com/bug?extid=a504cb5bae4fe117ba94
title: kernel BUG in alloc_hugetlb_folio_reserve
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 50f4d2ba26d5c3a4687ae0569be3bbf1c8f0cbed
fix_commit: c39b87456411a7e4d97a0f6384ca31f2abb1a4b7
datetime: '2025-07-09T21:07:53-07:00'
fix_commit_message: "mm/hugetlb: don't crash when allocating a folio if there are\
  \ no resv\n\nThere are cases when we try to pin a folio but discover that it has\
  \ not\nbeen faulted-in.  So, we try to allocate it in memfd_alloc_folio() but\n\
  there is a chance that we might encounter a fatal crash/failure\n(VM_BUG_ON(!h->resv_huge_pages)\
  \ in alloc_hugetlb_folio_reserve()) if there\nare no active reservations at that\
  \ instant.  This issue was reported by\nsyzbot:\n\nkernel BUG at mm/hugetlb.c:2403!\n\
  Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN NOPTI\nCPU: 0 UID: 0 PID: 5315\
  \ Comm: syz.0.0 Not tainted\n6.13.0-rc5-syzkaller-00161-g63676eefb7a0 #0\nHardware\
  \ name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS\n1.16.3-debian-1.16.3-2~bpo12+1\
  \ 04/01/2014\nRIP: 0010:alloc_hugetlb_folio_reserve+0xbc/0xc0 mm/hugetlb.c:2403\n\
  Code: 1f eb 05 e8 56 18 a0 ff 48 c7 c7 40 56 61 8e e8 ba 21 cc 09 4c 89\nf0 5b 41\
  \ 5c 41 5e 41 5f 5d c3 cc cc cc cc e8 35 18 a0 ff 90 <0f> 0b 66\n90 90 90 90 90\
  \ 90 90 90 90 90 90 90 90 90 90 90 90 f3 0f\nRSP: 0018:ffffc9000d3d77f8 EFLAGS:\
  \ 00010087\nRAX: ffffffff81ff6beb RBX: 0000000000000000 RCX: 0000000000100000\n\
  RDX: ffffc9000e51a000 RSI: 00000000000003ec RDI: 00000000000003ed\nRBP: 1ffffffff34810d9\
  \ R08: ffffffff81ff6ba3 R09: 1ffffd4000093005\nR10: dffffc0000000000 R11: fffff94000093006\
  \ R12: dffffc0000000000\nR13: dffffc0000000000 R14: ffffea0000498000 R15: ffffffff9a4086c8\n\
  FS:  00007f77ac12e6c0(0000) GS:ffff88801fc00000(0000)\nknlGS:0000000000000000\n\
  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007f77ab54b170 CR3: 0000000040b70000\
  \ CR4: 0000000000352ef0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n\
  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n\
  \ <TASK>\n memfd_alloc_folio+0x1bd/0x370 mm/memfd.c:88\n memfd_pin_folios+0xf10/0x1570\
  \ mm/gup.c:3750\n udmabuf_pin_folios drivers/dma-buf/udmabuf.c:346 [inline]\n udmabuf_create+0x70e/0x10c0\
  \ drivers/dma-buf/udmabuf.c:443\n udmabuf_ioctl_create drivers/dma-buf/udmabuf.c:495\
  \ [inline]\n udmabuf_ioctl+0x301/0x4e0 drivers/dma-buf/udmabuf.c:526\n vfs_ioctl\
  \ fs/ioctl.c:51 [inline]\n __do_sys_ioctl fs/ioctl.c:906 [inline]\n __se_sys_ioctl+0xf5/0x170\
  \ fs/ioctl.c:892\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0xf3/0x230\
  \ arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\nTherefore,\
  \ prevent the above crash by removing the VM_BUG_ON() as there is\nno need to crash\
  \ the system in this situation and instead we could just\nfail the allocation request.\n\
  \nFurthermore, as described above, the specific situation where this happens\nis\
  \ when we try to pin memfd folios before they are faulted-in.  Although,\nthis is\
  \ a valid thing to do, it is not the regular or the common use-case.\nLet us consider\
  \ the following scenarios:\n\n1) hugetlbfs_file_mmap()\n    memfd_alloc_folio()\n\
  \    hugetlb_fault()\n\n2) memfd_alloc_folio()\n    hugetlbfs_file_mmap()\n    hugetlb_fault()\n\
  \n3) hugetlbfs_file_mmap()\n    hugetlb_fault()\n        alloc_hugetlb_folio()\n\
  \n3) is the most common use-case where first a memfd is allocated followed\nby mmap(),\
  \ user writes/updates and then the relevant folios are pinned\n(memfd_pin_folios()).\
  \  The BUG this patch is fixing occurs in 2) because\nwe try to pin the folios before\
  \ hugetlbfs_file_mmap() is called.  So, in\nthis situation we try to allocate the\
  \ folios before pinning them but since\nwe did not make any reservations, resv_huge_pages\
  \ would be 0, leading to\nthis issue.\n\nLink: https://lkml.kernel.org/r/20250626191116.1377761-1-vivek.kasireddy@intel.com\n\
  Fixes: 26a8ea80929c (\"mm/hugetlb: fix memfd_pin_folios resv_huge_pages leak\")\n\
  Reported-by: syzbot+a504cb5bae4fe117ba94@syzkaller.appspotmail.com\nSigned-off-by:\
  \ Vivek Kasireddy <vivek.kasireddy@intel.com>\nCloses: https://syzkaller.appspot.com/bug?extid=a504cb5bae4fe117ba94\n\
  Closes: https://lore.kernel.org/all/677928b5.050a0220.3b53b0.004d.GAE@google.com/T/\n\
  Acked-by: Oscar Salvador <osalvador@suse.de>\nCc: Steve Sistare <steven.sistare@oracle.com>\n\
  Cc: Muchun Song <muchun.song@linux.dev>\nCc: David Hildenbrand <david@redhat.com>\n\
  Cc: Anshuman Khandual <anshuman.khandual@arm.com>\nSigned-off-by: Andrew Morton\
  \ <akpm@linux-foundation.org>\n"
submodule:
- mm
hunk_count: 1
covered_count: 1
