id: 39b64425f91b5aab714d
bug_link: https://syzkaller.appspot.com/bug?extid=39b64425f91b5aab714d
title: 'KASAN: use-after-free Write in bpf_link_put'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: beecf11bc2188067824591612151c4dc6ec383c7
fix_commit: 138c67677ff5ac0bce7131033c39d52a81e87a60
datetime: '2020-05-01T15:13:05-07:00'
fix_commit_message: 'bpf: Fix use-after-free of bpf_link when priming half-fails


  If bpf_link_prime() succeeds to allocate new anon file, but then fails to

  allocate ID for it, link priming is considered to be failed and user is

  supposed ot be able to directly kfree() bpf_link, because it was never exposed

  to user-space.


  But at that point file already keeps a pointer to bpf_link and will eventually

  call bpf_link_release(), so if bpf_link was kfree()''d by caller, that would

  lead to use-after-free.


  Fix this by first allocating ID and only then allocating file. Adding ID to

  link_idr is ok, because link at that point still doesn''t have its ID set, so

  no user-space process can create a new FD for it.


  Fixes: a3b80e107894 ("bpf: Allocate ID for bpf_link")

  Reported-by: syzbot+39b64425f91b5aab714d@syzkaller.appspotmail.com

  Suggested-by: Martin KaFai Lau <kafai@fb.com>

  Signed-off-by: Andrii Nakryiko <andriin@fb.com>

  Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  Acked-by: Martin KaFai Lau <kafai@fb.com>

  Link: https://lore.kernel.org/bpf/20200501185622.3088964-1-andriin@fb.com

  '
submodule:
- kernel/bpf
hunk_count: 1
covered_count: 0
