id: 7a8ba368b47fdefca61e
bug_link: https://syzkaller.appspot.com/bug?extid=7a8ba368b47fdefca61e
title: 'KASAN: use-after-free Read in path_lookupat'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 27602e2c44da4091bef99e6c877e20c78b7f6e81
fix_commit: 1da6c4d9140cb7c13e87667dc4e1488d6c8fc10f
datetime: '2019-03-26T01:38:49+01:00'
fix_commit_message: "bpf: fix use after free in bpf_evict_inode\n\nsyzkaller was able\
  \ to generate the following UAF in bpf:\n\n  BUG: KASAN: use-after-free in lookup_last\
  \ fs/namei.c:2269 [inline]\n  BUG: KASAN: use-after-free in path_lookupat.isra.43+0x9f8/0xc00\
  \ fs/namei.c:2318\n  Read of size 1 at addr ffff8801c4865c47 by task syz-executor2/9423\n\
  \n  CPU: 0 PID: 9423 Comm: syz-executor2 Not tainted 4.20.0-rc1-next-20181109+\n\
  \  #110\n  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS\n\
  \  Google 01/01/2011\n  Call Trace:\n    __dump_stack lib/dump_stack.c:77 [inline]\n\
  \    dump_stack+0x244/0x39d lib/dump_stack.c:113\n    print_address_description.cold.7+0x9/0x1ff\
  \ mm/kasan/report.c:256\n    kasan_report_error mm/kasan/report.c:354 [inline]\n\
  \    kasan_report.cold.8+0x242/0x309 mm/kasan/report.c:412\n    __asan_report_load1_noabort+0x14/0x20\
  \ mm/kasan/report.c:430\n    lookup_last fs/namei.c:2269 [inline]\n    path_lookupat.isra.43+0x9f8/0xc00\
  \ fs/namei.c:2318\n    filename_lookup+0x26a/0x520 fs/namei.c:2348\n    user_path_at_empty+0x40/0x50\
  \ fs/namei.c:2608\n    user_path include/linux/namei.h:62 [inline]\n    do_mount+0x180/0x1ff0\
  \ fs/namespace.c:2980\n    ksys_mount+0x12d/0x140 fs/namespace.c:3258\n    __do_sys_mount\
  \ fs/namespace.c:3272 [inline]\n    __se_sys_mount fs/namespace.c:3269 [inline]\n\
  \    __x64_sys_mount+0xbe/0x150 fs/namespace.c:3269\n    do_syscall_64+0x1b9/0x820\
  \ arch/x86/entry/common.c:290\n    entry_SYSCALL_64_after_hwframe+0x49/0xbe\n  RIP:\
  \ 0033:0x457569\n  Code: fd b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89\
  \ f8 48 89 f7\n  48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d\
  \ 01 f0 ff\n  ff 0f 83 cb b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00\n  RSP: 002b:00007fde6ed96c78\
  \ EFLAGS: 00000246 ORIG_RAX: 00000000000000a5\n  RAX: ffffffffffffffda RBX: 0000000000000005\
  \ RCX: 0000000000457569\n  RDX: 0000000020000040 RSI: 0000000020000000 RDI: 0000000000000000\n\
  \  RBP: 000000000072bf00 R08: 0000000020000340 R09: 0000000000000000\n  R10: 0000000000200000\
  \ R11: 0000000000000246 R12: 00007fde6ed976d4\n  R13: 00000000004c2c24 R14: 00000000004d4990\
  \ R15: 00000000ffffffff\n\n  Allocated by task 9424:\n    save_stack+0x43/0xd0 mm/kasan/kasan.c:448\n\
  \    set_track mm/kasan/kasan.c:460 [inline]\n    kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553\n\
  \    __do_kmalloc mm/slab.c:3722 [inline]\n    __kmalloc_track_caller+0x157/0x760\
  \ mm/slab.c:3737\n    kstrdup+0x39/0x70 mm/util.c:49\n    bpf_symlink+0x26/0x140\
  \ kernel/bpf/inode.c:356\n    vfs_symlink+0x37a/0x5d0 fs/namei.c:4127\n    do_symlinkat+0x242/0x2d0\
  \ fs/namei.c:4154\n    __do_sys_symlink fs/namei.c:4173 [inline]\n    __se_sys_symlink\
  \ fs/namei.c:4171 [inline]\n    __x64_sys_symlink+0x59/0x80 fs/namei.c:4171\n  \
  \  do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290\n    entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  \n  Freed by task 9425:\n    save_stack+0x43/0xd0 mm/kasan/kasan.c:448\n    set_track\
  \ mm/kasan/kasan.c:460 [inline]\n    __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521\n\
  \    kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528\n    __cache_free mm/slab.c:3498\
  \ [inline]\n    kfree+0xcf/0x230 mm/slab.c:3817\n    bpf_evict_inode+0x11f/0x150\
  \ kernel/bpf/inode.c:565\n    evict+0x4b9/0x980 fs/inode.c:558\n    iput_final fs/inode.c:1550\
  \ [inline]\n    iput+0x674/0xa90 fs/inode.c:1576\n    do_unlinkat+0x733/0xa30 fs/namei.c:4069\n\
  \    __do_sys_unlink fs/namei.c:4110 [inline]\n    __se_sys_unlink fs/namei.c:4108\
  \ [inline]\n    __x64_sys_unlink+0x42/0x50 fs/namei.c:4108\n    do_syscall_64+0x1b9/0x820\
  \ arch/x86/entry/common.c:290\n    entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\n\
  In this scenario path lookup under RCU is racing with the final\nunlink in case\
  \ of symlinks. As Linus puts it in his analysis:\n\n  [...] We actually RCU-delay\
  \ the inode freeing itself, but\n  when we do the final iput(), the \"evict()\"\
  \ function is called\n  synchronously. Now, the simple fix would seem to just RCU-delay\n\
  \  the kfree() of the symlink data in bpf_evict_inode(). Maybe\n  that's the right\
  \ thing to do. [...]\n\nAl suggested to piggy-back on the ->destroy_inode() callback\
  \ in\norder to implement RCU deferral there which can then kfree() the\ninode->i_link\
  \ eventually right before putting inode back into\ninode cache. By reusing free_inode_nonrcu()\
  \ from there we can\navoid the need for our own inode cache and just reuse generic\n\
  one as we currently do.\n\nAnd in-fact on top of all this we should just get rid\
  \ of the\nbpf_evict_inode() entirely. This means truncate_inode_pages_final()\n\
  and clear_inode() will then simply be called by the fs core via\nevict(). Dropping\
  \ the reference should really only be done when\ninode is unhashed and nothing reachable\
  \ anymore, so it's better\nalso moved into the final ->destroy_inode() callback.\n\
  \nFixes: 0f98621bef5d (\"bpf, inode: add support for symlinks and fix mtime/ctime\"\
  )\nReported-by: syzbot+fb731ca573367b7f6564@syzkaller.appspotmail.com\nReported-by:\
  \ syzbot+a13e5ead792d6df37818@syzkaller.appspotmail.com\nReported-by: syzbot+7a8ba368b47fdefca61e@syzkaller.appspotmail.com\n\
  Suggested-by: Al Viro <viro@zeniv.linux.org.uk>\nAnalyzed-by: Linus Torvalds <torvalds@linux-foundation.org>\n\
  Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov\
  \ <ast@kernel.org>\nAcked-by: Linus Torvalds <torvalds@linux-foundation.org>\nAcked-by:\
  \ Al Viro <viro@zeniv.linux.org.uk>\nLink: https://lore.kernel.org/lkml/0000000000006946d2057bbd0eef@google.com/T/\n"
submodule:
- kernel/bpf
hunk_count: 2
covered_count: 2
