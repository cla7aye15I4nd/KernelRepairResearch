id: 0f7e7e5e2f4f40fa89c0
bug_link: https://syzkaller.appspot.com/bug?extid=0f7e7e5e2f4f40fa89c0
title: 'KASAN: use-after-free Read in bcm_rx_handler'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: dda2626b86c2c1813b7bfdd10d2fdd849611fc97
fix_commit: d5f9023fa61ee8b94f37a93f08e94b136cf1e463
datetime: '2021-06-19T23:47:32+02:00'
fix_commit_message: 'can: bcm: delay release of struct bcm_op after synchronize_rcu()


  can_rx_register() callbacks may be called concurrently to the call to

  can_rx_unregister(). The callbacks and callback data, though, are

  protected by RCU and the struct sock reference count.


  So the callback data is really attached to the life of sk, meaning

  that it should be released on sk_destruct. However, bcm_remove_op()

  calls tasklet_kill(), and RCU callbacks may be called under RCU

  softirq, so that cannot be used on kernels before the introduction of

  HRTIMER_MODE_SOFT.


  However, bcm_rx_handler() is called under RCU protection, so after

  calling can_rx_unregister(), we may call synchronize_rcu() in order to

  wait for any RCU read-side critical sections to finish. That is,

  bcm_rx_handler() won''t be called anymore for those ops. So, we only

  free them, after we do that synchronize_rcu().


  Fixes: ffd980f976e7 ("[CAN]: Add broadcast manager (bcm) protocol")

  Link: https://lore.kernel.org/r/20210619161813.2098382-1-cascardo@canonical.com

  Cc: linux-stable <stable@vger.kernel.org>

  Reported-by: syzbot+0f7e7e5e2f4f40fa89c0@syzkaller.appspotmail.com

  Reported-by: Norbert Slusarek <nslusarek@gmx.net>

  Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>

  Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>

  Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

  '
submodule:
- net/can
hunk_count: 2
covered_count: 1
