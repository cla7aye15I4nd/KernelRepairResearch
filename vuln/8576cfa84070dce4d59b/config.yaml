id: 8576cfa84070dce4d59b
bug_link: https://syzkaller.appspot.com/bug?extid=8576cfa84070dce4d59b
title: possible deadlock in btrfs_log_inode
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: cebae292e0c32a228e8f2219c270a7237be24a6a
fix_commit: d1825752e3074b5ff8d7f6016160e2b7c5c367ca
datetime: '2024-06-25T00:33:47+02:00'
fix_commit_message: "btrfs: use NOFS context when getting inodes during logging and\
  \ log replay\n\nDuring inode logging (and log replay too), we are holding a transaction\n\
  handle and we often need to call btrfs_iget(), which will read an inode\nfrom its\
  \ subvolume btree if it's not loaded in memory and that results in\nallocating an\
  \ inode with GFP_KERNEL semantics at the btrfs_alloc_inode()\ncallback - and this\
  \ may recurse into the filesystem in case we are under\nmemory pressure and attempt\
  \ to commit the current transaction, resulting\nin a deadlock since the logging\
  \ (or log replay) task is holding a\ntransaction handle open.\n\nSyzbot reported\
  \ this with the following stack traces:\n\n  WARNING: possible circular locking\
  \ dependency detected\n  6.10.0-rc2-syzkaller-00361-g061d1af7b030 #0 Not tainted\n\
  \  ------------------------------------------------------\n  syz-executor.1/9919\
  \ is trying to acquire lock:\n  ffffffff8dd3aac0 (fs_reclaim){+.+.}-{0:0}, at: might_alloc\
  \ include/linux/sched/mm.h:334 [inline]\n  ffffffff8dd3aac0 (fs_reclaim){+.+.}-{0:0},\
  \ at: slab_pre_alloc_hook mm/slub.c:3891 [inline]\n  ffffffff8dd3aac0 (fs_reclaim){+.+.}-{0:0},\
  \ at: slab_alloc_node mm/slub.c:3981 [inline]\n  ffffffff8dd3aac0 (fs_reclaim){+.+.}-{0:0},\
  \ at: kmem_cache_alloc_lru_noprof+0x58/0x2f0 mm/slub.c:4020\n\n  but task is already\
  \ holding lock:\n  ffff88804b569358 (&ei->log_mutex){+.+.}-{3:3}, at: btrfs_log_inode+0x39c/0x4660\
  \ fs/btrfs/tree-log.c:6481\n\n  which lock already depends on the new lock.\n\n\
  \  the existing dependency chain (in reverse order) is:\n\n  -> #3 (&ei->log_mutex){+.+.}-{3:3}:\n\
  \         __mutex_lock_common kernel/locking/mutex.c:608 [inline]\n         __mutex_lock+0x175/0x9c0\
  \ kernel/locking/mutex.c:752\n         btrfs_log_inode+0x39c/0x4660 fs/btrfs/tree-log.c:6481\n\
  \         btrfs_log_inode_parent+0x8cb/0x2a90 fs/btrfs/tree-log.c:7079\n       \
  \  btrfs_log_dentry_safe+0x59/0x80 fs/btrfs/tree-log.c:7180\n         btrfs_sync_file+0x9c1/0xe10\
  \ fs/btrfs/file.c:1959\n         vfs_fsync_range+0x141/0x230 fs/sync.c:188\n   \
  \      generic_write_sync include/linux/fs.h:2794 [inline]\n         btrfs_do_write_iter+0x584/0x10c0\
  \ fs/btrfs/file.c:1705\n         new_sync_write fs/read_write.c:497 [inline]\n \
  \        vfs_write+0x6b6/0x1140 fs/read_write.c:590\n         ksys_write+0x12f/0x260\
  \ fs/read_write.c:643\n         do_syscall_32_irqs_on arch/x86/entry/common.c:165\
  \ [inline]\n         __do_fast_syscall_32+0x73/0x120 arch/x86/entry/common.c:386\n\
  \         do_fast_syscall_32+0x32/0x80 arch/x86/entry/common.c:411\n         entry_SYSENTER_compat_after_hwframe+0x84/0x8e\n\
  \n  -> #2 (btrfs_trans_num_extwriters){++++}-{0:0}:\n         join_transaction+0x164/0xf40\
  \ fs/btrfs/transaction.c:315\n         start_transaction+0x427/0x1a70 fs/btrfs/transaction.c:700\n\
  \         btrfs_commit_super+0xa1/0x110 fs/btrfs/disk-io.c:4170\n         close_ctree+0xcb0/0xf90\
  \ fs/btrfs/disk-io.c:4324\n         generic_shutdown_super+0x159/0x3d0 fs/super.c:642\n\
  \         kill_anon_super+0x3a/0x60 fs/super.c:1226\n         btrfs_kill_super+0x3b/0x50\
  \ fs/btrfs/super.c:2096\n         deactivate_locked_super+0xbe/0x1a0 fs/super.c:473\n\
  \         deactivate_super+0xde/0x100 fs/super.c:506\n         cleanup_mnt+0x222/0x450\
  \ fs/namespace.c:1267\n         task_work_run+0x14e/0x250 kernel/task_work.c:180\n\
  \         resume_user_mode_work include/linux/resume_user_mode.h:50 [inline]\n \
  \        exit_to_user_mode_loop kernel/entry/common.c:114 [inline]\n         exit_to_user_mode_prepare\
  \ include/linux/entry-common.h:328 [inline]\n         __syscall_exit_to_user_mode_work\
  \ kernel/entry/common.c:207 [inline]\n         syscall_exit_to_user_mode+0x278/0x2a0\
  \ kernel/entry/common.c:218\n         __do_fast_syscall_32+0x80/0x120 arch/x86/entry/common.c:389\n\
  \         do_fast_syscall_32+0x32/0x80 arch/x86/entry/common.c:411\n         entry_SYSENTER_compat_after_hwframe+0x84/0x8e\n\
  \n  -> #1 (btrfs_trans_num_writers){++++}-{0:0}:\n         __lock_release kernel/locking/lockdep.c:5468\
  \ [inline]\n         lock_release+0x33e/0x6c0 kernel/locking/lockdep.c:5774\n  \
  \       percpu_up_read include/linux/percpu-rwsem.h:99 [inline]\n         __sb_end_write\
  \ include/linux/fs.h:1650 [inline]\n         sb_end_intwrite include/linux/fs.h:1767\
  \ [inline]\n         __btrfs_end_transaction+0x5ca/0x920 fs/btrfs/transaction.c:1071\n\
  \         btrfs_commit_inode_delayed_inode+0x228/0x330 fs/btrfs/delayed-inode.c:1301\n\
  \         btrfs_evict_inode+0x960/0xe80 fs/btrfs/inode.c:5291\n         evict+0x2ed/0x6c0\
  \ fs/inode.c:667\n         iput_final fs/inode.c:1741 [inline]\n         iput.part.0+0x5a8/0x7f0\
  \ fs/inode.c:1767\n         iput+0x5c/0x80 fs/inode.c:1757\n         dentry_unlink_inode+0x295/0x480\
  \ fs/dcache.c:400\n         __dentry_kill+0x1d0/0x600 fs/dcache.c:603\n        \
  \ dput.part.0+0x4b1/0x9b0 fs/dcache.c:845\n         dput+0x1f/0x30 fs/dcache.c:835\n\
  \         ovl_stack_put+0x60/0x90 fs/overlayfs/util.c:132\n         ovl_destroy_inode+0xc6/0x190\
  \ fs/overlayfs/super.c:182\n         destroy_inode+0xc4/0x1b0 fs/inode.c:311\n \
  \        iput_final fs/inode.c:1741 [inline]\n         iput.part.0+0x5a8/0x7f0 fs/inode.c:1767\n\
  \         iput+0x5c/0x80 fs/inode.c:1757\n         dentry_unlink_inode+0x295/0x480\
  \ fs/dcache.c:400\n         __dentry_kill+0x1d0/0x600 fs/dcache.c:603\n        \
  \ shrink_kill fs/dcache.c:1048 [inline]\n         shrink_dentry_list+0x140/0x5d0\
  \ fs/dcache.c:1075\n         prune_dcache_sb+0xeb/0x150 fs/dcache.c:1156\n     \
  \    super_cache_scan+0x32a/0x550 fs/super.c:221\n         do_shrink_slab+0x44f/0x11c0\
  \ mm/shrinker.c:435\n         shrink_slab_memcg mm/shrinker.c:548 [inline]\n   \
  \      shrink_slab+0xa87/0x1310 mm/shrinker.c:626\n         shrink_one+0x493/0x7c0\
  \ mm/vmscan.c:4790\n         shrink_many mm/vmscan.c:4851 [inline]\n         lru_gen_shrink_node+0x89f/0x1750\
  \ mm/vmscan.c:4951\n         shrink_node mm/vmscan.c:5910 [inline]\n         kswapd_shrink_node\
  \ mm/vmscan.c:6720 [inline]\n         balance_pgdat+0x1105/0x1970 mm/vmscan.c:6911\n\
  \         kswapd+0x5ea/0xbf0 mm/vmscan.c:7180\n         kthread+0x2c1/0x3a0 kernel/kthread.c:389\n\
  \         ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147\n         ret_from_fork_asm+0x1a/0x30\
  \ arch/x86/entry/entry_64.S:244\n\n  -> #0 (fs_reclaim){+.+.}-{0:0}:\n         check_prev_add\
  \ kernel/locking/lockdep.c:3134 [inline]\n         check_prevs_add kernel/locking/lockdep.c:3253\
  \ [inline]\n         validate_chain kernel/locking/lockdep.c:3869 [inline]\n   \
  \      __lock_acquire+0x2478/0x3b30 kernel/locking/lockdep.c:5137\n         lock_acquire\
  \ kernel/locking/lockdep.c:5754 [inline]\n         lock_acquire+0x1b1/0x560 kernel/locking/lockdep.c:5719\n\
  \         __fs_reclaim_acquire mm/page_alloc.c:3801 [inline]\n         fs_reclaim_acquire+0x102/0x160\
  \ mm/page_alloc.c:3815\n         might_alloc include/linux/sched/mm.h:334 [inline]\n\
  \         slab_pre_alloc_hook mm/slub.c:3891 [inline]\n         slab_alloc_node\
  \ mm/slub.c:3981 [inline]\n         kmem_cache_alloc_lru_noprof+0x58/0x2f0 mm/slub.c:4020\n\
  \         btrfs_alloc_inode+0x118/0xb20 fs/btrfs/inode.c:8411\n         alloc_inode+0x5d/0x230\
  \ fs/inode.c:261\n         iget5_locked fs/inode.c:1235 [inline]\n         iget5_locked+0x1c9/0x2c0\
  \ fs/inode.c:1228\n         btrfs_iget_locked fs/btrfs/inode.c:5590 [inline]\n \
  \        btrfs_iget_path fs/btrfs/inode.c:5607 [inline]\n         btrfs_iget+0xfb/0x230\
  \ fs/btrfs/inode.c:5636\n         add_conflicting_inode fs/btrfs/tree-log.c:5657\
  \ [inline]\n         copy_inode_items_to_log+0x1039/0x1e30 fs/btrfs/tree-log.c:5928\n\
  \         btrfs_log_inode+0xa48/0x4660 fs/btrfs/tree-log.c:6592\n         log_new_delayed_dentries\
  \ fs/btrfs/tree-log.c:6363 [inline]\n         btrfs_log_inode+0x27dd/0x4660 fs/btrfs/tree-log.c:6718\n\
  \         btrfs_log_all_parents fs/btrfs/tree-log.c:6833 [inline]\n         btrfs_log_inode_parent+0x22ba/0x2a90\
  \ fs/btrfs/tree-log.c:7141\n         btrfs_log_dentry_safe+0x59/0x80 fs/btrfs/tree-log.c:7180\n\
  \         btrfs_sync_file+0x9c1/0xe10 fs/btrfs/file.c:1959\n         vfs_fsync_range+0x141/0x230\
  \ fs/sync.c:188\n         generic_write_sync include/linux/fs.h:2794 [inline]\n\
  \         btrfs_do_write_iter+0x584/0x10c0 fs/btrfs/file.c:1705\n         do_iter_readv_writev+0x504/0x780\
  \ fs/read_write.c:741\n         vfs_writev+0x36f/0xde0 fs/read_write.c:971\n   \
  \      do_pwritev+0x1b2/0x260 fs/read_write.c:1072\n         __do_compat_sys_pwritev2\
  \ fs/read_write.c:1218 [inline]\n         __se_compat_sys_pwritev2 fs/read_write.c:1210\
  \ [inline]\n         __ia32_compat_sys_pwritev2+0x121/0x1b0 fs/read_write.c:1210\n\
  \         do_syscall_32_irqs_on arch/x86/entry/common.c:165 [inline]\n         __do_fast_syscall_32+0x73/0x120\
  \ arch/x86/entry/common.c:386\n         do_fast_syscall_32+0x32/0x80 arch/x86/entry/common.c:411\n\
  \         entry_SYSENTER_compat_after_hwframe+0x84/0x8e\n\n  other info that might\
  \ help us debug this:\n\n  Chain exists of:\n    fs_reclaim --> btrfs_trans_num_extwriters\
  \ --> &ei->log_mutex\n\n   Possible unsafe locking scenario:\n\n         CPU0  \
  \                  CPU1\n         ----                    ----\n    lock(&ei->log_mutex);\n\
  \                                 lock(btrfs_trans_num_extwriters);\n          \
  \                       lock(&ei->log_mutex);\n    lock(fs_reclaim);\n\n   *** DEADLOCK\
  \ ***\n\n  7 locks held by syz-executor.1/9919:\n   #0: ffff88802be20420 (sb_writers#23){.+.+}-{0:0},\
  \ at: do_pwritev+0x1b2/0x260 fs/read_write.c:1072\n   #1: ffff888065c0f8f0 (&sb->s_type->i_mutex_key#33){++++}-{3:3},\
  \ at: inode_lock include/linux/fs.h:791 [inline]\n   #1: ffff888065c0f8f0 (&sb->s_type->i_mutex_key#33){++++}-{3:3},\
  \ at: btrfs_inode_lock+0xc8/0x110 fs/btrfs/inode.c:385\n   #2: ffff888065c0f778\
  \ (&ei->i_mmap_lock){++++}-{3:3}, at: btrfs_inode_lock+0xee/0x110 fs/btrfs/inode.c:388\n\
  \   #3: ffff88802be20610 (sb_internal#4){.+.+}-{0:0}, at: btrfs_sync_file+0x95b/0xe10\
  \ fs/btrfs/file.c:1952\n   #4: ffff8880546323f0 (btrfs_trans_num_writers){++++}-{0:0},\
  \ at: join_transaction+0x430/0xf40 fs/btrfs/transaction.c:290\n   #5: ffff888054632418\
  \ (btrfs_trans_num_extwriters){++++}-{0:0}, at: join_transaction+0x430/0xf40 fs/btrfs/transaction.c:290\n\
  \   #6: ffff88804b569358 (&ei->log_mutex){+.+.}-{3:3}, at: btrfs_log_inode+0x39c/0x4660\
  \ fs/btrfs/tree-log.c:6481\n\n  stack backtrace:\n  CPU: 2 PID: 9919 Comm: syz-executor.1\
  \ Not tainted 6.10.0-rc2-syzkaller-00361-g061d1af7b030 #0\n  Hardware name: QEMU\
  \ Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-debian-1.16.2-1 04/01/2014\n  Call\
  \ Trace:\n   <TASK>\n   __dump_stack lib/dump_stack.c:88 [inline]\n   dump_stack_lvl+0x116/0x1f0\
  \ lib/dump_stack.c:114\n   check_noncircular+0x31a/0x400 kernel/locking/lockdep.c:2187\n\
  \   check_prev_add kernel/locking/lockdep.c:3134 [inline]\n   check_prevs_add kernel/locking/lockdep.c:3253\
  \ [inline]\n   validate_chain kernel/locking/lockdep.c:3869 [inline]\n   __lock_acquire+0x2478/0x3b30\
  \ kernel/locking/lockdep.c:5137\n   lock_acquire kernel/locking/lockdep.c:5754 [inline]\n\
  \   lock_acquire+0x1b1/0x560 kernel/locking/lockdep.c:5719\n   __fs_reclaim_acquire\
  \ mm/page_alloc.c:3801 [inline]\n   fs_reclaim_acquire+0x102/0x160 mm/page_alloc.c:3815\n\
  \   might_alloc include/linux/sched/mm.h:334 [inline]\n   slab_pre_alloc_hook mm/slub.c:3891\
  \ [inline]\n   slab_alloc_node mm/slub.c:3981 [inline]\n   kmem_cache_alloc_lru_noprof+0x58/0x2f0\
  \ mm/slub.c:4020\n   btrfs_alloc_inode+0x118/0xb20 fs/btrfs/inode.c:8411\n   alloc_inode+0x5d/0x230\
  \ fs/inode.c:261\n   iget5_locked fs/inode.c:1235 [inline]\n   iget5_locked+0x1c9/0x2c0\
  \ fs/inode.c:1228\n   btrfs_iget_locked fs/btrfs/inode.c:5590 [inline]\n   btrfs_iget_path\
  \ fs/btrfs/inode.c:5607 [inline]\n   btrfs_iget+0xfb/0x230 fs/btrfs/inode.c:5636\n\
  \   add_conflicting_inode fs/btrfs/tree-log.c:5657 [inline]\n   copy_inode_items_to_log+0x1039/0x1e30\
  \ fs/btrfs/tree-log.c:5928\n   btrfs_log_inode+0xa48/0x4660 fs/btrfs/tree-log.c:6592\n\
  \   log_new_delayed_dentries fs/btrfs/tree-log.c:6363 [inline]\n   btrfs_log_inode+0x27dd/0x4660\
  \ fs/btrfs/tree-log.c:6718\n   btrfs_log_all_parents fs/btrfs/tree-log.c:6833 [inline]\n\
  \   btrfs_log_inode_parent+0x22ba/0x2a90 fs/btrfs/tree-log.c:7141\n   btrfs_log_dentry_safe+0x59/0x80\
  \ fs/btrfs/tree-log.c:7180\n   btrfs_sync_file+0x9c1/0xe10 fs/btrfs/file.c:1959\n\
  \   vfs_fsync_range+0x141/0x230 fs/sync.c:188\n   generic_write_sync include/linux/fs.h:2794\
  \ [inline]\n   btrfs_do_write_iter+0x584/0x10c0 fs/btrfs/file.c:1705\n   do_iter_readv_writev+0x504/0x780\
  \ fs/read_write.c:741\n   vfs_writev+0x36f/0xde0 fs/read_write.c:971\n   do_pwritev+0x1b2/0x260\
  \ fs/read_write.c:1072\n   __do_compat_sys_pwritev2 fs/read_write.c:1218 [inline]\n\
  \   __se_compat_sys_pwritev2 fs/read_write.c:1210 [inline]\n   __ia32_compat_sys_pwritev2+0x121/0x1b0\
  \ fs/read_write.c:1210\n   do_syscall_32_irqs_on arch/x86/entry/common.c:165 [inline]\n\
  \   __do_fast_syscall_32+0x73/0x120 arch/x86/entry/common.c:386\n   do_fast_syscall_32+0x32/0x80\
  \ arch/x86/entry/common.c:411\n   entry_SYSENTER_compat_after_hwframe+0x84/0x8e\n\
  \  RIP: 0023:0xf7334579\n  Code: b8 01 10 06 03 (...)\n  RSP: 002b:00000000f5f265ac\
  \ EFLAGS: 00000292 ORIG_RAX: 000000000000017b\n  RAX: ffffffffffffffda RBX: 0000000000000004\
  \ RCX: 00000000200002c0\n  RDX: 0000000000000001 RSI: 0000000000000000 RDI: 0000000000000000\n\
  \  RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000\n  R10: 0000000000000000\
  \ R11: 0000000000000292 R12: 0000000000000000\n  R13: 0000000000000000 R14: 0000000000000000\
  \ R15: 0000000000000000\n\nFix this by ensuring we are under a NOFS scope whenever\
  \ we call\nbtrfs_iget() during inode logging and log replay.\n\nReported-by: syzbot+8576cfa84070dce4d59b@syzkaller.appspotmail.com\n\
  Link: https://lore.kernel.org/linux-btrfs/000000000000274a3a061abbd928@google.com/\n\
  Fixes: 712e36c5f2a7 (\"btrfs: use GFP_KERNEL in btrfs_alloc_inode\")\nReviewed-by:\
  \ Johannes Thumshirn <johannes.thumshirn@wdc.com>\nReviewed-by: Josef Bacik <josef@toxicpanda.com>\n\
  Reviewed-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\n\
  Reviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 15
covered_count: 8
