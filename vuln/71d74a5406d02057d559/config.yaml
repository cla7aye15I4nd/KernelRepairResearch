id: 71d74a5406d02057d559
bug_link: https://syzkaller.appspot.com/bug?extid=71d74a5406d02057d559
title: 'KASAN: use-after-free Read in __dev_queue_xmit'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 9d383fbb04c64623daf936f33ba03972f0a46311
fix_commit: d0c081b49137cd3200f2023c0875723be66e7ce5
datetime: '2018-01-18T16:25:49-05:00'
fix_commit_message: "flow_dissector: properly cap thoff field\n\nsyzbot reported yet\
  \ another crash [1] that is caused by\ninsufficient validation of DODGY packets.\n\
  \nTwo bugs are happening here to trigger the crash.\n\n1) Flow dissection leaves\
  \ with incorrect thoff field.\n\n2) skb_probe_transport_header() sets transport\
  \ header to this invalid\nthoff, even if pointing after skb valid data.\n\n3) qdisc_pkt_len_init()\
  \ reads out-of-bound data because it\ntrusts tcp_hdrlen(skb)\n\nPossible fixes :\n\
  \n- Full flow dissector validation before injecting bad DODGY packets in\nthe stack.\n\
  \ This approach was attempted here : https://patchwork.ozlabs.org/patch/\n861874/\n\
  \n- Have more robust functions in the core.\n  This might be needed anyway for stable\
  \ versions.\n\nThis patch fixes the flow dissection issue.\n\n[1]\nCPU: 1 PID: 3144\
  \ Comm: syzkaller271204 Not tainted 4.15.0-rc4-mm1+ #49\nHardware name: Google Google\
  \ Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nCall Trace:\n __dump_stack\
  \ lib/dump_stack.c:17 [inline]\n dump_stack+0x194/0x257 lib/dump_stack.c:53\n print_address_description+0x73/0x250\
  \ mm/kasan/report.c:256\n kasan_report_error mm/kasan/report.c:355 [inline]\n kasan_report+0x23b/0x360\
  \ mm/kasan/report.c:413\n __asan_report_load2_noabort+0x14/0x20 mm/kasan/report.c:432\n\
  \ __tcp_hdrlen include/linux/tcp.h:35 [inline]\n tcp_hdrlen include/linux/tcp.h:40\
  \ [inline]\n qdisc_pkt_len_init net/core/dev.c:3160 [inline]\n __dev_queue_xmit+0x20d3/0x2200\
  \ net/core/dev.c:3465\n dev_queue_xmit+0x17/0x20 net/core/dev.c:3554\n packet_snd\
  \ net/packet/af_packet.c:2943 [inline]\n packet_sendmsg+0x3ad5/0x60a0 net/packet/af_packet.c:2968\n\
  \ sock_sendmsg_nosec net/socket.c:628 [inline]\n sock_sendmsg+0xca/0x110 net/socket.c:638\n\
  \ sock_write_iter+0x31a/0x5d0 net/socket.c:907\n call_write_iter include/linux/fs.h:1776\
  \ [inline]\n new_sync_write fs/read_write.c:469 [inline]\n __vfs_write+0x684/0x970\
  \ fs/read_write.c:482\n vfs_write+0x189/0x510 fs/read_write.c:544\n SYSC_write fs/read_write.c:589\
  \ [inline]\n SyS_write+0xef/0x220 fs/read_write.c:581\n entry_SYSCALL_64_fastpath+0x1f/0x96\n\
  \nFixes: 34fad54c2537 (\"net: __skb_flow_dissect() must cap its return value\")\n\
  Fixes: a6e544b0a88b (\"flow_dissector: Jump to exit code in __skb_flow_dissect\"\
  )\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Willem de Bruijn <willemb@google.com>\n\
  Reported-by: syzbot <syzkaller@googlegroups.com>\nAcked-by: Jason Wang <jasowang@redhat.com>\n\
  Signed-off-by: David S. Miller <davem@davemloft.net>\n"
submodule:
- net/core
hunk_count: 2
covered_count: 0
