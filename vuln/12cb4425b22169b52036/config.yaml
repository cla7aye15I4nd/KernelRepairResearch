id: 12cb4425b22169b52036
bug_link: https://syzkaller.appspot.com/bug?extid=12cb4425b22169b52036
title: 'KASAN: slab-use-after-free Read in f2fs_truncate_data_blocks_range'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 87a91a155902f2b652e272ad3ba4de3486af9229
fix_commit: a6ec83786ab9f13f25fb18166dee908845713a95
datetime: '2023-06-30T16:38:27-07:00'
fix_commit_message: "f2fs: fix to do sanity check on direct node in truncate_dnode()\n\
  \nsyzbot reports below bug:\n\nBUG: KASAN: slab-use-after-free in f2fs_truncate_data_blocks_range+0x122a/0x14c0\
  \ fs/f2fs/file.c:574\nRead of size 4 at addr ffff88802a25c000 by task syz-executor148/5000\n\
  \nCPU: 1 PID: 5000 Comm: syz-executor148 Not tainted 6.4.0-rc7-syzkaller-00041-ge660abd551f1\
  \ #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\
  \ 05/27/2023\nCall Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:88 [inline]\n\
  \ dump_stack_lvl+0xd9/0x150 lib/dump_stack.c:106\n print_address_description.constprop.0+0x2c/0x3c0\
  \ mm/kasan/report.c:351\n print_report mm/kasan/report.c:462 [inline]\n kasan_report+0x11c/0x130\
  \ mm/kasan/report.c:572\n f2fs_truncate_data_blocks_range+0x122a/0x14c0 fs/f2fs/file.c:574\n\
  \ truncate_dnode+0x229/0x2e0 fs/f2fs/node.c:944\n f2fs_truncate_inode_blocks+0x64b/0xde0\
  \ fs/f2fs/node.c:1154\n f2fs_do_truncate_blocks+0x4ac/0xf30 fs/f2fs/file.c:721\n\
  \ f2fs_truncate_blocks+0x7b/0x300 fs/f2fs/file.c:749\n f2fs_truncate.part.0+0x4a5/0x630\
  \ fs/f2fs/file.c:799\n f2fs_truncate include/linux/fs.h:825 [inline]\n f2fs_setattr+0x1738/0x2090\
  \ fs/f2fs/file.c:1006\n notify_change+0xb2c/0x1180 fs/attr.c:483\n do_truncate+0x143/0x200\
  \ fs/open.c:66\n handle_truncate fs/namei.c:3295 [inline]\n do_open fs/namei.c:3640\
  \ [inline]\n path_openat+0x2083/0x2750 fs/namei.c:3791\n do_filp_open+0x1ba/0x410\
  \ fs/namei.c:3818\n do_sys_openat2+0x16d/0x4c0 fs/open.c:1356\n do_sys_open fs/open.c:1372\
  \ [inline]\n __do_sys_creat fs/open.c:1448 [inline]\n __se_sys_creat fs/open.c:1442\
  \ [inline]\n __x64_sys_creat+0xcd/0x120 fs/open.c:1442\n do_syscall_x64 arch/x86/entry/common.c:50\
  \ [inline]\n do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\
  \nThe root cause is, inodeA references inodeB via inodeB's ino, once inodeA\nis\
  \ truncated, it calls truncate_dnode() to truncate data blocks in inodeB's\nnode\
  \ page, it traverse mapping data from node->i.i_addr[0] to\nnode->i.i_addr[ADDRS_PER_BLOCK()\
  \ - 1], result in out-of-boundary access.\n\nThis patch fixes to add sanity check\
  \ on dnode page in truncate_dnode(),\nso that, it can help to avoid triggering such\
  \ issue, and once it encounters\nsuch issue, it will record newly introduced ERROR_INVALID_NODE_REFERENCE\n\
  error into superblock, later fsck can detect such issue and try repairing.\n\nAlso,\
  \ it removes f2fs_truncate_data_blocks() for cleanup due to the\nfunction has only\
  \ one caller, and uses f2fs_truncate_data_blocks_range()\ninstead.\n\nReported-and-tested-by:\
  \ syzbot+12cb4425b22169b52036@syzkaller.appspotmail.com\nCloses: https://lore.kernel.org/linux-f2fs-devel/000000000000f3038a05fef867f8@google.com\n\
  Signed-off-by: Chao Yu <chao@kernel.org>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>\n"
submodule:
- fs/f2fs
- include/linux
hunk_count: 5
covered_count: 2
