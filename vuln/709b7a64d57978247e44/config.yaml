id: 709b7a64d57978247e44
bug_link: https://syzkaller.appspot.com/bug?extid=709b7a64d57978247e44
title: 'KASAN: use-after-free Read in ethnl_update_bitset32'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 6e11d1578fba8d09d03a286740ffcf336d53928c
fix_commit: e34f1753eebc428c312527662eb1b529cf260240
datetime: '2020-02-26T11:27:31-08:00'
fix_commit_message: 'ethtool: limit bitset size


  Syzbot reported that ethnl_compact_sanity_checks() can be tricked into

  reading past the end of ETHTOOL_A_BITSET_VALUE and ETHTOOL_A_BITSET_MASK

  attributes and even the message by passing a value between (u32)(-31)

  and (u32)(-1) as ETHTOOL_A_BITSET_SIZE.


  The problem is that DIV_ROUND_UP(attr_nbits, 32) is 0 for such values so

  that zero length ETHTOOL_A_BITSET_VALUE will pass the length check but

  ethnl_bitmap32_not_zero() check would try to access up to 512 MB of

  attribute "payload".


  Prevent this overflow byt limiting the bitset size. Technically, compact

  bitset format would allow bitset sizes up to almost 2^18 (so that the

  nest size does not exceed U16_MAX) but bitsets used by ethtool are much

  shorter. S16_MAX, the largest value which can be directly used as an

  upper limit in policy, should be a reasonable compromise.


  Fixes: 10b518d4e6dd ("ethtool: netlink bitset handling")

  Reported-by: syzbot+7fd4ed5b4234ab1fdccd@syzkaller.appspotmail.com

  Reported-by: syzbot+709b7a64d57978247e44@syzkaller.appspotmail.com

  Reported-by: syzbot+983cb8fb2d17a7af549d@syzkaller.appspotmail.com

  Signed-off-by: Michal Kubecek <mkubecek@suse.cz>

  Signed-off-by: David S. Miller <davem@davemloft.net>

  '
submodule:
- net/ethtool
hunk_count: 2
covered_count: 0
