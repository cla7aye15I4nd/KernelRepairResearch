id: c7d9ec7a1a7272dd71b3
bug_link: https://syzkaller.appspot.com/bug?extid=c7d9ec7a1a7272dd71b3
title: 'KASAN: use-after-free Write in get_block'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: facb03dddec04e4aac1bb2139accdceb04deb1f3
fix_commit: 270ef41094e9fa95273f288d7d785313ceab2ff3
datetime: '2020-08-12T10:58:00-07:00'
fix_commit_message: 'fs/minix: reject too-large maximum file size


  If the minix filesystem tries to map a very large logical block number to

  its on-disk location, block_to_path() can return offsets that are too

  large, causing out-of-bounds memory accesses when accessing indirect index

  blocks.  This should be prevented by the check against the maximum file

  size, but this doesn''t work because the maximum file size is read directly

  from the on-disk superblock and isn''t validated itself.


  Fix this by validating the maximum file size at mount time.


  Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")

  Reported-by: syzbot+c7d9ec7a1a7272dd71b3@syzkaller.appspotmail.com

  Reported-by: syzbot+3b7b03a0c28948054fb5@syzkaller.appspotmail.com

  Reported-by: syzbot+6e056ee473568865f3e6@syzkaller.appspotmail.com

  Signed-off-by: Eric Biggers <ebiggers@google.com>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  Cc: Alexander Viro <viro@zeniv.linux.org.uk>

  Cc: Qiujun Huang <anenbupt@gmail.com>

  Cc: <stable@vger.kernel.org>

  Link: http://lkml.kernel.org/r/20200628060846.682158-4-ebiggers@kernel.org

  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

  '
submodule:
- fs/minix
hunk_count: 2
covered_count: 0
