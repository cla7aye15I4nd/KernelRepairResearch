id: 7b6548ae483d6f4c64ae
bug_link: https://syzkaller.appspot.com/bug?extid=7b6548ae483d6f4c64ae
title: 'KASAN: use-after-free Write in sk_psock_stop'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 51e0158a54321a48d260e95998393934bb0de52c
fix_commit: aadb2bb83ff789de63b48b4edeab7329423a50d3
datetime: '2021-04-12T17:35:26+02:00'
fix_commit_message: 'sock_map: Fix a potential use-after-free in sock_map_close()


  The last refcnt of the psock can be gone right after

  sock_map_remove_links(), so sk_psock_stop() could trigger a UAF.

  The reason why I placed sk_psock_stop() there is to avoid RCU read

  critical section, and more importantly, some callee of

  sock_map_remove_links() is supposed to be called with RCU read lock,

  we can not simply get rid of RCU read lock here. Therefore, the only

  choice we have is to grab an additional refcnt with sk_psock_get()

  and put it back after sk_psock_stop().


  Fixes: 799aa7f98d53 ("skmsg: Avoid lock_sock() in sk_psock_backlog()")

  Reported-by: syzbot+7b6548ae483d6f4c64ae@syzkaller.appspotmail.com

  Signed-off-by: Cong Wang <cong.wang@bytedance.com>

  Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

  Acked-by: John Fastabend <john.fastabend@gmail.com>

  Acked-by: Jakub Sitnicki <jakub@cloudflare.com>

  Link: https://lore.kernel.org/bpf/20210408030556.45134-1-xiyou.wangcong@gmail.com

  '
submodule:
- net/core
hunk_count: 2
covered_count: 2
