id: 0f92a17b0706231d0a09
bug_link: https://syzkaller.appspot.com/bug?extid=0f92a17b0706231d0a09
title: 'WARNING: kmalloc bug in memdup_user (3)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: f0307a7ed17fa8925321a4f58f5ca56eeedd4fa3
fix_commit: 683d2ac3904c74a625ea62d7fcc6c1efd84be087
datetime: '2018-05-17T00:56:06+02:00'
fix_commit_message: "bpf: fix sock hashmap kmalloc warning\n\nsyzbot reported a kernel\
  \ warning below:\n  WARNING: CPU: 0 PID: 4499 at mm/slab_common.c:996 kmalloc_slab+0x56/0x70\
  \ mm/slab_common.c:996\n  Kernel panic - not syncing: panic_on_warn set ...\n\n\
  \  CPU: 0 PID: 4499 Comm: syz-executor050 Not tainted 4.17.0-rc3+ #9\n  Hardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\n\
  \  Call Trace:\n   __dump_stack lib/dump_stack.c:77 [inline]\n   dump_stack+0x1b9/0x294\
  \ lib/dump_stack.c:113\n   panic+0x22f/0x4de kernel/panic.c:184\n   __warn.cold.8+0x163/0x1b3\
  \ kernel/panic.c:536\n   report_bug+0x252/0x2d0 lib/bug.c:186\n   fixup_bug arch/x86/kernel/traps.c:178\
  \ [inline]\n   do_error_trap+0x1de/0x490 arch/x86/kernel/traps.c:296\n   do_invalid_op+0x1b/0x20\
  \ arch/x86/kernel/traps.c:315\n   invalid_op+0x14/0x20 arch/x86/entry/entry_64.S:992\n\
  \  RIP: 0010:kmalloc_slab+0x56/0x70 mm/slab_common.c:996\n  RSP: 0018:ffff8801d907fc58\
  \ EFLAGS: 00010246\n  RAX: 0000000000000000 RBX: ffff8801aeecb280 RCX: ffffffff8185ebd7\n\
  \  RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000ffffffe1\n  RBP: ffff8801d907fc58\
  \ R08: ffff8801adb5e1c0 R09: ffffed0035a84700\n  R10: ffffed0035a84700 R11: ffff8801ad423803\
  \ R12: ffff8801aeecb280\n  R13: 00000000fffffff4 R14: ffff8801ad891a00 R15: 00000000014200c0\n\
  \   __do_kmalloc mm/slab.c:3713 [inline]\n   __kmalloc+0x25/0x760 mm/slab.c:3727\n\
  \   kmalloc include/linux/slab.h:517 [inline]\n   map_get_next_key+0x24a/0x640 kernel/bpf/syscall.c:858\n\
  \   __do_sys_bpf kernel/bpf/syscall.c:2131 [inline]\n   __se_sys_bpf kernel/bpf/syscall.c:2096\
  \ [inline]\n   __x64_sys_bpf+0x354/0x4f0 kernel/bpf/syscall.c:2096\n   do_syscall_64+0x1b1/0x800\
  \ arch/x86/entry/common.c:287\n   entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nThe\
  \ test case is against sock hashmap with a key size 0xffffffe1.\nSuch a large key\
  \ size will cause the below code in function\nsock_hash_alloc() overflowing and\
  \ produces a smaller elem_size,\nhence map creation will be successful.\n    htab->elem_size\
  \ = sizeof(struct htab_elem) +\n                      round_up(htab->map.key_size,\
  \ 8);\n\nLater, when map_get_next_key is called and kernel tries\nto allocate the\
  \ key unsuccessfully, it will issue\nthe above warning.\n\nSimilar to hashtab, ensure\
  \ the key size is at most\nMAX_BPF_STACK for a successful map creation.\n\nFixes:\
  \ 81110384441a (\"bpf: sockmap, add hash map support\")\nReported-by: syzbot+e4566d29080e7f3460ff@syzkaller.appspotmail.com\n\
  Signed-off-by: Yonghong Song <yhs@fb.com>\nAcked-by: John Fastabend <john.fastabend@gmail.com>\n\
  Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>\n"
submodule:
- kernel/bpf
hunk_count: 1
covered_count: 0
