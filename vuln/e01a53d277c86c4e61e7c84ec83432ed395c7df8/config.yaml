id: e01a53d277c86c4e61e7c84ec83432ed395c7df8
bug_link: https://syzkaller.appspot.com/bug?extid=e01a53d277c86c4e61e7c84ec83432ed395c7df8
title: 'WARNING: kernel stack regs has bad ''bp'' value (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 427988d981c4c20a7f0421873351ccd14a88e2b2
fix_commit: d8c7fe9f2a486a6e5f0d5229ca43807af5ab22c6
datetime: '2017-12-28T17:56:44+11:00'
fix_commit_message: 'crypto: x86/twofish-3way - Fix %rbp usage


  Using %rbp as a temporary register breaks frame pointer convention and

  breaks stack traces when unwinding from an interrupt in the crypto code.


  In twofish-3way, we can''t simply replace %rbp with another register

  because there are none available.  Instead, we use the stack to hold the

  values that %rbp, %r11, and %r12 were holding previously.  Each of these

  values represents the half of the output from the previous Feistel round

  that is being passed on unchanged to the following round.  They are only

  used once per round, when they are exchanged with %rax, %rbx, and %rcx.


  As a result, we free up 3 registers (one per block) and can reassign

  them so that %rbp is not used, and additionally %r14 and %r15 are not

  used so they do not need to be saved/restored.


  There may be a small overhead caused by replacing ''xchg REG, REG'' with

  the needed sequence ''mov MEM, REG; mov REG, MEM; mov REG, REG'' once per

  round.  But, counterintuitively, when I tested "ctr-twofish-3way" on a

  Haswell processor, the new version was actually about 2% faster.

  (Perhaps ''xchg'' is not as well optimized as plain moves.)


  Reported-by: syzbot <syzkaller@googlegroups.com>

  Signed-off-by: Eric Biggers <ebiggers@google.com>

  Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>

  Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

  '
submodule:
- arch/x86/crypto
hunk_count: 8
covered_count: 0
