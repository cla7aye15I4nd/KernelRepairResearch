id: 74ebe2104433e9dc610d
bug_link: https://syzkaller.appspot.com/bug?extid=74ebe2104433e9dc610d
title: 'KASAN: slab-use-after-free Read in sanity_check_extent_cache'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: a8eb3de28e7a365690c61161e7a07a4fc7c60bbf
fix_commit: d7409b05a64f212735f0d33f5f1602051a886eab
datetime: '2024-06-12T15:46:03+00:00'
fix_commit_message: "f2fs: fix to cover read extent cache access with lock\n\nsyzbot\
  \ reports a f2fs bug as below:\n\nBUG: KASAN: slab-use-after-free in sanity_check_extent_cache+0x370/0x410\
  \ fs/f2fs/extent_cache.c:46\nRead of size 4 at addr ffff8880739ab220 by task syz-executor200/5097\n\
  \nCPU: 0 PID: 5097 Comm: syz-executor200 Not tainted 6.9.0-rc6-syzkaller #0\nHardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS Google 03/27/2024\n\
  Call Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x241/0x360\
  \ lib/dump_stack.c:114\n print_address_description mm/kasan/report.c:377 [inline]\n\
  \ print_report+0x169/0x550 mm/kasan/report.c:488\n kasan_report+0x143/0x180 mm/kasan/report.c:601\n\
  \ sanity_check_extent_cache+0x370/0x410 fs/f2fs/extent_cache.c:46\n do_read_inode\
  \ fs/f2fs/inode.c:509 [inline]\n f2fs_iget+0x33e1/0x46e0 fs/f2fs/inode.c:560\n f2fs_nfs_get_inode+0x74/0x100\
  \ fs/f2fs/super.c:3237\n generic_fh_to_dentry+0x9f/0xf0 fs/libfs.c:1413\n exportfs_decode_fh_raw+0x152/0x5f0\
  \ fs/exportfs/expfs.c:444\n exportfs_decode_fh+0x3c/0x80 fs/exportfs/expfs.c:584\n\
  \ do_handle_to_path fs/fhandle.c:155 [inline]\n handle_to_path fs/fhandle.c:210\
  \ [inline]\n do_handle_open+0x495/0x650 fs/fhandle.c:226\n do_syscall_x64 arch/x86/entry/common.c:52\
  \ [inline]\n do_syscall_64+0xf5/0x240 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\
  \nWe missed to cover sanity_check_extent_cache() w/ extent cache lock,\nso, below\
  \ race case may happen, result in use after free issue.\n\n- f2fs_iget\n - do_read_inode\n\
  \  - f2fs_init_read_extent_tree\n  : add largest extent entry in to cache\n\t\t\t\
  \t\t- shrink\n\t\t\t\t\t - f2fs_shrink_read_extent_tree\n\t\t\t\t\t  - __shrink_extent_tree\n\
  \t\t\t\t\t   - __detach_extent_node\n\t\t\t\t\t   : drop largest extent entry\n\
  \  - sanity_check_extent_cache\n  : access et->largest w/o lock\n\nlet's refactor\
  \ sanity_check_extent_cache() to avoid extent cache access\nand call it before f2fs_init_read_extent_tree()\
  \ to fix this issue.\n\nReported-by: syzbot+74ebe2104433e9dc610d@syzkaller.appspotmail.com\n\
  Closes: https://lore.kernel.org/linux-f2fs-devel/00000000000009beea061740a531@google.com\n\
  Signed-off-by: Chao Yu <chao@kernel.org>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>\n"
submodule:
- fs/f2fs
hunk_count: 5
covered_count: 4
