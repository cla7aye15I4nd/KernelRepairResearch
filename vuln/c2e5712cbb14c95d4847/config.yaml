id: c2e5712cbb14c95d4847
bug_link: https://syzkaller.appspot.com/bug?extid=c2e5712cbb14c95d4847
title: 'KCSAN: data-race in mprotect_fixup / try_to_migrate_one'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 94ba17adaba0f651fdcf745c8891a88e2e028cfa
fix_commit: e92b6e7bb6189d688ab8f9b27e3992cd8568ee4b
datetime: '2025-03-16T22:06:09-07:00'
fix_commit_message: 'mm: use READ/WRITE_ONCE() for vma->vm_flags on migrate, mprotect


  According to the syzbot report referenced here, it is possible to

  encounter a race between mprotect() writing to the vma->vm_flags field and

  migration checking whether the VMA is locked.


  There is no real problem with timing here per se, only that torn

  reads/writes may occur.  Therefore, as a proximate fix, ensure both

  operations READ_ONCE() and WRITE_ONCE() to avoid this.


  This race is possible due to the ability to look up VMAs via the rmap,

  which migration does in this case, which takes no mmap or VMA lock and

  therefore does not preclude an operation to modify a VMA.


  When the final update of VMA flags is performed by mprotect, this will

  cause the rmap lock to be taken while the VMA is inserted on split/merge.


  However the means by which we perform splits/merges in the kernel is that

  we perform the split/merge operation on the VMA, acquiring/releasing locks

  as needed, and only then, after having done so, modifying fields.


  We should carefully examine and determine whether we can combine the two

  operations so as to avoid such races, and whether it might be possible to

  otherwise annotate these rmap field accesses.


  Link: https://lkml.kernel.org/r/20250207172442.78836-1-lorenzo.stoakes@oracle.com

  Signed-off-by: Lorenzo Stoakes <lorenzo.stoakes@oracle.com>

  Reported-by: syzbot+c2e5712cbb14c95d4847@syzkaller.appspotmail.com

  Closes: https://lore.kernel.org/all/67a34e60.050a0220.50516.0040.GAE@google.com/

  Cc: Jann Horn <jannh@google.com>

  Cc: Liam Howlett <liam.howlett@oracle.com>

  Cc: Vlastimil Babka <vbabka@suse.cz>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  '
submodule:
- mm
hunk_count: 4
covered_count: 1
