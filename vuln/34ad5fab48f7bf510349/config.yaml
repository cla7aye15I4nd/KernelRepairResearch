id: 34ad5fab48f7bf510349
bug_link: https://syzkaller.appspot.com/bug?extid=34ad5fab48f7bf510349
title: 'KMSAN: kernel-infoleak in __skb_datagram_iter (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 6714ebb922ab15a209dfc3c1ed29d4bb0abc9f02
fix_commit: 661779e1fcafe1b74b3f3fe8e980c1e207fea1fd
datetime: '2024-02-22T18:56:09-08:00'
fix_commit_message: "netlink: Fix kernel-infoleak-after-free in __skb_datagram_iter\n\
  \nsyzbot reported the following uninit-value access issue [1]:\n\nnetlink_to_full_skb()\
  \ creates a new `skb` and puts the `skb->data`\npassed as a 1st arg of netlink_to_full_skb()\
  \ onto new `skb`. The data\nsize is specified as `len` and passed to skb_put_data().\
  \ This `len`\nis based on `skb->end` that is not data offset but buffer offset.\
  \ The\n`skb->end` contains data and tailroom. Since the tailroom is not\ninitialized\
  \ when the new `skb` created, KMSAN detects uninitialized\nmemory area when copying\
  \ the data.\n\nThis patch resolved this issue by correct the len from `skb->end`\
  \ to\n`skb->len`, which is the actual data offset.\n\nBUG: KMSAN: kernel-infoleak-after-free\
  \ in instrument_copy_to_user include/linux/instrumented.h:114 [inline]\nBUG: KMSAN:\
  \ kernel-infoleak-after-free in copy_to_user_iter lib/iov_iter.c:24 [inline]\nBUG:\
  \ KMSAN: kernel-infoleak-after-free in iterate_ubuf include/linux/iov_iter.h:29\
  \ [inline]\nBUG: KMSAN: kernel-infoleak-after-free in iterate_and_advance2 include/linux/iov_iter.h:245\
  \ [inline]\nBUG: KMSAN: kernel-infoleak-after-free in iterate_and_advance include/linux/iov_iter.h:271\
  \ [inline]\nBUG: KMSAN: kernel-infoleak-after-free in _copy_to_iter+0x364/0x2520\
  \ lib/iov_iter.c:186\n instrument_copy_to_user include/linux/instrumented.h:114\
  \ [inline]\n copy_to_user_iter lib/iov_iter.c:24 [inline]\n iterate_ubuf include/linux/iov_iter.h:29\
  \ [inline]\n iterate_and_advance2 include/linux/iov_iter.h:245 [inline]\n iterate_and_advance\
  \ include/linux/iov_iter.h:271 [inline]\n _copy_to_iter+0x364/0x2520 lib/iov_iter.c:186\n\
  \ copy_to_iter include/linux/uio.h:197 [inline]\n simple_copy_to_iter+0x68/0xa0\
  \ net/core/datagram.c:532\n __skb_datagram_iter+0x123/0xdc0 net/core/datagram.c:420\n\
  \ skb_copy_datagram_iter+0x5c/0x200 net/core/datagram.c:546\n skb_copy_datagram_msg\
  \ include/linux/skbuff.h:3960 [inline]\n packet_recvmsg+0xd9c/0x2000 net/packet/af_packet.c:3482\n\
  \ sock_recvmsg_nosec net/socket.c:1044 [inline]\n sock_recvmsg net/socket.c:1066\
  \ [inline]\n sock_read_iter+0x467/0x580 net/socket.c:1136\n call_read_iter include/linux/fs.h:2014\
  \ [inline]\n new_sync_read fs/read_write.c:389 [inline]\n vfs_read+0x8f6/0xe00 fs/read_write.c:470\n\
  \ ksys_read+0x20f/0x4c0 fs/read_write.c:613\n __do_sys_read fs/read_write.c:623\
  \ [inline]\n __se_sys_read fs/read_write.c:621 [inline]\n __x64_sys_read+0x93/0xd0\
  \ fs/read_write.c:621\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0x44/0x110\
  \ arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x63/0x6b\n\nUninit\
  \ was stored to memory at:\n skb_put_data include/linux/skbuff.h:2622 [inline]\n\
  \ netlink_to_full_skb net/netlink/af_netlink.c:181 [inline]\n __netlink_deliver_tap_skb\
  \ net/netlink/af_netlink.c:298 [inline]\n __netlink_deliver_tap+0x5be/0xc90 net/netlink/af_netlink.c:325\n\
  \ netlink_deliver_tap net/netlink/af_netlink.c:338 [inline]\n netlink_deliver_tap_kernel\
  \ net/netlink/af_netlink.c:347 [inline]\n netlink_unicast_kernel net/netlink/af_netlink.c:1341\
  \ [inline]\n netlink_unicast+0x10f1/0x1250 net/netlink/af_netlink.c:1368\n netlink_sendmsg+0x1238/0x13d0\
  \ net/netlink/af_netlink.c:1910\n sock_sendmsg_nosec net/socket.c:730 [inline]\n\
  \ __sock_sendmsg net/socket.c:745 [inline]\n ____sys_sendmsg+0x9c2/0xd60 net/socket.c:2584\n\
  \ ___sys_sendmsg+0x28d/0x3c0 net/socket.c:2638\n __sys_sendmsg net/socket.c:2667\
  \ [inline]\n __do_sys_sendmsg net/socket.c:2676 [inline]\n __se_sys_sendmsg net/socket.c:2674\
  \ [inline]\n __x64_sys_sendmsg+0x307/0x490 net/socket.c:2674\n do_syscall_x64 arch/x86/entry/common.c:52\
  \ [inline]\n do_syscall_64+0x44/0x110 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x63/0x6b\n\
  \nUninit was created at:\n free_pages_prepare mm/page_alloc.c:1087 [inline]\n free_unref_page_prepare+0xb0/0xa40\
  \ mm/page_alloc.c:2347\n free_unref_page_list+0xeb/0x1100 mm/page_alloc.c:2533\n\
  \ release_pages+0x23d3/0x2410 mm/swap.c:1042\n free_pages_and_swap_cache+0xd9/0xf0\
  \ mm/swap_state.c:316\n tlb_batch_pages_flush mm/mmu_gather.c:98 [inline]\n tlb_flush_mmu_free\
  \ mm/mmu_gather.c:293 [inline]\n tlb_flush_mmu+0x6f5/0x980 mm/mmu_gather.c:300\n\
  \ tlb_finish_mmu+0x101/0x260 mm/mmu_gather.c:392\n exit_mmap+0x49e/0xd30 mm/mmap.c:3321\n\
  \ __mmput+0x13f/0x530 kernel/fork.c:1349\n mmput+0x8a/0xa0 kernel/fork.c:1371\n\
  \ exit_mm+0x1b8/0x360 kernel/exit.c:567\n do_exit+0xd57/0x4080 kernel/exit.c:858\n\
  \ do_group_exit+0x2fd/0x390 kernel/exit.c:1021\n __do_sys_exit_group kernel/exit.c:1032\
  \ [inline]\n __se_sys_exit_group kernel/exit.c:1030 [inline]\n __x64_sys_exit_group+0x3c/0x50\
  \ kernel/exit.c:1030\n do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n do_syscall_64+0x44/0x110\
  \ arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x63/0x6b\n\nBytes\
  \ 3852-3903 of 3904 are uninitialized\nMemory access of size 3904 starts at ffff88812ea1e000\n\
  Data copied to user address 0000000020003280\n\nCPU: 1 PID: 5043 Comm: syz-executor297\
  \ Not tainted 6.7.0-rc5-syzkaller-00047-g5bd7ef53ffe5 #0\nHardware name: Google\
  \ Google Compute Engine/Google Compute Engine, BIOS Google 11/10/2023\n\nFixes:\
  \ 1853c9496460 (\"netlink, mmap: transform mmap skb into full skb on taps\")\nReported-and-tested-by:\
  \ syzbot+34ad5fab48f7bf510349@syzkaller.appspotmail.com\nCloses: https://syzkaller.appspot.com/bug?extid=34ad5fab48f7bf510349\
  \ [1]\nSigned-off-by: Ryosuke Yasuoka <ryasuoka@redhat.com>\nReviewed-by: Eric Dumazet\
  \ <edumazet@google.com>\nLink: https://lore.kernel.org/r/20240221074053.1794118-1-ryasuoka@redhat.com\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/netlink
hunk_count: 1
covered_count: 1
