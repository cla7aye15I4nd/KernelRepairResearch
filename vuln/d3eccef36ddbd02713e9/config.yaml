id: d3eccef36ddbd02713e9
bug_link: https://syzkaller.appspot.com/bug?extid=d3eccef36ddbd02713e9
title: 'net-next test error: KASAN: use-after-free Write in afs_wake_up_async_call'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 7fcaf73193e9d15f4d65d43aaf890fd3fbea1836
fix_commit: 0041cd5a50442db6e456b145892a0eaf2dff061f
datetime: '2020-06-20T21:31:43-07:00'
fix_commit_message: "rxrpc: Fix notification call on completion of discarded calls\n\
  \nWhen preallocated service calls are being discarded, they're passed to\n->discard_new_call()\
  \ to have the caller clean up any attached higher-layer\npreallocated pieces before\
  \ being marked completed.  However, the act of\nmarking them completed now invokes\
  \ the call's notification function - which\ncauses a problem because that function\
  \ might assume that the previously\nfreed pieces of memory are still there.\n\n\
  Fix this by setting a dummy notification function on the socket after\ncalling ->discard_new_call().\n\
  \nThis results in the following kasan message when the kafs module is\nremoved.\n\
  \n==================================================================\nBUG: KASAN:\
  \ use-after-free in afs_wake_up_async_call+0x6aa/0x770 fs/afs/rxrpc.c:707\nWrite\
  \ of size 1 at addr ffff8880946c39e4 by task kworker/u4:1/21\n\nCPU: 0 PID: 21 Comm:\
  \ kworker/u4:1 Not tainted 5.8.0-rc1-syzkaller #0\nHardware name: Google Google\
  \ Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nWorkqueue: netns\
  \ cleanup_net\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0x18f/0x20d\
  \ lib/dump_stack.c:118\n print_address_description.constprop.0.cold+0xd3/0x413 mm/kasan/report.c:383\n\
  \ __kasan_report mm/kasan/report.c:513 [inline]\n kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530\n\
  \ afs_wake_up_async_call+0x6aa/0x770 fs/afs/rxrpc.c:707\n rxrpc_notify_socket+0x1db/0x5d0\
  \ net/rxrpc/recvmsg.c:40\n __rxrpc_set_call_completion.part.0+0x172/0x410 net/rxrpc/recvmsg.c:76\n\
  \ __rxrpc_call_completed net/rxrpc/recvmsg.c:112 [inline]\n rxrpc_call_completed+0xca/0xf0\
  \ net/rxrpc/recvmsg.c:111\n rxrpc_discard_prealloc+0x781/0xab0 net/rxrpc/call_accept.c:233\n\
  \ rxrpc_listen+0x147/0x360 net/rxrpc/af_rxrpc.c:245\n afs_close_socket+0x95/0x320\
  \ fs/afs/rxrpc.c:110\n afs_net_exit+0x1bc/0x310 fs/afs/main.c:155\n ops_exit_list.isra.0+0xa8/0x150\
  \ net/core/net_namespace.c:186\n cleanup_net+0x511/0xa50 net/core/net_namespace.c:603\n\
  \ process_one_work+0x965/0x1690 kernel/workqueue.c:2269\n worker_thread+0x96/0xe10\
  \ kernel/workqueue.c:2415\n kthread+0x3b5/0x4a0 kernel/kthread.c:291\n ret_from_fork+0x1f/0x30\
  \ arch/x86/entry/entry_64.S:293\n\nAllocated by task 6820:\n save_stack+0x1b/0x40\
  \ mm/kasan/common.c:48\n set_track mm/kasan/common.c:56 [inline]\n __kasan_kmalloc\
  \ mm/kasan/common.c:494 [inline]\n __kasan_kmalloc.constprop.0+0xbf/0xd0 mm/kasan/common.c:467\n\
  \ kmem_cache_alloc_trace+0x153/0x7d0 mm/slab.c:3551\n kmalloc include/linux/slab.h:555\
  \ [inline]\n kzalloc include/linux/slab.h:669 [inline]\n afs_alloc_call+0x55/0x630\
  \ fs/afs/rxrpc.c:141\n afs_charge_preallocation+0xe9/0x2d0 fs/afs/rxrpc.c:757\n\
  \ afs_open_socket+0x292/0x360 fs/afs/rxrpc.c:92\n afs_net_init+0xa6c/0xe30 fs/afs/main.c:125\n\
  \ ops_init+0xaf/0x420 net/core/net_namespace.c:151\n setup_net+0x2de/0x860 net/core/net_namespace.c:341\n\
  \ copy_net_ns+0x293/0x590 net/core/net_namespace.c:482\n create_new_namespaces+0x3fb/0xb30\
  \ kernel/nsproxy.c:110\n unshare_nsproxy_namespaces+0xbd/0x1f0 kernel/nsproxy.c:231\n\
  \ ksys_unshare+0x43d/0x8e0 kernel/fork.c:2983\n __do_sys_unshare kernel/fork.c:3051\
  \ [inline]\n __se_sys_unshare kernel/fork.c:3049 [inline]\n __x64_sys_unshare+0x2d/0x40\
  \ kernel/fork.c:3049\n do_syscall_64+0x60/0xe0 arch/x86/entry/common.c:359\n entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\
  \nFreed by task 21:\n save_stack+0x1b/0x40 mm/kasan/common.c:48\n set_track mm/kasan/common.c:56\
  \ [inline]\n kasan_set_free_info mm/kasan/common.c:316 [inline]\n __kasan_slab_free+0xf7/0x140\
  \ mm/kasan/common.c:455\n __cache_free mm/slab.c:3426 [inline]\n kfree+0x109/0x2b0\
  \ mm/slab.c:3757\n afs_put_call+0x585/0xa40 fs/afs/rxrpc.c:190\n rxrpc_discard_prealloc+0x764/0xab0\
  \ net/rxrpc/call_accept.c:230\n rxrpc_listen+0x147/0x360 net/rxrpc/af_rxrpc.c:245\n\
  \ afs_close_socket+0x95/0x320 fs/afs/rxrpc.c:110\n afs_net_exit+0x1bc/0x310 fs/afs/main.c:155\n\
  \ ops_exit_list.isra.0+0xa8/0x150 net/core/net_namespace.c:186\n cleanup_net+0x511/0xa50\
  \ net/core/net_namespace.c:603\n process_one_work+0x965/0x1690 kernel/workqueue.c:2269\n\
  \ worker_thread+0x96/0xe10 kernel/workqueue.c:2415\n kthread+0x3b5/0x4a0 kernel/kthread.c:291\n\
  \ ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293\n\nThe buggy address belongs\
  \ to the object at ffff8880946c3800\n which belongs to the cache kmalloc-1k of size\
  \ 1024\nThe buggy address is located 484 bytes inside of\n 1024-byte region [ffff8880946c3800,\
  \ ffff8880946c3c00)\nThe buggy address belongs to the page:\npage:ffffea000251b0c0\
  \ refcount:1 mapcount:0 mapping:0000000000000000 index:0x0\nflags: 0xfffe0000000200(slab)\n\
  raw: 00fffe0000000200 ffffea0002546508 ffffea00024fa248 ffff8880aa000c40\nraw: 0000000000000000\
  \ ffff8880946c3000 0000000100000002 0000000000000000\npage dumped because: kasan:\
  \ bad access detected\n\nMemory state around the buggy address:\n ffff8880946c3880:\
  \ fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff8880946c3900: fb fb fb fb\
  \ fb fb fb fb fb fb fb fb fb fb fb fb\n>ffff8880946c3980: fb fb fb fb fb fb fb fb\
  \ fb fb fb fb fb fb fb fb\n                                                    \
  \   ^\n ffff8880946c3a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff8880946c3a80:\
  \ fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n==================================================================\n\
  \nReported-by: syzbot+d3eccef36ddbd02713e9@syzkaller.appspotmail.com\nFixes: 5ac0d62226a0\
  \ (\"rxrpc: Fix missing notification\")\nSigned-off-by: David Howells <dhowells@redhat.com>\n\
  Signed-off-by: David S. Miller <davem@davemloft.net>\n"
submodule:
- net/rxrpc
hunk_count: 2
covered_count: 2
