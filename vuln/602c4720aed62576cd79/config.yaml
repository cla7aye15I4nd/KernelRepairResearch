id: 602c4720aed62576cd79
bug_link: https://syzkaller.appspot.com/bug?extid=602c4720aed62576cd79
title: WARNING in __ww_mutex_wound
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: dfb36e4a8db0cd56f92d4cb445f54e85a9b40897
fix_commit: 21924af67d69d7c9fdaf845be69043cfe75196a1
datetime: '2025-08-13T10:34:54+02:00'
fix_commit_message: 'locking: Fix __clear_task_blocked_on() warning from __ww_mutex_wound()
  path


  The __clear_task_blocked_on() helper added a number of sanity

  checks ensuring we hold the mutex wait lock and that the task

  we are clearing blocked_on pointer (if set) matches the mutex.


  However, there is an edge case in the _ww_mutex_wound() logic

  where we need to clear the blocked_on pointer for the task that

  owns the mutex, not the task that is waiting on the mutex.


  For this case the sanity checks aren''t valid, so handle this

  by allowing a NULL lock to skip the additional checks.


  K Prateek Nayak and Maarten Lankhorst also pointed out that in

  this case where we don''t hold the owner''s mutex wait_lock, we

  need to be a bit more careful using READ_ONCE/WRITE_ONCE in both

  the __clear_task_blocked_on() and __set_task_blocked_on()

  implementations to avoid accidentally tripping WARN_ONs if two

  instances race. So do that here as well.


  This issue was easier to miss, I realized, as the test-ww_mutex

  driver only exercises the wait-die class of ww_mutexes. I''ve

  sent a patch[1] to address this so the logic will be easier to

  test.


  [1]: https://lore.kernel.org/lkml/20250801023358.562525-2-jstultz@google.com/


  Fixes: a4f0b6fef4b0 ("locking/mutex: Add p->blocked_on wrappers for correctness
  checks")

  Closes: https://lore.kernel.org/lkml/68894443.a00a0220.26d0e1.0015.GAE@google.com/

  Reported-by: syzbot+602c4720aed62576cd79@syzkaller.appspotmail.com

  Reported-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

  Signed-off-by: John Stultz <jstultz@google.com>

  Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>

  Reviewed-by: K Prateek Nayak <kprateek.nayak@amd.com>

  Acked-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

  Tested-by: K Prateek Nayak <kprateek.nayak@amd.com>

  Link: https://lore.kernel.org/r/20250805001026.2247040-1-jstultz@google.com

  '
submodule:
- include/linux
- kernel/locking
hunk_count: 4
covered_count: 4
