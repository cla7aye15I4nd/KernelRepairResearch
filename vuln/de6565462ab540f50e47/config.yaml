id: de6565462ab540f50e47
bug_link: https://syzkaller.appspot.com/bug?extid=de6565462ab540f50e47
title: WARNING in inet_sock_destruct (4)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 80852774ba0adc37dfdc230acceb7b2a90c900d8
fix_commit: d3a5f2871adc0c61c61869f37f3e697d97f03d8c
datetime: '2025-07-08T07:56:26-07:00'
fix_commit_message: 'tcp: Correct signedness in skb remaining space calculation


  Syzkaller reported a bug [1] where sk->sk_forward_alloc can overflow.


  When we send data, if an skb exists at the tail of the write queue, the

  kernel will attempt to append the new data to that skb. However, the code

  that checks for available space in the skb is flawed:

  ''''''

  copy = size_goal - skb->len

  ''''''


  The types of the variables involved are:

  ''''''

  copy: ssize_t (s64 on 64-bit systems)

  size_goal: int

  skb->len: unsigned int

  ''''''


  Due to C''s type promotion rules, the signed size_goal is converted to an

  unsigned int to match skb->len before the subtraction. The result is an

  unsigned int.


  When this unsigned int result is then assigned to the s64 copy variable,

  it is zero-extended, preserving its non-negative value. Consequently, copy

  is always >= 0.


  Assume we are sending 2GB of data and size_goal has been adjusted to a

  value smaller than skb->len. The subtraction will result in copy holding a

  very large positive integer. In the subsequent logic, this large value is

  used to update sk->sk_forward_alloc, which can easily cause it to overflow.


  The syzkaller reproducer uses TCP_REPAIR to reliably create this

  condition. However, this can also occur in real-world scenarios. The

  tcp_bound_to_half_wnd() function can also reduce size_goal to a small

  value. This would cause the subsequent tcp_wmem_schedule() to set

  sk->sk_forward_alloc to a value close to INT_MAX. Further memory

  allocation requests would then cause sk_forward_alloc to wrap around and

  become negative.


  [1]: https://syzkaller.appspot.com/bug?extid=de6565462ab540f50e47


  Reported-by: syzbot+de6565462ab540f50e47@syzkaller.appspotmail.com

  Fixes: 270a1c3de47e ("tcp: Support MSG_SPLICE_PAGES")

  Signed-off-by: Jiayuan Chen <jiayuan.chen@linux.dev>

  Reviewed-by: Eric Dumazet <edumazet@google.com>

  Reviewed-by: David Howells <dhowells@redhat.com>

  Link: https://patch.msgid.link/20250707054112.101081-1-jiayuan.chen@linux.dev

  Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  '
submodule:
- net/ipv4
hunk_count: 1
covered_count: 0
