id: 7c449856228b63ac951e
bug_link: https://syzkaller.appspot.com/bug?extid=7c449856228b63ac951e
title: 'KASAN: slab-out-of-bounds Write in perf_callchain_user'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 78b562fbfa2cf0a9fcb23c3154756b690f4905c1
fix_commit: 5af44ca53d019de47efe6dbc4003dd518e5197ed
datetime: '2018-04-17T09:47:40-03:00'
fix_commit_message: "perf: Fix sample_max_stack maximum check\n\nThe syzbot hit KASAN\
  \ bug in perf_callchain_store having the entry stored\nbehind the allocated bounds\
  \ [1].\n\nWe miss the sample_max_stack check for the initial event that allocates\n\
  callchain buffers. This missing check allows to create an event with\nsample_max_stack\
  \ value bigger than the global sysctl maximum:\n\n  # sysctl -a | grep perf_event_max_stack\n\
  \  kernel.perf_event_max_stack = 127\n\n  # perf record -vv -C 1 -e cycles/max-stack=256/\
  \ kill\n  ...\n  perf_event_attr:\n    size                             112\n  \
  \  ...\n    sample_max_stack                 256\n  ------------------------------------------------------------\n\
  \  sys_perf_event_open: pid -1  cpu 1  group_fd -1  flags 0x8 = 4\n\nNote the '-C\
  \ 1', which forces perf record to create just single event.\nOtherwise it opens\
  \ event for every cpu, then the sample_max_stack check\nfails on the second event\
  \ and all's fine.\n\nThe fix is to run the sample_max_stack check also for the first\
  \ event\nwith callchains.\n\n[1] https://marc.info/?l=linux-kernel&m=152352732920874&w=2\n\
  \nReported-by: syzbot+7c449856228b63ac951e@syzkaller.appspotmail.com\nSigned-off-by:\
  \ Jiri Olsa <jolsa@kernel.org>\nCc: Alexander Shishkin <alexander.shishkin@linux.intel.com>\n\
  Cc: Andi Kleen <andi@firstfloor.org>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Namhyung\
  \ Kim <namhyung@kernel.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas\
  \ Gleixner <tglx@linutronix.de>\nCc: syzkaller-bugs@googlegroups.com\nCc: x86@kernel.org\n\
  Fixes: 97c79a38cd45 (\"perf core: Per event callchain limit\")\nLink: http://lkml.kernel.org/r/20180415092352.12403-2-jolsa@kernel.org\n\
  Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>\n"
submodule:
- kernel/events
hunk_count: 1
covered_count: 1
