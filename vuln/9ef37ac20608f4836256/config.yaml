id: 9ef37ac20608f4836256
bug_link: https://syzkaller.appspot.com/bug?extid=9ef37ac20608f4836256
title: possible deadlock in nilfs_dirty_inode (4)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: d31638ff6c5437ca2968d6c22fb16524fd485013
fix_commit: b3a033e3ecd3471248d474ef263aadc0059e516a
datetime: '2024-10-30T20:14:12-07:00'
fix_commit_message: 'nilfs2: fix potential deadlock with newly created symlinks


  Syzbot reported that page_symlink(), called by nilfs_symlink(), triggers

  memory reclamation involving the filesystem layer, which can result in

  circular lock dependencies among the reader/writer semaphore

  nilfs->ns_segctor_sem, s_writers percpu_rwsem (intwrite) and the

  fs_reclaim pseudo lock.


  This is because after commit 21fc61c73c39 ("don''t put symlink bodies in

  pagecache into highmem"), the gfp flags of the page cache for symbolic

  links are overwritten to GFP_KERNEL via inode_nohighmem().


  This is not a problem for symlinks read from the backing device, because

  the __GFP_FS flag is dropped after inode_nohighmem() is called.  However,

  when a new symlink is created with nilfs_symlink(), the gfp flags remain

  overwritten to GFP_KERNEL.  Then, memory allocation called from

  page_symlink() etc.  triggers memory reclamation including the FS layer,

  which may call nilfs_evict_inode() or nilfs_dirty_inode().  And these can

  cause a deadlock if they are called while nilfs->ns_segctor_sem is held:


  Fix this issue by dropping the __GFP_FS flag from the page cache GFP flags

  of newly created symlinks in the same way that nilfs_new_inode() and

  __nilfs_read_inode() do, as a workaround until we adopt nofs allocation

  scope consistently or improve the locking constraints.


  Link: https://lkml.kernel.org/r/20241020050003.4308-1-konishi.ryusuke@gmail.com

  Fixes: 21fc61c73c39 ("don''t put symlink bodies in pagecache into highmem")

  Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>

  Reported-by: syzbot+9ef37ac20608f4836256@syzkaller.appspotmail.com

  Closes: https://syzkaller.appspot.com/bug?extid=9ef37ac20608f4836256

  Tested-by: syzbot+9ef37ac20608f4836256@syzkaller.appspotmail.com

  Cc: <stable@vger.kernel.org>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  '
submodule:
- fs/nilfs2
hunk_count: 1
covered_count: 1
