id: 749d9d87c294c00ca856
bug_link: https://syzkaller.appspot.com/bug?extid=749d9d87c294c00ca856
title: 'BUG: sleeping function called from invalid context at net/core/sock.c:LINE
  (3)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 96c252bf1c5c6d7e2dac3dea42f3f0a9c939d20e
fix_commit: 26736a08ee0fb89a4f09bfb2c9f0805028ff63aa
datetime: '2018-02-19T14:38:50-05:00'
fix_commit_message: "tipc: don't call sock_release() in atomic context\n\nsyzbot reported\
  \ a scheduling while atomic issue at netns\ndestruction time:\n\nBUG: sleeping function\
  \ called from invalid context at net/core/sock.c:2769\nin_atomic(): 1, irqs_disabled():\
  \ 0, pid: 85, name: kworker/u4:3\n5 locks held by kworker/u4:3/85:\n  #0:  ((wq_completion)\"\
  %s\"\"netns\"){+.+.}, at: [<00000000c9792deb>]\nprocess_one_work+0xaaf/0x1af0 kernel/workqueue.c:2084\n\
  \  #1:  (net_cleanup_work){+.+.}, at: [<00000000adc12e2a>]\nprocess_one_work+0xb01/0x1af0\
  \ kernel/workqueue.c:2088\n  #2:  (net_sem){++++}, at: [<000000009ccb5669>] cleanup_net+0x23f/0xd20\n\
  net/core/net_namespace.c:494\n  #3:  (net_mutex){+.+.}, at: [<00000000a92767d9>]\
  \ cleanup_net+0xa7d/0xd20\nnet/core/net_namespace.c:496\n  #4:  (&(&srv->idr_lock)->rlock){+...},\
  \ at: [<000000001343e568>]\nspin_lock_bh include/linux/spinlock.h:315 [inline]\n\
  \  #4:  (&(&srv->idr_lock)->rlock){+...}, at: [<000000001343e568>]\ntipc_topsrv_stop+0x231/0x610\
  \ net/tipc/topsrv.c:685\nCPU: 0 PID: 85 Comm: kworker/u4:3 Not tainted 4.16.0-rc1+\
  \ #230\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS\n\
  Google 01/01/2011\nWorkqueue: netns cleanup_net\nCall Trace:\n  __dump_stack lib/dump_stack.c:17\
  \ [inline]\n  dump_stack+0x194/0x257 lib/dump_stack.c:53\n  ___might_sleep+0x2b2/0x470\
  \ kernel/sched/core.c:6128\n  __might_sleep+0x95/0x190 kernel/sched/core.c:6081\n\
  \  lock_sock_nested+0x37/0x110 net/core/sock.c:2769\n  lock_sock include/net/sock.h:1463\
  \ [inline]\n  tipc_release+0x103/0xff0 net/tipc/socket.c:572\n  sock_release+0x8d/0x1e0\
  \ net/socket.c:594\n  tipc_topsrv_stop+0x3c0/0x610 net/tipc/topsrv.c:696\n  tipc_exit_net+0x15/0x40\
  \ net/tipc/core.c:96\n  ops_exit_list.isra.6+0xae/0x150 net/core/net_namespace.c:148\n\
  \  cleanup_net+0x6ba/0xd20 net/core/net_namespace.c:529\n  process_one_work+0xbbf/0x1af0\
  \ kernel/workqueue.c:2113\n  worker_thread+0x223/0x1990 kernel/workqueue.c:2247\n\
  \  kthread+0x33c/0x400 kernel/kthread.c:238\n  ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:429\n\
  \nThis is caused by tipc_topsrv_stop() releasing the listener socket\nwith the idr\
  \ lock held. This changeset addresses the issue moving\nthe release operation outside\
  \ such lock.\n\nReported-and-tested-by: syzbot+749d9d87c294c00ca856@syzkaller.appspotmail.com\n\
  Fixes: 0ef897be12b8 (\"tipc: separate topology server listener socket from subcsriber\
  \ sockets\")\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>\nAcked-by:  ///jon\n\
  Signed-off-by: David S. Miller <davem@davemloft.net>\n"
submodule:
- net/tipc
hunk_count: 1
covered_count: 1
