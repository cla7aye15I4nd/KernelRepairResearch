id: 061f58eec3bde7ee8ffa
bug_link: https://syzkaller.appspot.com/bug?extid=061f58eec3bde7ee8ffa
title: 'KASAN: slab-use-after-free Read in htab_map_alloc (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 2506f6229bd0d067add26eea9e396929c903e226
fix_commit: 86735b57c905e775f05de995df35379366b72168
datetime: '2024-05-02T07:12:40-07:00'
fix_commit_message: "net/sched: unregister lockdep keys in qdisc_create/qdisc_alloc\
  \ error path\n\nNaresh and Eric report several errors (corrupted elements in the\
  \ dynamic\nkey hash list), when running tdc.py or syzbot. The error path of\nqdisc_alloc()\
  \ and qdisc_create() frees the qdisc memory, but it forgets\nto unregister the lockdep\
  \ key, thus causing use-after-free like the\nfollowing one:\n\n ==================================================================\n\
  \ BUG: KASAN: slab-use-after-free in lockdep_register_key+0x5f2/0x700\n Read of\
  \ size 8 at addr ffff88811236f2a8 by task ip/7925\n\n CPU: 26 PID: 7925 Comm: ip\
  \ Kdump: loaded Not tainted 6.9.0-rc2+ #648\n Hardware name: Supermicro SYS-6027R-72RF/X9DRH-7TF/7F/iTF/iF,\
  \ BIOS 3.0  07/26/2013\n Call Trace:\n  <TASK>\n  dump_stack_lvl+0x7c/0xc0\n  print_report+0xc9/0x610\n\
  \  kasan_report+0x89/0xc0\n  lockdep_register_key+0x5f2/0x700\n  qdisc_alloc+0x21d/0xb60\n\
  \  qdisc_create_dflt+0x63/0x3c0\n  attach_one_default_qdisc.constprop.37+0x8e/0x170\n\
  \  dev_activate+0x4bd/0xc30\n  __dev_open+0x275/0x380\n  __dev_change_flags+0x3f1/0x570\n\
  \  dev_change_flags+0x7c/0x160\n  do_setlink+0x1ea1/0x34b0\n  __rtnl_newlink+0x8c9/0x1510\n\
  \  rtnl_newlink+0x61/0x90\n  rtnetlink_rcv_msg+0x2f0/0xbc0\n  netlink_rcv_skb+0x120/0x380\n\
  \  netlink_unicast+0x420/0x630\n  netlink_sendmsg+0x732/0xbc0\n  __sock_sendmsg+0x1ea/0x280\n\
  \  ____sys_sendmsg+0x5a9/0x990\n  ___sys_sendmsg+0xf1/0x180\n  __sys_sendmsg+0xd3/0x180\n\
  \  do_syscall_64+0x96/0x180\n  entry_SYSCALL_64_after_hwframe+0x71/0x79\n RIP: 0033:0x7f9503f4fa07\n\
  \ Code: 0a 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b9 0f 1f 00 f3 0f 1e fa 64\
  \ 8b 04 25 18 00 00 00 85 c0 75 10 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 51\
  \ c3 48 83 ec 28 89 54 24 1c 48 89 74 24 10\n RSP: 002b:00007fff6c729068 EFLAGS:\
  \ 00000246 ORIG_RAX: 000000000000002e\n RAX: ffffffffffffffda RBX: 000000006630c681\
  \ RCX: 00007f9503f4fa07\n RDX: 0000000000000000 RSI: 00007fff6c7290d0 RDI: 0000000000000003\n\
  \ RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000078\n R10: 000000000000009b\
  \ R11: 0000000000000246 R12: 0000000000000001\n R13: 00007fff6c729180 R14: 0000000000000000\
  \ R15: 000055bf67dd9040\n  </TASK>\n\n Allocated by task 7745:\n  kasan_save_stack+0x1c/0x40\n\
  \  kasan_save_track+0x10/0x30\n  __kasan_kmalloc+0x7b/0x90\n  __kmalloc_node+0x1ff/0x460\n\
  \  qdisc_alloc+0xae/0xb60\n  qdisc_create+0xdd/0xfb0\n  tc_modify_qdisc+0x37e/0x1960\n\
  \  rtnetlink_rcv_msg+0x2f0/0xbc0\n  netlink_rcv_skb+0x120/0x380\n  netlink_unicast+0x420/0x630\n\
  \  netlink_sendmsg+0x732/0xbc0\n  __sock_sendmsg+0x1ea/0x280\n  ____sys_sendmsg+0x5a9/0x990\n\
  \  ___sys_sendmsg+0xf1/0x180\n  __sys_sendmsg+0xd3/0x180\n  do_syscall_64+0x96/0x180\n\
  \  entry_SYSCALL_64_after_hwframe+0x71/0x79\n\n Freed by task 7745:\n  kasan_save_stack+0x1c/0x40\n\
  \  kasan_save_track+0x10/0x30\n  kasan_save_free_info+0x36/0x60\n  __kasan_slab_free+0xfe/0x180\n\
  \  kfree+0x113/0x380\n  qdisc_create+0xafb/0xfb0\n  tc_modify_qdisc+0x37e/0x1960\n\
  \  rtnetlink_rcv_msg+0x2f0/0xbc0\n  netlink_rcv_skb+0x120/0x380\n  netlink_unicast+0x420/0x630\n\
  \  netlink_sendmsg+0x732/0xbc0\n  __sock_sendmsg+0x1ea/0x280\n  ____sys_sendmsg+0x5a9/0x990\n\
  \  ___sys_sendmsg+0xf1/0x180\n  __sys_sendmsg+0xd3/0x180\n  do_syscall_64+0x96/0x180\n\
  \  entry_SYSCALL_64_after_hwframe+0x71/0x79\n\nFix this ensuring that lockdep_unregister_key()\
  \ is called before the\nqdisc struct is freed, also in the error path of qdisc_create()\
  \ and\nqdisc_alloc().\n\nFixes: af0cb3fa3f9e (\"net/sched: fix false lockdep warning\
  \ on qdisc root lock\")\nReported-by: Linux Kernel Functional Testing <lkft@linaro.org>\n\
  Closes: https://lore.kernel.org/netdev/20240429221706.1492418-1-naresh.kamboju@linaro.org/\n\
  Signed-off-by: Davide Caratti <dcaratti@redhat.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\n\
  Reviewed-by: Ido Schimmel <idosch@nvidia.com>\nTested-by: Naresh Kamboju <naresh.kamboju@linaro.org>\n\
  Tested-by: Ido Schimmel <idosch@nvidia.com>\nLink: https://lore.kernel.org/r/2aa1ca0c0a3aa0acc15925c666c777a4b5de553c.1714496886.git.dcaratti@redhat.com\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/sched
hunk_count: 2
covered_count: 0
