id: a7d200a347f912723e5c
bug_link: https://syzkaller.appspot.com/bug?extid=a7d200a347f912723e5c
title: possible deadlock in netlink_set_err
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: c4fc88ad2a765224a648db8ab35f125e120fe41b
fix_commit: 8d61f926d42045961e6b65191c09e3678d86a9cf
datetime: '2023-06-22T19:35:06-07:00'
fix_commit_message: "netlink: fix potential deadlock in netlink_set_err()\n\nsyzbot\
  \ reported a possible deadlock in netlink_set_err() [1]\n\nA similar issue was fixed\
  \ in commit 1d482e666b8e (\"netlink: disable IRQs\nfor netlink_lock_table()\") in\
  \ netlink_lock_table()\n\nThis patch adds IRQ safety to netlink_set_err() and __netlink_diag_dump()\n\
  which were not covered by cited commit.\n\n[1]\n\nWARNING: possible irq lock inversion\
  \ dependency detected\n6.4.0-rc6-syzkaller-00240-g4e9f0ec38852 #0 Not tainted\n\n\
  syz-executor.2/23011 just changed the state of lock:\nffffffff8e1a7a58 (nl_table_lock){.+.?}-{2:2},\
  \ at: netlink_set_err+0x2e/0x3a0 net/netlink/af_netlink.c:1612\nbut this lock was\
  \ taken by another, SOFTIRQ-safe lock in the past:\n (&local->queue_stop_reason_lock){..-.}-{2:2}\n\
  \nand interrupts could create inverse lock ordering between them.\n\nother info\
  \ that might help us debug this:\n Possible interrupt unsafe locking scenario:\n\
  \n       CPU0                    CPU1\n       ----                    ----\n  lock(nl_table_lock);\n\
  \                               local_irq_disable();\n                         \
  \      lock(&local->queue_stop_reason_lock);\n                               lock(nl_table_lock);\n\
  \  <Interrupt>\n    lock(&local->queue_stop_reason_lock);\n\n *** DEADLOCK ***\n\
  \nFixes: 1d482e666b8e (\"netlink: disable IRQs for netlink_lock_table()\")\nReported-by:\
  \ syzbot+a7d200a347f912723e5c@syzkaller.appspotmail.com\nLink: https://syzkaller.appspot.com/bug?extid=a7d200a347f912723e5c\n\
  Link: https://lore.kernel.org/netdev/000000000000e38d1605fea5747e@google.com/T/#u\n\
  Signed-off-by: Eric Dumazet <edumazet@google.com>\nCc: Johannes Berg <johannes.berg@intel.com>\n\
  Link: https://lore.kernel.org/r/20230621154337.1668594-1-edumazet@google.com\nSigned-off-by:\
  \ Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/netlink
hunk_count: 5
covered_count: 2
