id: ee72b9a7aad1e5a77c5c
bug_link: https://syzkaller.appspot.com/bug?extid=ee72b9a7aad1e5a77c5c
title: possible deadlock in ext4_xattr_inode_iget (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 6140ceb9b224fd178f405a7805d3fd82d2d02c39
fix_commit: d1bc560e9a9c78d0b2314692847fc8661e0aeb99
datetime: '2024-08-26T23:52:02-04:00'
fix_commit_message: "ext4: nested locking for xattr inode\n\nAdd nested locking with\
  \ I_MUTEX_XATTR subclass to avoid lockdep warning\nwhile handling xattr inode on\
  \ file open syscall at ext4_xattr_inode_iget.\n\nBacktrace\nEXT4-fs (loop0): Ignoring\
  \ removed oldalloc option\n======================================================\n\
  WARNING: possible circular locking dependency detected\n5.10.0-syzkaller #0 Not\
  \ tainted\n------------------------------------------------------\nsyz-executor543/2794\
  \ is trying to acquire lock:\nffff8880215e1a48 (&ea_inode->i_rwsem#7/1){+.+.}-{3:3},\
  \ at: inode_lock include/linux/fs.h:782 [inline]\nffff8880215e1a48 (&ea_inode->i_rwsem#7/1){+.+.}-{3:3},\
  \ at: ext4_xattr_inode_iget+0x42a/0x5c0 fs/ext4/xattr.c:425\n\nbut task is already\
  \ holding lock:\nffff8880215e3278 (&ei->i_data_sem/3){++++}-{3:3}, at: ext4_setattr+0x136d/0x19c0\
  \ fs/ext4/inode.c:5559\n\nwhich lock already depends on the new lock.\n\nthe existing\
  \ dependency chain (in reverse order) is:\n\n-> #1 (&ei->i_data_sem/3){++++}-{3:3}:\n\
  \       lock_acquire+0x197/0x480 kernel/locking/lockdep.c:5566\n       down_write+0x93/0x180\
  \ kernel/locking/rwsem.c:1564\n       ext4_update_i_disksize fs/ext4/ext4.h:3267\
  \ [inline]\n       ext4_xattr_inode_write fs/ext4/xattr.c:1390 [inline]\n      \
  \ ext4_xattr_inode_lookup_create fs/ext4/xattr.c:1538 [inline]\n       ext4_xattr_set_entry+0x331a/0x3d80\
  \ fs/ext4/xattr.c:1662\n       ext4_xattr_ibody_set+0x124/0x390 fs/ext4/xattr.c:2228\n\
  \       ext4_xattr_set_handle+0xc27/0x14e0 fs/ext4/xattr.c:2385\n       ext4_xattr_set+0x219/0x390\
  \ fs/ext4/xattr.c:2498\n       ext4_xattr_user_set+0xc9/0xf0 fs/ext4/xattr_user.c:40\n\
  \       __vfs_setxattr+0x404/0x450 fs/xattr.c:177\n       __vfs_setxattr_noperm+0x11d/0x4f0\
  \ fs/xattr.c:208\n       __vfs_setxattr_locked+0x1f9/0x210 fs/xattr.c:266\n    \
  \   vfs_setxattr+0x112/0x2c0 fs/xattr.c:283\n       setxattr+0x1db/0x3e0 fs/xattr.c:548\n\
  \       path_setxattr+0x15a/0x240 fs/xattr.c:567\n       __do_sys_setxattr fs/xattr.c:582\
  \ [inline]\n       __se_sys_setxattr fs/xattr.c:578 [inline]\n       __x64_sys_setxattr+0xc5/0xe0\
  \ fs/xattr.c:578\n       do_syscall_64+0x6d/0xa0 arch/x86/entry/common.c:62\n  \
  \     entry_SYSCALL_64_after_hwframe+0x61/0xcb\n\n-> #0 (&ea_inode->i_rwsem#7/1){+.+.}-{3:3}:\n\
  \       check_prev_add kernel/locking/lockdep.c:2988 [inline]\n       check_prevs_add\
  \ kernel/locking/lockdep.c:3113 [inline]\n       validate_chain+0x1695/0x58f0 kernel/locking/lockdep.c:3729\n\
  \       __lock_acquire+0x12fd/0x20d0 kernel/locking/lockdep.c:4955\n       lock_acquire+0x197/0x480\
  \ kernel/locking/lockdep.c:5566\n       down_write+0x93/0x180 kernel/locking/rwsem.c:1564\n\
  \       inode_lock include/linux/fs.h:782 [inline]\n       ext4_xattr_inode_iget+0x42a/0x5c0\
  \ fs/ext4/xattr.c:425\n       ext4_xattr_inode_get+0x138/0x410 fs/ext4/xattr.c:485\n\
  \       ext4_xattr_move_to_block fs/ext4/xattr.c:2580 [inline]\n       ext4_xattr_make_inode_space\
  \ fs/ext4/xattr.c:2682 [inline]\n       ext4_expand_extra_isize_ea+0xe70/0x1bb0\
  \ fs/ext4/xattr.c:2774\n       __ext4_expand_extra_isize+0x304/0x3f0 fs/ext4/inode.c:5898\n\
  \       ext4_try_to_expand_extra_isize fs/ext4/inode.c:5941 [inline]\n       __ext4_mark_inode_dirty+0x591/0x810\
  \ fs/ext4/inode.c:6018\n       ext4_setattr+0x1400/0x19c0 fs/ext4/inode.c:5562\n\
  \       notify_change+0xbb6/0xe60 fs/attr.c:435\n       do_truncate+0x1de/0x2c0\
  \ fs/open.c:64\n       handle_truncate fs/namei.c:2970 [inline]\n       do_open\
  \ fs/namei.c:3311 [inline]\n       path_openat+0x29f3/0x3290 fs/namei.c:3425\n \
  \      do_filp_open+0x20b/0x450 fs/namei.c:3452\n       do_sys_openat2+0x124/0x460\
  \ fs/open.c:1207\n       do_sys_open fs/open.c:1223 [inline]\n       __do_sys_open\
  \ fs/open.c:1231 [inline]\n       __se_sys_open fs/open.c:1227 [inline]\n      \
  \ __x64_sys_open+0x221/0x270 fs/open.c:1227\n       do_syscall_64+0x6d/0xa0 arch/x86/entry/common.c:62\n\
  \       entry_SYSCALL_64_after_hwframe+0x61/0xcb\n\nother info that might help us\
  \ debug this:\n\n Possible unsafe locking scenario:\n\n       CPU0             \
  \       CPU1\n       ----                    ----\n  lock(&ei->i_data_sem/3);\n\
  \                               lock(&ea_inode->i_rwsem#7/1);\n                \
  \               lock(&ei->i_data_sem/3);\n  lock(&ea_inode->i_rwsem#7/1);\n\n ***\
  \ DEADLOCK ***\n\n5 locks held by syz-executor543/2794:\n #0: ffff888026fbc448 (sb_writers#4){.+.+}-{0:0},\
  \ at: mnt_want_write+0x4a/0x2a0 fs/namespace.c:365\n #1: ffff8880215e3488 (&sb->s_type->i_mutex_key#7){++++}-{3:3},\
  \ at: inode_lock include/linux/fs.h:782 [inline]\n #1: ffff8880215e3488 (&sb->s_type->i_mutex_key#7){++++}-{3:3},\
  \ at: do_truncate+0x1cf/0x2c0 fs/open.c:62\n #2: ffff8880215e3310 (&ei->i_mmap_sem){++++}-{3:3},\
  \ at: ext4_setattr+0xec4/0x19c0 fs/ext4/inode.c:5519\n #3: ffff8880215e3278 (&ei->i_data_sem/3){++++}-{3:3},\
  \ at: ext4_setattr+0x136d/0x19c0 fs/ext4/inode.c:5559\n #4: ffff8880215e30c8 (&ei->xattr_sem){++++}-{3:3},\
  \ at: ext4_write_trylock_xattr fs/ext4/xattr.h:162 [inline]\n #4: ffff8880215e30c8\
  \ (&ei->xattr_sem){++++}-{3:3}, at: ext4_try_to_expand_extra_isize fs/ext4/inode.c:5938\
  \ [inline]\n #4: ffff8880215e30c8 (&ei->xattr_sem){++++}-{3:3}, at: __ext4_mark_inode_dirty+0x4fb/0x810\
  \ fs/ext4/inode.c:6018\n\nstack backtrace:\nCPU: 1 PID: 2794 Comm: syz-executor543\
  \ Not tainted 5.10.0-syzkaller #0\nHardware name: Google Google Compute Engine/Google\
  \ Compute Engine, BIOS Google 03/27/2024\nCall Trace:\n __dump_stack lib/dump_stack.c:77\
  \ [inline]\n dump_stack+0x177/0x211 lib/dump_stack.c:118\n print_circular_bug+0x146/0x1b0\
  \ kernel/locking/lockdep.c:2002\n check_noncircular+0x2cc/0x390 kernel/locking/lockdep.c:2123\n\
  \ check_prev_add kernel/locking/lockdep.c:2988 [inline]\n check_prevs_add kernel/locking/lockdep.c:3113\
  \ [inline]\n validate_chain+0x1695/0x58f0 kernel/locking/lockdep.c:3729\n __lock_acquire+0x12fd/0x20d0\
  \ kernel/locking/lockdep.c:4955\n lock_acquire+0x197/0x480 kernel/locking/lockdep.c:5566\n\
  \ down_write+0x93/0x180 kernel/locking/rwsem.c:1564\n inode_lock include/linux/fs.h:782\
  \ [inline]\n ext4_xattr_inode_iget+0x42a/0x5c0 fs/ext4/xattr.c:425\n ext4_xattr_inode_get+0x138/0x410\
  \ fs/ext4/xattr.c:485\n ext4_xattr_move_to_block fs/ext4/xattr.c:2580 [inline]\n\
  \ ext4_xattr_make_inode_space fs/ext4/xattr.c:2682 [inline]\n ext4_expand_extra_isize_ea+0xe70/0x1bb0\
  \ fs/ext4/xattr.c:2774\n __ext4_expand_extra_isize+0x304/0x3f0 fs/ext4/inode.c:5898\n\
  \ ext4_try_to_expand_extra_isize fs/ext4/inode.c:5941 [inline]\n __ext4_mark_inode_dirty+0x591/0x810\
  \ fs/ext4/inode.c:6018\n ext4_setattr+0x1400/0x19c0 fs/ext4/inode.c:5562\n notify_change+0xbb6/0xe60\
  \ fs/attr.c:435\n do_truncate+0x1de/0x2c0 fs/open.c:64\n handle_truncate fs/namei.c:2970\
  \ [inline]\n do_open fs/namei.c:3311 [inline]\n path_openat+0x29f3/0x3290 fs/namei.c:3425\n\
  \ do_filp_open+0x20b/0x450 fs/namei.c:3452\n do_sys_openat2+0x124/0x460 fs/open.c:1207\n\
  \ do_sys_open fs/open.c:1223 [inline]\n __do_sys_open fs/open.c:1231 [inline]\n\
  \ __se_sys_open fs/open.c:1227 [inline]\n __x64_sys_open+0x221/0x270 fs/open.c:1227\n\
  \ do_syscall_64+0x6d/0xa0 arch/x86/entry/common.c:62\n entry_SYSCALL_64_after_hwframe+0x61/0xcb\n\
  RIP: 0033:0x7f0cde4ea229\nCode: 28 00 00 00 75 05 48 83 c4 28 c3 e8 21 18 00 00\
  \ 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05\
  \ <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007ffd81d1c978\
  \ EFLAGS: 00000246 ORIG_RAX: 0000000000000002\nRAX: ffffffffffffffda RBX: 0030656c69662f30\
  \ RCX: 00007f0cde4ea229\nRDX: 0000000000000089 RSI: 00000000000a0a00 RDI: 00000000200001c0\n\
  RBP: 2f30656c69662f2e R08: 0000000000208000 R09: 0000000000208000\nR10: 0000000000000000\
  \ R11: 0000000000000246 R12: 00007ffd81d1c9c0\nR13: 00007ffd81d1ca00 R14: 0000000000080000\
  \ R15: 0000000000000003\nEXT4-fs error (device loop0): ext4_expand_extra_isize_ea:2730:\
  \ inode #13: comm syz-executor543: corrupted in-inode xattr\n\nSigned-off-by: Wojciech\
  \ GÅ‚adysz <wojciech.gladysz@infogain.com>\nLink: https://patch.msgid.link/20240801143827.19135-1-wojciech.gladysz@infogain.com\n\
  Signed-off-by: Theodore Ts'o <tytso@mit.edu>\n"
submodule:
- fs/ext4
hunk_count: 2
covered_count: 1
