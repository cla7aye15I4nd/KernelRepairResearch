id: 4a7438e774b21ddd8eca
bug_link: https://syzkaller.appspot.com/bug?extid=4a7438e774b21ddd8eca
title: general protection fault in wb_workfn (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 0ae52ddf5bd7f685bb43d7687290f6c2eeacfb31
fix_commit: 3ee7e8697d5860b173132606d80a9cd35e7113ee
datetime: '2018-06-22T12:08:07-06:00'
fix_commit_message: "bdi: Fix another oops in wb_workfn()\n\nsyzbot is reporting NULL\
  \ pointer dereference at wb_workfn() [1] due to\nwb->bdi->dev being NULL. And Dmitry\
  \ confirmed that wb->state was\nWB_shutting_down after wb->bdi->dev became NULL.\
  \ This indicates that\nunregister_bdi() failed to call wb_shutdown() on one of wb\
  \ objects.\n\nThe problem is in cgwb_bdi_unregister() which does cgwb_kill() and\
  \ thus\ndrops bdi's reference to wb structures before going through the list of\n\
  wbs again and calling wb_shutdown() on each of them. This way the loop\niterating\
  \ through all wbs can easily miss a wb if that wb has already\npassed through cgwb_remove_from_bdi_list()\
  \ called from wb_shutdown()\nfrom cgwb_release_workfn() and as a result fully shutdown\
  \ bdi although\nwb_workfn() for this wb structure is still running. In fact there\
  \ are\nalso other ways cgwb_bdi_unregister() can race with\ncgwb_release_workfn()\
  \ leading e.g. to use-after-free issues:\n\nCPU1                            CPU2\n\
  \                                cgwb_bdi_unregister()\n                       \
  \           cgwb_kill(*slot);\n\ncgwb_release()\n  queue_work(cgwb_release_wq, &wb->release_work);\n\
  cgwb_release_workfn()\n                                  wb = list_first_entry(&bdi->wb_list,\
  \ ...)\n                                  spin_unlock_irq(&cgwb_lock);\n  wb_shutdown(wb);\n\
  \  ...\n  kfree_rcu(wb, rcu);\n                                  wb_shutdown(wb);\
  \ -> oops use-after-free\n\nWe solve these issues by synchronizing writeback structure\
  \ shutdown from\ncgwb_bdi_unregister() with cgwb_release_workfn() using a new mutex.\
  \ That\nway we also no longer need synchronization using WB_shutting_down as the\n\
  mutex provides it for CONFIG_CGROUP_WRITEBACK case and without\nCONFIG_CGROUP_WRITEBACK\
  \ wb_shutdown() can be called only once from\nbdi_unregister().\n\nReported-by:\
  \ syzbot <syzbot+4a7438e774b21ddd8eca@syzkaller.appspotmail.com>\nAcked-by: Tejun\
  \ Heo <tj@kernel.org>\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Jens\
  \ Axboe <axboe@kernel.dk>\n"
submodule:
- include/linux
- mm
hunk_count: 8
covered_count: 0
