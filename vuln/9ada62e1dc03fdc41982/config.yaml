id: 9ada62e1dc03fdc41982
bug_link: https://syzkaller.appspot.com/bug?extid=9ada62e1dc03fdc41982
title: WARNING in cleanup_net (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 1c4e97dd2d3c9a3e84f7e26346aa39bc426d3249
fix_commit: 2a750d6a5b365265dbda33330a6188547ddb5c24
datetime: '2024-03-12T18:56:16-07:00'
fix_commit_message: "rds: tcp: Fix use-after-free of net in reqsk_timer_handler().\n\
  \nsyzkaller reported a warning of netns tracker [0] followed by KASAN\nsplat [1]\
  \ and another ref tracker warning [1].\n\nsyzkaller could not find a repro, but\
  \ in the log, the only suspicious\nsequence was as follows:\n\n  18:26:22 executing\
  \ program 1:\n  r0 = socket$inet6_mptcp(0xa, 0x1, 0x106)\n  ...\n  connect$inet6(r0,\
  \ &(0x7f0000000080)={0xa, 0x4001, 0x0, @loopback}, 0x1c) (async)\n\nThe notable\
  \ thing here is 0x4001 in connect(), which is RDS_TCP_PORT.\n\nSo, the scenario\
  \ would be:\n\n  1. unshare(CLONE_NEWNET) creates a per netns tcp listener in\n\
  \      rds_tcp_listen_init().\n  2. syz-executor connect()s to it and creates a\
  \ reqsk.\n  3. syz-executor exit()s immediately.\n  4. netns is dismantled.  [0]\n\
  \  5. reqsk timer is fired, and UAF happens while freeing reqsk.  [1]\n  6. listener\
  \ is freed after RCU grace period.  [2]\n\nBasically, reqsk assumes that the listener\
  \ guarantees netns safety\nuntil all reqsk timers are expired by holding the listener's\
  \ refcount.\nHowever, this was not the case for kernel sockets.\n\nCommit 740ea3c4a0b2\
  \ (\"tcp: Clean up kernel listener's reqsk in\ninet_twsk_purge()\") fixed this issue\
  \ only for per-netns ehash.\n\nLet's apply the same fix for the global ehash.\n\n\
  [0]:\nref_tracker: net notrefcnt@0000000065449cc3 has 1/1 users at\n     sk_alloc\
  \ (./include/net/net_namespace.h:337 net/core/sock.c:2146)\n     inet6_create (net/ipv6/af_inet6.c:192\
  \ net/ipv6/af_inet6.c:119)\n     __sock_create (net/socket.c:1572)\n     rds_tcp_listen_init\
  \ (net/rds/tcp_listen.c:279)\n     rds_tcp_init_net (net/rds/tcp.c:577)\n     ops_init\
  \ (net/core/net_namespace.c:137)\n     setup_net (net/core/net_namespace.c:340)\n\
  \     copy_net_ns (net/core/net_namespace.c:497)\n     create_new_namespaces (kernel/nsproxy.c:110)\n\
  \     unshare_nsproxy_namespaces (kernel/nsproxy.c:228 (discriminator 4))\n    \
  \ ksys_unshare (kernel/fork.c:3429)\n     __x64_sys_unshare (kernel/fork.c:3496)\n\
  \     do_syscall_64 (arch/x86/entry/common.c:52 arch/x86/entry/common.c:83)\n  \
  \   entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:129)\n...\nWARNING:\
  \ CPU: 0 PID: 27 at lib/ref_tracker.c:179 ref_tracker_dir_exit (lib/ref_tracker.c:179)\n\
  \n[1]:\nBUG: KASAN: slab-use-after-free in inet_csk_reqsk_queue_drop (./include/net/inet_hashtables.h:180\
  \ net/ipv4/inet_connection_sock.c:952 net/ipv4/inet_connection_sock.c:966)\nRead\
  \ of size 8 at addr ffff88801b370400 by task swapper/0/0\nHardware name: QEMU Standard\
  \ PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014\n\
  Call Trace:\n <IRQ>\n dump_stack_lvl (lib/dump_stack.c:107 (discriminator 1))\n\
  \ print_report (mm/kasan/report.c:378 mm/kasan/report.c:488)\n kasan_report (mm/kasan/report.c:603)\n\
  \ inet_csk_reqsk_queue_drop (./include/net/inet_hashtables.h:180 net/ipv4/inet_connection_sock.c:952\
  \ net/ipv4/inet_connection_sock.c:966)\n reqsk_timer_handler (net/ipv4/inet_connection_sock.c:979\
  \ net/ipv4/inet_connection_sock.c:1092)\n call_timer_fn (./arch/x86/include/asm/jump_label.h:27\
  \ ./include/linux/jump_label.h:207 ./include/trace/events/timer.h:127 kernel/time/timer.c:1701)\n\
  \ __run_timers.part.0 (kernel/time/timer.c:1752 kernel/time/timer.c:2038)\n run_timer_softirq\
  \ (kernel/time/timer.c:2053)\n __do_softirq (./arch/x86/include/asm/jump_label.h:27\
  \ ./include/linux/jump_label.h:207 ./include/trace/events/irq.h:142 kernel/softirq.c:554)\n\
  \ irq_exit_rcu (kernel/softirq.c:427 kernel/softirq.c:632 kernel/softirq.c:644)\n\
  \ sysvec_apic_timer_interrupt (arch/x86/kernel/apic/apic.c:1076 (discriminator 14))\n\
  \ </IRQ>\n\nAllocated by task 258 on cpu 0 at 83.612050s:\n kasan_save_stack (mm/kasan/common.c:48)\n\
  \ kasan_save_track (mm/kasan/common.c:68)\n __kasan_slab_alloc (mm/kasan/common.c:343)\n\
  \ kmem_cache_alloc (mm/slub.c:3813 mm/slub.c:3860 mm/slub.c:3867)\n copy_net_ns\
  \ (./include/linux/slab.h:701 net/core/net_namespace.c:421 net/core/net_namespace.c:480)\n\
  \ create_new_namespaces (kernel/nsproxy.c:110)\n unshare_nsproxy_namespaces (kernel/nsproxy.c:228\
  \ (discriminator 4))\n ksys_unshare (kernel/fork.c:3429)\n __x64_sys_unshare (kernel/fork.c:3496)\n\
  \ do_syscall_64 (arch/x86/entry/common.c:52 arch/x86/entry/common.c:83)\n entry_SYSCALL_64_after_hwframe\
  \ (arch/x86/entry/entry_64.S:129)\n\nFreed by task 27 on cpu 0 at 329.158864s:\n\
  \ kasan_save_stack (mm/kasan/common.c:48)\n kasan_save_track (mm/kasan/common.c:68)\n\
  \ kasan_save_free_info (mm/kasan/generic.c:643)\n __kasan_slab_free (mm/kasan/common.c:265)\n\
  \ kmem_cache_free (mm/slub.c:4299 mm/slub.c:4363)\n cleanup_net (net/core/net_namespace.c:456\
  \ net/core/net_namespace.c:446 net/core/net_namespace.c:639)\n process_one_work\
  \ (kernel/workqueue.c:2638)\n worker_thread (kernel/workqueue.c:2700 kernel/workqueue.c:2787)\n\
  \ kthread (kernel/kthread.c:388)\n ret_from_fork (arch/x86/kernel/process.c:153)\n\
  \ ret_from_fork_asm (arch/x86/entry/entry_64.S:250)\n\nThe buggy address belongs\
  \ to the object at ffff88801b370000\n which belongs to the cache net_namespace of\
  \ size 4352\nThe buggy address is located 1024 bytes inside of\n freed 4352-byte\
  \ region [ffff88801b370000, ffff88801b371100)\n\n[2]:\nWARNING: CPU: 0 PID: 95 at\
  \ lib/ref_tracker.c:228 ref_tracker_free (lib/ref_tracker.c:228 (discriminator 1))\n\
  Modules linked in:\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\
  \ rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014\nRIP: 0010:ref_tracker_free\
  \ (lib/ref_tracker.c:228 (discriminator 1))\n...\nCall Trace:\n<IRQ>\n __sk_destruct\
  \ (./include/net/net_namespace.h:353 net/core/sock.c:2204)\n rcu_core (./arch/x86/include/asm/preempt.h:26\
  \ kernel/rcu/tree.c:2165 kernel/rcu/tree.c:2433)\n __do_softirq (./arch/x86/include/asm/jump_label.h:27\
  \ ./include/linux/jump_label.h:207 ./include/trace/events/irq.h:142 kernel/softirq.c:554)\n\
  \ irq_exit_rcu (kernel/softirq.c:427 kernel/softirq.c:632 kernel/softirq.c:644)\n\
  \ sysvec_apic_timer_interrupt (arch/x86/kernel/apic/apic.c:1076 (discriminator 14))\n\
  </IRQ>\n\nReported-by: syzkaller <syzkaller@googlegroups.com>\nSuggested-by: Eric\
  \ Dumazet <edumazet@google.com>\nFixes: 467fa15356ac (\"RDS-TCP: Support multiple\
  \ RDS-TCP listen endpoints, one per netns.\")\nSigned-off-by: Kuniyuki Iwashima\
  \ <kuniyu@amazon.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://lore.kernel.org/r/20240308200122.64357-3-kuniyu@amazon.com\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/ipv4
hunk_count: 1
covered_count: 0
