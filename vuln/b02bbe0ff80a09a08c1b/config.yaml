id: b02bbe0ff80a09a08c1b
bug_link: https://syzkaller.appspot.com/bug?extid=b02bbe0ff80a09a08c1b
title: possible deadlock in lock_mm_and_find_vma (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: f2330b650e97a68c1afce66305f10651a9544037
fix_commit: 58a039e679fe72bd0efa8b2abe669a7914bb4429
datetime: '2024-10-28T21:40:41-07:00'
fix_commit_message: 'mm: split critical region in remap_file_pages() and invoke LSMs
  in between


  Commit ea7e2d5e49c0 ("mm: call the security_mmap_file() LSM hook in

  remap_file_pages()") fixed a security issue, it added an LSM check when

  trying to remap file pages, so that LSMs have the opportunity to evaluate

  such action like for other memory operations such as mmap() and

  mprotect().


  However, that commit called security_mmap_file() inside the mmap_lock

  lock, while the other calls do it before taking the lock, after commit

  8b3ec6814c83 ("take security_mmap_file() outside of ->mmap_sem").


  This caused lock inversion issue with IMA which was taking the mmap_lock

  and i_mutex lock in the opposite way when the remap_file_pages() system

  call was called.


  Solve the issue by splitting the critical region in remap_file_pages() in

  two regions: the first takes a read lock of mmap_lock, retrieves the VMA

  and the file descriptor associated, and calculates the ''prot'' and ''flags''

  variables; the second takes a write lock on mmap_lock, checks that the VMA

  flags and the VMA file descriptor are the same as the ones obtained in the

  first critical region (otherwise the system call fails), and calls

  do_mmap().


  In between, after releasing the read lock and before taking the write

  lock, call security_mmap_file(), and solve the lock inversion issue.


  Link: https://lkml.kernel.org/r/20241018161415.3845146-1-roberto.sassu@huaweicloud.com

  Fixes: ea7e2d5e49c0 ("mm: call the security_mmap_file() LSM hook in remap_file_pages()")

  Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>

  Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>

  Reported-by: syzbot+1cd571a672400ef3a930@syzkaller.appspotmail.com

  Closes: https://lore.kernel.org/linux-security-module/66f7b10e.050a0220.46d20.0036.GAE@google.com/

  Tested-by: Roberto Sassu <roberto.sassu@huawei.com>

  Reviewed-by: Roberto Sassu <roberto.sassu@huawei.com>

  Reviewed-by: Jann Horn <jannh@google.com>

  Reviewed-by: Lorenzo Stoakes <lorenzo.stoakes@oracle.com>

  Reviewed-by: Liam R. Howlett <Liam.Howlett@Oracle.com>

  Reviewed-by: Paul Moore <paul@paul-moore.com>

  Tested-by: syzbot+1cd571a672400ef3a930@syzkaller.appspotmail.com

  Cc: Jarkko Sakkinen <jarkko@kernel.org>

  Cc: Dmitry Kasatkin <dmitry.kasatkin@gmail.com>

  Cc: Eric Snowberg <eric.snowberg@oracle.com>

  Cc: James Morris <jmorris@namei.org>

  Cc: Mimi Zohar <zohar@linux.ibm.com>

  Cc: "Serge E. Hallyn" <serge@hallyn.com>

  Cc: Shu Han <ebpqwerty472123@gmail.com>

  Cc: Vlastimil Babka <vbabka@suse.cz>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  '
submodule:
- mm
hunk_count: 3
covered_count: 3
