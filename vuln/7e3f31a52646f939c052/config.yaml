id: 7e3f31a52646f939c052
bug_link: https://syzkaller.appspot.com/bug?extid=7e3f31a52646f939c052
title: 'INFO: rcu detected stall in __snd_pcm_lib_xfer (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: b580fbfff13b01fa79a0760cbb6386f33bc9e10b
fix_commit: e15dc99dbb9cf99f6432e8e3c0b3a8f7a3403a86
datetime: '2018-04-07T13:10:11+02:00'
fix_commit_message: 'ALSA: pcm: Fix endless loop for XRUN recovery in OSS emulation


  The commit 02a5d6925cd3 ("ALSA: pcm: Avoid potential races between OSS

  ioctls and read/write") split the PCM preparation code to a locked

  version, and it added a sanity check of runtime->oss.prepare flag

  along with the change.  This leaded to an endless loop when the stream

  gets XRUN: namely, snd_pcm_oss_write3() and co call

  snd_pcm_oss_prepare() without setting runtime->oss.prepare flag and

  the loop continues until the PCM state reaches to another one.


  As the function is supposed to execute the preparation

  unconditionally, drop the invalid state check there.


  The bug was triggered by syzkaller.


  Fixes: 02a5d6925cd3 ("ALSA: pcm: Avoid potential races between OSS ioctls and read/write")

  Reported-by: syzbot+150189c103427d31a053@syzkaller.appspotmail.com

  Reported-by: syzbot+7e3f31a52646f939c052@syzkaller.appspotmail.com

  Reported-by: syzbot+4f2016cf5185da7759dc@syzkaller.appspotmail.com

  Cc: <stable@vger.kernel.org>

  Signed-off-by: Takashi Iwai <tiwai@suse.de>

  '
submodule:
- sound/core/oss
hunk_count: 1
covered_count: 0
