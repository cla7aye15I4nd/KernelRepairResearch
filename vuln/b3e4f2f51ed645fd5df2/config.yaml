id: b3e4f2f51ed645fd5df2
bug_link: https://syzkaller.appspot.com/bug?extid=b3e4f2f51ed645fd5df2
title: 'KCSAN: data-race in __flush_work / __flush_work (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 98cc1730c89467fc26e2dc2ceb2a014f332daa97
fix_commit: 8bc35475ef1a23b0e224f3242eb11c76cab0ea88
datetime: '2024-08-05T18:33:56-10:00'
fix_commit_message: "workqueue: Fix spruious data race in __flush_work()\n\nWhen flushing\
  \ a work item for cancellation, __flush_work() knows that it\nexclusively owns the\
  \ work item through its PENDING bit. 134874e2eee9\n(\"workqueue: Allow cancel_work_sync()\
  \ and disable_work() from atomic\ncontexts on BH work items\") added a read of @work->data\
  \ to determine whether\nto use busy wait for BH work items that are being canceled.\
  \ While the read\nis safe when @from_cancel, @work->data was read before testing\
  \ @from_cancel\nto simplify code structure:\n\n\tdata = *work_data_bits(work);\n\
  \tif (from_cancel &&\n\t    !WARN_ON_ONCE(data & WORK_STRUCT_PWQ) && (data & WORK_OFFQ_BH))\
  \ {\n\nWhile the read data was never used if !@from_cancel, this could trigger\n\
  KCSAN data race detection spuriously:\n\n  ==================================================================\n\
  \  BUG: KCSAN: data-race in __flush_work / __flush_work\n\n  write to 0xffff8881223aa3e8\
  \ of 8 bytes by task 3998 on cpu 0:\n   instrument_write include/linux/instrumented.h:41\
  \ [inline]\n   ___set_bit include/asm-generic/bitops/instrumented-non-atomic.h:28\
  \ [inline]\n   insert_wq_barrier kernel/workqueue.c:3790 [inline]\n   start_flush_work\
  \ kernel/workqueue.c:4142 [inline]\n   __flush_work+0x30b/0x570 kernel/workqueue.c:4178\n\
  \   flush_work kernel/workqueue.c:4229 [inline]\n   ...\n\n  read to 0xffff8881223aa3e8\
  \ of 8 bytes by task 50 on cpu 1:\n   __flush_work+0x42a/0x570 kernel/workqueue.c:4188\n\
  \   flush_work kernel/workqueue.c:4229 [inline]\n   flush_delayed_work+0x66/0x70\
  \ kernel/workqueue.c:4251\n   ...\n\n  value changed: 0x0000000000400000 -> 0xffff88810006c00d\n\
  \nReorganize the code so that @from_cancel is tested before @work->data is\naccessed.\
  \ The only problem is triggering KCSAN detection spuriously. This\nshouldn't need\
  \ READ_ONCE() or other access qualifiers.\n\nNo functional changes.\n\nSigned-off-by:\
  \ Tejun Heo <tj@kernel.org>\nReported-by: syzbot+b3e4f2f51ed645fd5df2@syzkaller.appspotmail.com\n\
  Fixes: 134874e2eee9 (\"workqueue: Allow cancel_work_sync() and disable_work() from\
  \ atomic contexts on BH work items\")\nLink: http://lkml.kernel.org/r/000000000000ae429e061eea2157@google.com\n\
  Cc: Jens Axboe <axboe@kernel.dk>\n"
submodule:
- kernel
hunk_count: 2
covered_count: 2
