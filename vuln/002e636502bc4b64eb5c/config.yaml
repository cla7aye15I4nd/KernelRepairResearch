id: 002e636502bc4b64eb5c
bug_link: https://syzkaller.appspot.com/bug?extid=002e636502bc4b64eb5c
title: general protection fault in get_task_pid
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 6fbc7275c7a9ba97877050335f290341a1fd8dbf
fix_commit: 28dd29c06d0dede4b32b2c559cff21955a830928
datetime: '2019-07-01T16:43:30+02:00'
fix_commit_message: "fork: return proper negative error code\n\nMake sure to return\
  \ a proper negative error code from copy_process()\nwhen anon_inode_getfile() fails\
  \ with CLONE_PIDFD.\nOtherwise _do_fork() will not detect an error and get_task_pid()\
  \ will\noperator on a nonsensical pointer:\n\nR10: 0000000000000000 R11: 0000000000000246\
  \ R12: 00000000006dbc2c\nR13: 00007ffc15fbb0ff R14: 00007ff07e47e9c0 R15: 0000000000000000\n\
  kasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref\
  \ or user memory access\ngeneral protection fault: 0000 [#1] PREEMPT SMP KASAN\n\
  CPU: 1 PID: 7990 Comm: syz-executor290 Not tainted 5.2.0-rc6+ #9\nHardware name:\
  \ Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle 01/01/2011\n\
  RIP: 0010:__read_once_size include/linux/compiler.h:194 [inline]\nRIP: 0010:get_task_pid+0xe1/0x210\
  \ kernel/pid.c:372\nCode: 89 ff e8 62 27 5f 00 49 8b 07 44 89 f1 4c 8d bc c8 90\
  \ 01 00 00 eb 0c\ne8 0d fe 25 00 49 81 c7 38 05 00 00 4c 89 f8 48 c1 e8 03 <80>\
  \ 3c 18 00 74\n08 4c 89 ff e8 31 27 5f 00 4d 8b 37 e8 f9 47 12 00\nRSP: 0018:ffff88808a4a7d78\
  \ EFLAGS: 00010203\nRAX: 00000000000000a7 RBX: dffffc0000000000 RCX: ffff888088180600\n\
  RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000\nRBP: ffff88808a4a7d90\
  \ R08: ffffffff814fb3a8 R09: ffffed1015d66bf8\nR10: ffffed1015d66bf8 R11: 1ffff11015d66bf7\
  \ R12: 0000000000041ffc\nR13: 1ffff11011494fbc R14: 0000000000000000 R15: 000000000000053d\n\
  FS:  00007ff07e47e700(0000) GS:ffff8880aeb00000(0000) knlGS:0000000000000000\nCS:\
  \  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000004b5100 CR3: 0000000094df2000\
  \ CR4: 00000000001406e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n\
  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n\
  \  _do_fork+0x1b9/0x5f0 kernel/fork.c:2360\n  __do_sys_clone kernel/fork.c:2454\
  \ [inline]\n  __se_sys_clone kernel/fork.c:2448 [inline]\n  __x64_sys_clone+0xc1/0xd0\
  \ kernel/fork.c:2448\n  do_syscall_64+0xfe/0x140 arch/x86/entry/common.c:301\n \
  \ entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nLink: https://lore.kernel.org/lkml/000000000000e0dc0d058c9e7142@google.com\n\
  Reported-and-tested-by: syzbot+002e636502bc4b64eb5c@syzkaller.appspotmail.com\n\
  Fixes: 6fd2fe494b17 (\"copy_process(): don't use ksys_close() on cleanups\")\nCc:\
  \ Jann Horn <jannh@google.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by:\
  \ Christian Brauner <christian@brauner.io>\n"
submodule:
- kernel
hunk_count: 1
covered_count: 0
