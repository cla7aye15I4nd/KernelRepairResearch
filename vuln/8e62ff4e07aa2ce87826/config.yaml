id: 8e62ff4e07aa2ce87826
bug_link: https://syzkaller.appspot.com/bug?extid=8e62ff4e07aa2ce87826
title: 'KASAN: use-after-free Read in snd_pcm_timer_resolution'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 903d271a3f83826ef810a4b5dbbd9842cf0465d6
fix_commit: a820ccbe21e8ce8e86c39cd1d3bc8c7d1cbb949b
datetime: '2018-04-03T08:36:40+02:00'
fix_commit_message: 'ALSA: pcm: Fix UAF at PCM release via PCM timer access


  The PCM runtime object is created and freed dynamically at PCM stream

  open / close time.  This is tracked via substream->runtime, and it''s

  cleared at snd_pcm_detach_substream().


  The runtime object assignment is protected by PCM open_mutex, so for

  all PCM operations, it''s safely handled.  However, each PCM substream

  provides also an ALSA timer interface, and user-space can access to

  this while closing a PCM substream.  This may eventually lead to a

  UAF, as snd_pcm_timer_resolution() tries to access the runtime while

  clearing it in other side.


  Fortunately, it''s the only concurrent access from the PCM timer, and

  it merely reads runtime->timer_resolution field.  So, we can avoid the

  race by reordering kfree() and wrapping the substream->runtime

  clearance with the corresponding timer lock.


  Reported-by: syzbot+8e62ff4e07aa2ce87826@syzkaller.appspotmail.com

  Cc: <stable@vger.kernel.org>

  Signed-off-by: Takashi Iwai <tiwai@suse.de>

  '
submodule:
- sound/core
hunk_count: 2
covered_count: 2
