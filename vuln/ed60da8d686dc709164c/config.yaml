id: ed60da8d686dc709164c
bug_link: https://syzkaller.appspot.com/bug?extid=ed60da8d686dc709164c
title: general protection fault in tipc_mon_reinit_self (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 4bc12818b363bd30f0f7348dd9ab077290a637ae
fix_commit: d63527e109e811ef11abb1c2985048fdb528b4cb
datetime: '2025-04-22T18:43:57-07:00'
fix_commit_message: "tipc: fix NULL pointer dereference in tipc_mon_reinit_self()\n\
  \nsyzbot reported:\n\ntipc: Node number set to 1055423674\nOops: general protection\
  \ fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] SMP KASAN\
  \ NOPTI\nKASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]\n\
  CPU: 3 UID: 0 PID: 6017 Comm: kworker/3:5 Not tainted 6.15.0-rc1-syzkaller-00246-g900241a5cc15\
  \ #0 PREEMPT(full)\nHardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1\
  \ 04/01/2014\nWorkqueue: events tipc_net_finalize_work\nRIP: 0010:tipc_mon_reinit_self+0x11c/0x210\
  \ net/tipc/monitor.c:719\n...\nRSP: 0018:ffffc9000356fb68 EFLAGS: 00010246\nRAX:\
  \ 0000000000000000 RBX: 0000000000000000 RCX: 000000003ee87cba\nRDX: 0000000000000000\
  \ RSI: ffffffff8dbc56a7 RDI: ffff88804c2cc010\nRBP: dffffc0000000000 R08: 0000000000000001\
  \ R09: 0000000000000000\nR10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000007\n\
  R13: fffffbfff2111097 R14: ffff88804ead8000 R15: ffff88804ead9010\nFS:  0000000000000000(0000)\
  \ GS:ffff888097ab9000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000\
  \ CR0: 0000000080050033\nCR2: 00000000f720eb00 CR3: 000000000e182000 CR4: 0000000000352ef0\n\
  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000\
  \ DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <TASK>\n tipc_net_finalize+0x10b/0x180\
  \ net/tipc/net.c:140\n process_one_work+0x9cc/0x1b70 kernel/workqueue.c:3238\n process_scheduled_works\
  \ kernel/workqueue.c:3319 [inline]\n worker_thread+0x6c8/0xf10 kernel/workqueue.c:3400\n\
  \ kthread+0x3c2/0x780 kernel/kthread.c:464\n ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:153\n\
  \ ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:245\n </TASK>\n...\nRIP:\
  \ 0010:tipc_mon_reinit_self+0x11c/0x210 net/tipc/monitor.c:719\n...\nRSP: 0018:ffffc9000356fb68\
  \ EFLAGS: 00010246\nRAX: 0000000000000000 RBX: 0000000000000000 RCX: 000000003ee87cba\n\
  RDX: 0000000000000000 RSI: ffffffff8dbc56a7 RDI: ffff88804c2cc010\nRBP: dffffc0000000000\
  \ R08: 0000000000000001 R09: 0000000000000000\nR10: 0000000000000001 R11: 0000000000000000\
  \ R12: 0000000000000007\nR13: fffffbfff2111097 R14: ffff88804ead8000 R15: ffff88804ead9010\n\
  FS:  0000000000000000(0000) GS:ffff888097ab9000(0000) knlGS:0000000000000000\nCS:\
  \  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000f720eb00 CR3: 000000000e182000\
  \ CR4: 0000000000352ef0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n\
  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n\nThere is a\
  \ racing condition between workqueue created when enabling\nbearer and another thread\
  \ created when disabling bearer right after\nthat as follow:\n\nenabling_bearer\
  \                          | disabling_bearer\n---------------                 \
  \         | ----------------\ntipc_disc_timeout()                      |\n{    \
  \                                    | bearer_disable()\n ...                  \
  \                   | {\n schedule_work(&tn->work);               |  tipc_mon_delete()\n\
  \ ...                                     |  {\n}                              \
  \          |   ...\n                                         |   write_lock_bh(&mon->lock);\n\
  \                                         |   mon->self = NULL;\n              \
  \                           |   write_unlock_bh(&mon->lock);\n                 \
  \                        |   ...\n                                         |  }\n\
  tipc_net_finalize_work()                 | }\n{                                \
  \        |\n ...                                     |\n tipc_net_finalize()   \
  \                  |\n {                                       |\n  ...        \
  \                            |\n  tipc_mon_reinit_self()                 |\n  {\
  \                                      |\n   ...                               \
  \    |\n   write_lock_bh(&mon->lock);            |\n   mon->self->addr = tipc_own_addr(net);\
  \ |\n   write_unlock_bh(&mon->lock);          |\n   ...                        \
  \           |\n  }                                      |\n  ...               \
  \                     |\n }                                       |\n ...      \
  \                               |\n}                                        |\n\n\
  'mon->self' is set to NULL in disabling_bearer thread and dereferenced\nlater in\
  \ enabling_bearer thread.\n\nThis commit fixes this issue by validating 'mon->self'\
  \ before assigning\nnode address to it.\n\nReported-by: syzbot+ed60da8d686dc709164c@syzkaller.appspotmail.com\n\
  Fixes: 46cb01eeeb86 (\"tipc: update mon's self addr when node addr generated\")\n\
  Signed-off-by: Tung Nguyen <tung.quang.nguyen@est.tech>\nReviewed-by: Simon Horman\
  \ <horms@kernel.org>\nLink: https://patch.msgid.link/20250417074826.578115-1-tung.quang.nguyen@est.tech\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/tipc
hunk_count: 1
covered_count: 1
