id: a8b046e462915c65b10b
bug_link: https://syzkaller.appspot.com/bug?extid=a8b046e462915c65b10b
title: kernel BUG in unregister_vlan_dev (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: afb5bef57f90edaa6e8b10fd27236443218f8b5d
fix_commit: 579d4f9ca9a9a605184a9b162355f6ba131f678d
datetime: '2025-07-17T07:44:26-07:00'
fix_commit_message: "net: vlan: fix VLAN 0 refcount imbalance of toggling filtering\
  \ during runtime\n\nAssuming the \"rx-vlan-filter\" feature is enabled on a net\
  \ device, the\n8021q module will automatically add or remove VLAN 0 when the net\
  \ device\nis put administratively up or down, respectively. There are a couple of\n\
  problems with the above scheme.\n\nThe first problem is a memory leak that can happen\
  \ if the \"rx-vlan-filter\"\nfeature is disabled while the device is running:\n\n\
  \ # ip link add bond1 up type bond mode 0\n # ethtool -K bond1 rx-vlan-filter off\n\
  \ # ip link del dev bond1\n\nWhen the device is put administratively down the \"\
  rx-vlan-filter\"\nfeature is disabled, so the 8021q module will not remove VLAN\
  \ 0 and the\nmemory will be leaked [1].\n\nAnother problem that can happen is that\
  \ the kernel can automatically\ndelete VLAN 0 when the device is put administratively\
  \ down despite not\nadding it when the device was put administratively up since\
  \ during that\ntime the \"rx-vlan-filter\" feature was disabled. null-ptr-unref\
  \ or\nbug_on[2] will be triggered by unregister_vlan_dev() for refcount\nimbalance\
  \ if toggling filtering during runtime:\n\n$ ip link add bond0 type bond mode 0\n\
  $ ip link add link bond0 name vlan0 type vlan id 0 protocol 802.1q\n$ ethtool -K\
  \ bond0 rx-vlan-filter off\n$ ifconfig bond0 up\n$ ethtool -K bond0 rx-vlan-filter\
  \ on\n$ ifconfig bond0 down\n$ ip link del vlan0\n\nRoot cause is as below:\nstep1:\
  \ add vlan0 for real_dev, such as bond, team.\nregister_vlan_dev\n    vlan_vid_add(real_dev,htons(ETH_P_8021Q),0)\
  \ //refcnt=1\nstep2: disable vlan filter feature and enable real_dev\nstep3: change\
  \ filter from 0 to 1\nvlan_device_event\n    vlan_filter_push_vids\n        ndo_vlan_rx_add_vid\
  \ //No refcnt added to real_dev vlan0\nstep4: real_dev down\nvlan_device_event\n\
  \    vlan_vid_del(dev, htons(ETH_P_8021Q), 0); //refcnt=0\n        vlan_info_rcu_free\
  \ //free vlan0\nstep5: delete vlan0\nunregister_vlan_dev\n    BUG_ON(!vlan_info);\
  \ //vlan_info is null\n\nFix both problems by noting in the VLAN info whether VLAN\
  \ 0 was\nautomatically added upon NETDEV_UP and based on that decide whether it\n\
  should be deleted upon NETDEV_DOWN, regardless of the state of the\n\"rx-vlan-filter\"\
  \ feature.\n\n[1]\nunreferenced object 0xffff8880068e3100 (size 256):\n  comm \"\
  ip\", pid 384, jiffies 4296130254\n  hex dump (first 32 bytes):\n    00 20 30 0d\
  \ 80 88 ff ff 00 00 00 00 00 00 00 00  . 0.............\n    00 00 00 00 00 00 00\
  \ 00 00 00 00 00 00 00 00 00  ................\n  backtrace (crc 81ce31fa):\n  \
  \  __kmalloc_cache_noprof+0x2b5/0x340\n    vlan_vid_add+0x434/0x940\n    vlan_device_event.cold+0x75/0xa8\n\
  \    notifier_call_chain+0xca/0x150\n    __dev_notify_flags+0xe3/0x250\n    rtnl_configure_link+0x193/0x260\n\
  \    rtnl_newlink_create+0x383/0x8e0\n    __rtnl_newlink+0x22c/0xa40\n    rtnl_newlink+0x627/0xb00\n\
  \    rtnetlink_rcv_msg+0x6fb/0xb70\n    netlink_rcv_skb+0x11f/0x350\n    netlink_unicast+0x426/0x710\n\
  \    netlink_sendmsg+0x75a/0xc20\n    __sock_sendmsg+0xc1/0x150\n    ____sys_sendmsg+0x5aa/0x7b0\n\
  \    ___sys_sendmsg+0xfc/0x180\n\n[2]\nkernel BUG at net/8021q/vlan.c:99!\nOops:\
  \ invalid opcode: 0000 [#1] SMP KASAN PTI\nCPU: 0 UID: 0 PID: 382 Comm: ip Not tainted\
  \ 6.16.0-rc3 #61 PREEMPT(voluntary)\nHardware name: QEMU Standard PC (i440FX + PIIX,\
  \ 1996),\nBIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014\nRIP: 0010:unregister_vlan_dev\
  \ (net/8021q/vlan.c:99 (discriminator 1))\nRSP: 0018:ffff88810badf310 EFLAGS: 00010246\n\
  RAX: 0000000000000000 RBX: ffff88810da84000 RCX: ffffffffb47ceb9a\nRDX: dffffc0000000000\
  \ RSI: 0000000000000008 RDI: ffff88810e8b43c8\nRBP: 0000000000000000 R08: 0000000000000000\
  \ R09: fffffbfff6cefe80\nR10: ffffffffb677f407 R11: ffff88810badf3c0 R12: ffff88810e8b4000\n\
  R13: 0000000000000000 R14: ffff88810642a5c0 R15: 000000000000017e\nFS:  00007f1ff68c20c0(0000)\
  \ GS:ffff888163a24000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000\
  \ CR0: 0000000080050033\nCR2: 00007f1ff5dad240 CR3: 0000000107e56000 CR4: 00000000000006f0\n\
  Call Trace:\n <TASK>\nrtnl_dellink (net/core/rtnetlink.c:3511 net/core/rtnetlink.c:3553)\n\
  rtnetlink_rcv_msg (net/core/rtnetlink.c:6945)\nnetlink_rcv_skb (net/netlink/af_netlink.c:2535)\n\
  netlink_unicast (net/netlink/af_netlink.c:1314 net/netlink/af_netlink.c:1339)\n\
  netlink_sendmsg (net/netlink/af_netlink.c:1883)\n____sys_sendmsg (net/socket.c:712\
  \ net/socket.c:727 net/socket.c:2566)\n___sys_sendmsg (net/socket.c:2622)\n__sys_sendmsg\
  \ (net/socket.c:2652)\ndo_syscall_64 (arch/x86/entry/syscall_64.c:63 arch/x86/entry/syscall_64.c:94)\n\
  \nFixes: ad1afb003939 (\"vlan_dev: VLAN 0 should be treated as \"no vlan tag\" (802.1p\
  \ packet)\")\nReported-by: syzbot+a8b046e462915c65b10b@syzkaller.appspotmail.com\n\
  Closes: https://syzkaller.appspot.com/bug?extid=a8b046e462915c65b10b\nSuggested-by:\
  \ Ido Schimmel <idosch@idosch.org>\nSigned-off-by: Dong Chenchen <dongchenchen2@huawei.com>\n\
  Reviewed-by: Ido Schimmel <idosch@nvidia.com>\nLink: https://patch.msgid.link/20250716034504.2285203-2-dongchenchen2@huawei.com\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/8021q
hunk_count: 3
covered_count: 0
