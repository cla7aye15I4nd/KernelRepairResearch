id: c4b1e5278d93269fd69c
bug_link: https://syzkaller.appspot.com/bug?extid=c4b1e5278d93269fd69c
title: 'KASAN: slab-out-of-bounds Read in btrfs_scan_one_device'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 1a49a97df657c63a4e8ffcd1ea9b6ed95581789b
fix_commit: 0697d9a610998b8bdee6b2390836cb2391d8fd1a
datetime: '2020-11-23T21:16:12+01:00'
fix_commit_message: "btrfs: don't access possibly stale fs_info data for printing\
  \ duplicate device\n\nSyzbot reported a possible use-after-free when printing a\
  \ duplicate device\nwarning device_list_add().\n\nAt this point it can happen that\
  \ a btrfs_device::fs_info is not correctly\nsetup yet, so we're accessing stale\
  \ data, when printing the warning\nmessage using the btrfs_printk() wrappers.\n\n\
  \  ==================================================================\n  BUG: KASAN:\
  \ use-after-free in btrfs_printk+0x3eb/0x435 fs/btrfs/super.c:245\n  Read of size\
  \ 8 at addr ffff8880878e06a8 by task syz-executor225/7068\n\n  CPU: 1 PID: 7068\
  \ Comm: syz-executor225 Not tainted 5.9.0-rc5-syzkaller #0\n  Hardware name: Google\
  \ Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\n  Call Trace:\n\
  \   __dump_stack lib/dump_stack.c:77 [inline]\n   dump_stack+0x1d6/0x29e lib/dump_stack.c:118\n\
  \   print_address_description+0x66/0x620 mm/kasan/report.c:383\n   __kasan_report\
  \ mm/kasan/report.c:513 [inline]\n   kasan_report+0x132/0x1d0 mm/kasan/report.c:530\n\
  \   btrfs_printk+0x3eb/0x435 fs/btrfs/super.c:245\n   device_list_add+0x1a88/0x1d60\
  \ fs/btrfs/volumes.c:943\n   btrfs_scan_one_device+0x196/0x490 fs/btrfs/volumes.c:1359\n\
  \   btrfs_mount_root+0x48f/0xb60 fs/btrfs/super.c:1634\n   legacy_get_tree+0xea/0x180\
  \ fs/fs_context.c:592\n   vfs_get_tree+0x88/0x270 fs/super.c:1547\n   fc_mount fs/namespace.c:978\
  \ [inline]\n   vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008\n   btrfs_mount+0x33c/0xae0\
  \ fs/btrfs/super.c:1732\n   legacy_get_tree+0xea/0x180 fs/fs_context.c:592\n   vfs_get_tree+0x88/0x270\
  \ fs/super.c:1547\n   do_new_mount fs/namespace.c:2875 [inline]\n   path_mount+0x179d/0x29e0\
  \ fs/namespace.c:3192\n   do_mount fs/namespace.c:3205 [inline]\n   __do_sys_mount\
  \ fs/namespace.c:3413 [inline]\n   __se_sys_mount+0x126/0x180 fs/namespace.c:3390\n\
  \   do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46\n   entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\
  \  RIP: 0033:0x44840a\n  RSP: 002b:00007ffedfffd608 EFLAGS: 00000293 ORIG_RAX: 00000000000000a5\n\
  \  RAX: ffffffffffffffda RBX: 00007ffedfffd670 RCX: 000000000044840a\n  RDX: 0000000020000000\
  \ RSI: 0000000020000100 RDI: 00007ffedfffd630\n  RBP: 00007ffedfffd630 R08: 00007ffedfffd670\
  \ R09: 0000000000000000\n  R10: 0000000000000000 R11: 0000000000000293 R12: 000000000000001a\n\
  \  R13: 0000000000000004 R14: 0000000000000003 R15: 0000000000000003\n\n  Allocated\
  \ by task 6945:\n   kasan_save_stack mm/kasan/common.c:48 [inline]\n   kasan_set_track\
  \ mm/kasan/common.c:56 [inline]\n   __kasan_kmalloc+0x100/0x130 mm/kasan/common.c:461\n\
  \   kmalloc_node include/linux/slab.h:577 [inline]\n   kvmalloc_node+0x81/0x110\
  \ mm/util.c:574\n   kvmalloc include/linux/mm.h:757 [inline]\n   kvzalloc include/linux/mm.h:765\
  \ [inline]\n   btrfs_mount_root+0xd0/0xb60 fs/btrfs/super.c:1613\n   legacy_get_tree+0xea/0x180\
  \ fs/fs_context.c:592\n   vfs_get_tree+0x88/0x270 fs/super.c:1547\n   fc_mount fs/namespace.c:978\
  \ [inline]\n   vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008\n   btrfs_mount+0x33c/0xae0\
  \ fs/btrfs/super.c:1732\n   legacy_get_tree+0xea/0x180 fs/fs_context.c:592\n   vfs_get_tree+0x88/0x270\
  \ fs/super.c:1547\n   do_new_mount fs/namespace.c:2875 [inline]\n   path_mount+0x179d/0x29e0\
  \ fs/namespace.c:3192\n   do_mount fs/namespace.c:3205 [inline]\n   __do_sys_mount\
  \ fs/namespace.c:3413 [inline]\n   __se_sys_mount+0x126/0x180 fs/namespace.c:3390\n\
  \   do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46\n   entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\
  \n  Freed by task 6945:\n   kasan_save_stack mm/kasan/common.c:48 [inline]\n   kasan_set_track+0x3d/0x70\
  \ mm/kasan/common.c:56\n   kasan_set_free_info+0x17/0x30 mm/kasan/generic.c:355\n\
  \   __kasan_slab_free+0xdd/0x110 mm/kasan/common.c:422\n   __cache_free mm/slab.c:3418\
  \ [inline]\n   kfree+0x113/0x200 mm/slab.c:3756\n   deactivate_locked_super+0xa7/0xf0\
  \ fs/super.c:335\n   btrfs_mount_root+0x72b/0xb60 fs/btrfs/super.c:1678\n   legacy_get_tree+0xea/0x180\
  \ fs/fs_context.c:592\n   vfs_get_tree+0x88/0x270 fs/super.c:1547\n   fc_mount fs/namespace.c:978\
  \ [inline]\n   vfs_kern_mount+0xc9/0x160 fs/namespace.c:1008\n   btrfs_mount+0x33c/0xae0\
  \ fs/btrfs/super.c:1732\n   legacy_get_tree+0xea/0x180 fs/fs_context.c:592\n   vfs_get_tree+0x88/0x270\
  \ fs/super.c:1547\n   do_new_mount fs/namespace.c:2875 [inline]\n   path_mount+0x179d/0x29e0\
  \ fs/namespace.c:3192\n   do_mount fs/namespace.c:3205 [inline]\n   __do_sys_mount\
  \ fs/namespace.c:3413 [inline]\n   __se_sys_mount+0x126/0x180 fs/namespace.c:3390\n\
  \   do_syscall_64+0x31/0x70 arch/x86/entry/common.c:46\n   entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\
  \n  The buggy address belongs to the object at ffff8880878e0000\n   which belongs\
  \ to the cache kmalloc-16k of size 16384\n  The buggy address is located 1704 bytes\
  \ inside of\n   16384-byte region [ffff8880878e0000, ffff8880878e4000)\n  The buggy\
  \ address belongs to the page:\n  page:0000000060704f30 refcount:1 mapcount:0 mapping:0000000000000000\
  \ index:0x0 pfn:0x878e0\n  head:0000000060704f30 order:3 compound_mapcount:0 compound_pincount:0\n\
  \  flags: 0xfffe0000010200(slab|head)\n  raw: 00fffe0000010200 ffffea00028e9a08\
  \ ffffea00021e3608 ffff8880aa440b00\n  raw: 0000000000000000 ffff8880878e0000 0000000100000001\
  \ 0000000000000000\n  page dumped because: kasan: bad access detected\n\n  Memory\
  \ state around the buggy address:\n   ffff8880878e0580: fb fb fb fb fb fb fb fb\
  \ fb fb fb fb fb fb fb fb\n   ffff8880878e0600: fb fb fb fb fb fb fb fb fb fb fb\
  \ fb fb fb fb fb\n  >ffff8880878e0680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb\
  \ fb fb\n\t\t\t\t    ^\n   ffff8880878e0700: fb fb fb fb fb fb fb fb fb fb fb fb\
  \ fb fb fb fb\n   ffff8880878e0780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\
  \ fb\n  ==================================================================\n\nThe\
  \ syzkaller reproducer for this use-after-free crafts a filesystem image\nand loop\
  \ mounts it twice in a loop. The mount will fail as the crafted\nimage has an invalid\
  \ chunk tree. When this happens btrfs_mount_root() will\ncall deactivate_locked_super(),\
  \ which then cleans up fs_info and\nfs_info::sb. If a second thread now adds the\
  \ same block-device to the\nfilesystem, it will get detected as a duplicate device\
  \ and\ndevice_list_add() will reject the duplicate and print a warning. But as\n\
  the fs_info pointer passed in is non-NULL this will result in a\nuse-after-free.\n\
  \nInstead of printing possibly uninitialized or already freed memory in\nbtrfs_printk(),\
  \ explicitly pass in a NULL fs_info so the printing of the\ndevice name will be\
  \ skipped altogether.\n\nThere was a slightly different approach discussed in\n\
  https://lore.kernel.org/linux-btrfs/20200114060920.4527-1-anand.jain@oracle.com/t/#u\n\
  \nLink: https://lore.kernel.org/linux-btrfs/000000000000c9e14b05afcc41ba@google.com\n\
  Reported-by: syzbot+582e66e5edf36a22c7b0@syzkaller.appspotmail.com\nCC: stable@vger.kernel.org\
  \ # 4.19+\nReviewed-by: Nikolay Borisov <nborisov@suse.com>\nReviewed-by: Anand\
  \ Jain <anand.jain@oracle.com>\nSigned-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>\n\
  Reviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 1
covered_count: 1
