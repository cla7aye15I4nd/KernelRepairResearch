id: 5ce1a620488e94bf2f15
bug_link: https://syzkaller.appspot.com/bug?extid=5ce1a620488e94bf2f15
title: 'KASAN: slab-out-of-bounds Write in fpstate_init'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: cfdfaf4a86406f8eff7901de09f4910341eb9e31
fix_commit: ed8e48122728acfaf7bfa904cba034d83905b43a
datetime: '2018-12-21T11:28:19+01:00'
fix_commit_message: 'KVM: x86: fix size of x86_fpu_cache objects


  The memory allocation in b666a4b69739 ("kvm: x86: Dynamically allocate

  guest_fpu", 2018-11-06) is wrong, there are other members in struct fpu

  before the fpregs_state union and the patch should be doing something

  similar to the code in fpu__init_task_struct_size.  It''s enough to run

  a guest and then rmmod kvm to see slub errors which are actually caused

  by memory corruption.


  For now let''s revert it to sizeof(struct fpu), which is conservative.

  I have plans to move fsave/fxsave/xsave directly in KVM, without using

  the kernel FPU helpers, and once it''s done, the size of the object in

  the cache will be something like kvm_xstate_size.


  Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  '
submodule:
- arch/x86/kvm
hunk_count: 1
covered_count: 0
