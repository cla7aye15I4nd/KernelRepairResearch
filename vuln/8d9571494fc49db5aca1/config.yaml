id: 8d9571494fc49db5aca1
bug_link: https://syzkaller.appspot.com/bug?extid=8d9571494fc49db5aca1
title: general protection fault in reweight_entity
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 26291c54e111ff6ba87a164d85d4a4e134b7315c
fix_commit: 13765de8148f71fa795e0a6607de37c49ea5915a
datetime: '2022-02-06T22:37:26+01:00'
fix_commit_message: 'sched/fair: Fix fault in reweight_entity


  Syzbot found a GPF in reweight_entity. This has been bisected to

  commit 4ef0c5c6b5ba ("kernel/sched: Fix sched_fork() access an invalid

  sched_task_group")


  There is a race between sched_post_fork() and setpriority(PRIO_PGRP)

  within a thread group that causes a null-ptr-deref in

  reweight_entity() in CFS. The scenario is that the main process spawns

  number of new threads, which then call setpriority(PRIO_PGRP, 0, -20),

  wait, and exit.  For each of the new threads the copy_process() gets

  invoked, which adds the new task_struct and calls sched_post_fork()

  for it.


  In the above scenario there is a possibility that

  setpriority(PRIO_PGRP) and set_one_prio() will be called for a thread

  in the group that is just being created by copy_process(), and for

  which the sched_post_fork() has not been executed yet. This will

  trigger a null pointer dereference in reweight_entity(), as it will

  try to access the run queue pointer, which hasn''t been set.


  Before the mentioned change the cfs_rq pointer for the task  has been

  set in sched_fork(), which is called much earlier in copy_process(),

  before the new task is added to the thread_group.  Now it is done in

  the sched_post_fork(), which is called after that.  To fix the issue

  the remove the update_load param from the update_load param() function

  and call reweight_task() only if the task flag doesn''t have the

  TASK_NEW flag set.


  Fixes: 4ef0c5c6b5ba ("kernel/sched: Fix sched_fork() access an invalid sched_task_group")

  Reported-by: syzbot+af7a719bc92395ee41b3@syzkaller.appspotmail.com

  Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>

  Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>

  Reviewed-by: Dietmar Eggemann <dietmar.eggemann@arm.com>

  Cc: stable@vger.kernel.org

  Link: https://lkml.kernel.org/r/20220203161846.1160750-1-tadeusz.struk@linaro.org

  '
submodule:
- kernel/sched
hunk_count: 5
covered_count: 2
