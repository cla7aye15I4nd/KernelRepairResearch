id: e15b7e15b8a751a91d9a
bug_link: https://syzkaller.appspot.com/bug?extid=e15b7e15b8a751a91d9a
title: WARNING in skb_warn_bad_offload (5)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 2b2bc3bab158b7e036508742b16cd8a3c2f59a12
fix_commit: 30b03f2a0592eee1267298298eac9dd655f55ab2
datetime: '2024-08-09T21:58:08-07:00'
fix_commit_message: "udp: Fall back to software USO if IPv6 extension headers are\
  \ present\n\nIn commit 10154dbded6d (\"udp: Allow GSO transmit from devices with\
  \ no\nchecksum offload\") we have intentionally allowed UDP GSO packets marked\n\
  CHECKSUM_NONE to pass to the GSO stack, so that they can be segmented and\nchecksummed\
  \ by a software fallback when the egress device lacks these\nfeatures.\n\nWhat was\
  \ not taken into consideration is that a CHECKSUM_NONE skb can be\nhanded over to\
  \ the GSO stack also when the egress device advertises the\ntx-udp-segmentation\
  \ / NETIF_F_GSO_UDP_L4 feature.\n\nThis will happen when there are IPv6 extension\
  \ headers present, which we\ncheck for in __ip6_append_data(). Syzbot has discovered\
  \ this scenario,\nproducing a warning as below:\n\n  ip6tnl0: caps=(0x00000006401d7869,\
  \ 0x00000006401d7869)\n  WARNING: CPU: 0 PID: 5112 at net/core/dev.c:3293 skb_warn_bad_offload+0x166/0x1a0\
  \ net/core/dev.c:3291\n  Modules linked in:\n  CPU: 0 PID: 5112 Comm: syz-executor391\
  \ Not tainted 6.10.0-rc7-syzkaller-01603-g80ab5445da62 #0\n  Hardware name: Google\
  \ Google Compute Engine/Google Compute Engine, BIOS Google 06/07/2024\n  RIP: 0010:skb_warn_bad_offload+0x166/0x1a0\
  \ net/core/dev.c:3291\n  [...]\n  Call Trace:\n   <TASK>\n   __skb_gso_segment+0x3be/0x4c0\
  \ net/core/gso.c:127\n   skb_gso_segment include/net/gso.h:83 [inline]\n   validate_xmit_skb+0x585/0x1120\
  \ net/core/dev.c:3661\n   __dev_queue_xmit+0x17a4/0x3e90 net/core/dev.c:4415\n \
  \  neigh_output include/net/neighbour.h:542 [inline]\n   ip6_finish_output2+0xffa/0x1680\
  \ net/ipv6/ip6_output.c:137\n   ip6_finish_output+0x41e/0x810 net/ipv6/ip6_output.c:222\n\
  \   ip6_send_skb+0x112/0x230 net/ipv6/ip6_output.c:1958\n   udp_v6_send_skb+0xbf5/0x1870\
  \ net/ipv6/udp.c:1292\n   udpv6_sendmsg+0x23b3/0x3270 net/ipv6/udp.c:1588\n   sock_sendmsg_nosec\
  \ net/socket.c:730 [inline]\n   __sock_sendmsg+0xef/0x270 net/socket.c:745\n   ____sys_sendmsg+0x525/0x7d0\
  \ net/socket.c:2585\n   ___sys_sendmsg net/socket.c:2639 [inline]\n   __sys_sendmmsg+0x3b2/0x740\
  \ net/socket.c:2725\n   __do_sys_sendmmsg net/socket.c:2754 [inline]\n   __se_sys_sendmmsg\
  \ net/socket.c:2751 [inline]\n   __x64_sys_sendmmsg+0xa0/0xb0 net/socket.c:2751\n\
  \   do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n   do_syscall_64+0xf3/0x230\
  \ arch/x86/entry/common.c:83\n   entry_SYSCALL_64_after_hwframe+0x77/0x7f\n   [...]\n\
  \   </TASK>\n\nWe are hitting the bad offload warning because when an egress device\
  \ is\ncapable of handling segmentation offload requested by\nskb_shinfo(skb)->gso_type,\
  \ the chain of gso_segment callbacks won't produce\nany segment skbs and return\
  \ NULL. See the skb_gso_ok() branch in\n{__udp,tcp,sctp}_gso_segment helpers.\n\n\
  To fix it, force a fallback to software USO when processing a packet with\nIPv6\
  \ extension headers, since we don't know if these can checksummed by\nall devices\
  \ which offer USO.\n\nFixes: 10154dbded6d (\"udp: Allow GSO transmit from devices\
  \ with no checksum offload\")\nReported-by: syzbot+e15b7e15b8a751a91d9a@syzkaller.appspotmail.com\n\
  Closes: https://lore.kernel.org/all/000000000000e1609a061d5330ce@google.com/\nReviewed-by:\
  \ Willem de Bruijn <willemb@google.com>\nSigned-off-by: Jakub Sitnicki <jakub@cloudflare.com>\n\
  Link: https://patch.msgid.link/20240808-udp-gso-egress-from-tunnel-v4-2-f5c5b4149ab9@cloudflare.com\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/ipv4
hunk_count: 1
covered_count: 0
