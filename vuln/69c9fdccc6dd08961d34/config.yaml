id: 69c9fdccc6dd08961d34
bug_link: https://syzkaller.appspot.com/bug?extid=69c9fdccc6dd08961d34
title: 'KASAN: slab-out-of-bounds Write in udf_find_entry'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 59f2f4b8a757412fce372f6d0767bdb55da127a8
fix_commit: c8af247de385ce49afabc3bf1cf4fd455c94bfe8
datetime: '2022-11-09T12:24:42+01:00'
fix_commit_message: "udf: Fix a slab-out-of-bounds write bug in udf_find_entry()\n\
  \nSyzbot reported a slab-out-of-bounds Write bug:\n\nloop0: detected capacity change\
  \ from 0 to 2048\n==================================================================\n\
  BUG: KASAN: slab-out-of-bounds in udf_find_entry+0x8a5/0x14f0\nfs/udf/namei.c:253\n\
  Write of size 105 at addr ffff8880123ff896 by task syz-executor323/3610\n\nCPU:\
  \ 0 PID: 3610 Comm: syz-executor323 Not tainted\n6.1.0-rc2-syzkaller-00105-gb229b6ca5abb\
  \ #0\nHardware name: Google Compute Engine/Google Compute Engine, BIOS\nGoogle 10/11/2022\n\
  Call Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x1b1/0x28e\
  \ lib/dump_stack.c:106\n print_address_description+0x74/0x340 mm/kasan/report.c:284\n\
  \ print_report+0x107/0x1f0 mm/kasan/report.c:395\n kasan_report+0xcd/0x100 mm/kasan/report.c:495\n\
  \ kasan_check_range+0x2a7/0x2e0 mm/kasan/generic.c:189\n memcpy+0x3c/0x60 mm/kasan/shadow.c:66\n\
  \ udf_find_entry+0x8a5/0x14f0 fs/udf/namei.c:253\n udf_lookup+0xef/0x340 fs/udf/namei.c:309\n\
  \ lookup_open fs/namei.c:3391 [inline]\n open_last_lookups fs/namei.c:3481 [inline]\n\
  \ path_openat+0x10e6/0x2df0 fs/namei.c:3710\n do_filp_open+0x264/0x4f0 fs/namei.c:3740\n\
  \ do_sys_openat2+0x124/0x4e0 fs/open.c:1310\n do_sys_open fs/open.c:1326 [inline]\n\
  \ __do_sys_creat fs/open.c:1402 [inline]\n __se_sys_creat fs/open.c:1396 [inline]\n\
  \ __x64_sys_creat+0x11f/0x160 fs/open.c:1396\n do_syscall_x64 arch/x86/entry/common.c:50\
  \ [inline]\n do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\
  RIP: 0033:0x7ffab0d164d9\nCode: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40\
  \ 00 48 89 f8 48 89\nf7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05\
  \ <48> 3d 01\nf0 ff ff 73 01 c3 48 c7 c1 c0 ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007ffe1a7e6bb8\
  \ EFLAGS: 00000246 ORIG_RAX: 0000000000000055\nRAX: ffffffffffffffda RBX: 0000000000000000\
  \ RCX: 00007ffab0d164d9\nRDX: 00007ffab0d164d9 RSI: 0000000000000000 RDI: 0000000020000180\n\
  RBP: 00007ffab0cd5a10 R08: 0000000000000000 R09: 0000000000000000\nR10: 00005555573552c0\
  \ R11: 0000000000000246 R12: 00007ffab0cd5aa0\nR13: 0000000000000000 R14: 0000000000000000\
  \ R15: 0000000000000000\n </TASK>\n\nAllocated by task 3610:\n kasan_save_stack\
  \ mm/kasan/common.c:45 [inline]\n kasan_set_track+0x3d/0x60 mm/kasan/common.c:52\n\
  \ ____kasan_kmalloc mm/kasan/common.c:371 [inline]\n __kasan_kmalloc+0x97/0xb0 mm/kasan/common.c:380\n\
  \ kmalloc include/linux/slab.h:576 [inline]\n udf_find_entry+0x7b6/0x14f0 fs/udf/namei.c:243\n\
  \ udf_lookup+0xef/0x340 fs/udf/namei.c:309\n lookup_open fs/namei.c:3391 [inline]\n\
  \ open_last_lookups fs/namei.c:3481 [inline]\n path_openat+0x10e6/0x2df0 fs/namei.c:3710\n\
  \ do_filp_open+0x264/0x4f0 fs/namei.c:3740\n do_sys_openat2+0x124/0x4e0 fs/open.c:1310\n\
  \ do_sys_open fs/open.c:1326 [inline]\n __do_sys_creat fs/open.c:1402 [inline]\n\
  \ __se_sys_creat fs/open.c:1396 [inline]\n __x64_sys_creat+0x11f/0x160 fs/open.c:1396\n\
  \ do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80\n\
  \ entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nThe buggy address belongs to the object\
  \ at ffff8880123ff800\n which belongs to the cache kmalloc-256 of size 256\nThe\
  \ buggy address is located 150 bytes inside of\n 256-byte region [ffff8880123ff800,\
  \ ffff8880123ff900)\n\nThe buggy address belongs to the physical page:\npage:ffffea000048ff80\
  \ refcount:1 mapcount:0 mapping:0000000000000000\nindex:0x0 pfn:0x123fe\nhead:ffffea000048ff80\
  \ order:1 compound_mapcount:0 compound_pincount:0\nflags: 0xfff00000010200(slab|head|node=0|zone=1|lastcpupid=0x7ff)\n\
  raw: 00fff00000010200 ffffea00004b8500 dead000000000003 ffff888012041b40\nraw: 0000000000000000\
  \ 0000000080100010 00000001ffffffff 0000000000000000\npage dumped because: kasan:\
  \ bad access detected\npage_owner tracks the page as allocated\npage last allocated\
  \ via order 0, migratetype Unmovable, gfp_mask 0x0(),\npid 1, tgid 1 (swapper/0),\
  \ ts 1841222404, free_ts 0\n create_dummy_stack mm/page_owner.c:67 [inline]\n register_early_stack+0x77/0xd0\
  \ mm/page_owner.c:83\n init_page_owner+0x3a/0x731 mm/page_owner.c:93\n kernel_init_freeable+0x41c/0x5d5\
  \ init/main.c:1629\n kernel_init+0x19/0x2b0 init/main.c:1519\npage_owner free stack\
  \ trace missing\n\nMemory state around the buggy address:\n ffff8880123ff780: fc\
  \ fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n ffff8880123ff800: 00 00 00 00 00\
  \ 00 00 00 00 00 00 00 00 00 00 00\n>ffff8880123ff880: 00 00 00 00 00 00 00 00 00\
  \ 00 00 00 00 00 00 06\n                                                       \
  \         ^\n ffff8880123ff900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n\
  \ ffff8880123ff980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n==================================================================\n\
  \nFix this by changing the memory size allocated for copy_name from\nUDF_NAME_LEN(254)\
  \ to UDF_NAME_LEN_CS0(255), because the total length\n(lfi) of subsequent memcpy\
  \ can be up to 255.\n\nCC: stable@vger.kernel.org\nReported-by: syzbot+69c9fdccc6dd08961d34@syzkaller.appspotmail.com\n\
  Fixes: 066b9cded00b (\"udf: Use separate buffer for copying split names\")\nSigned-off-by:\
  \ ZhangPeng <zhangpeng362@huawei.com>\nSigned-off-by: Jan Kara <jack@suse.cz>\n\
  Link: https://lore.kernel.org/r/20221109013542.442790-1-zhangpeng362@huawei.com\n"
submodule:
- fs/udf
hunk_count: 1
covered_count: 1
