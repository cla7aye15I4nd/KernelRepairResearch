id: d79afb004be235636ee8
bug_link: https://syzkaller.appspot.com/bug?extid=d79afb004be235636ee8
title: 'KASAN: slab-use-after-free Read in lru_add_fn'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 1ab8425091dba7ce8bf59e09e183aaca6c2a12ac
fix_commit: 49ae997f8f0d5e268bbd271c5fd66166ce8287fe
datetime: '2024-07-03T19:30:16-07:00'
fix_commit_message: 'nilfs2: add missing check for inode numbers on directory entries


  Syzbot reported that mounting and unmounting a specific pattern of

  corrupted nilfs2 filesystem images causes a use-after-free of metadata

  file inodes, which triggers a kernel bug in lru_add_fn().


  As Jan Kara pointed out, this is because the link count of a metadata file

  gets corrupted to 0, and nilfs_evict_inode(), which is called from iput(),

  tries to delete that inode (ifile inode in this case).


  The inconsistency occurs because directories containing the inode numbers

  of these metadata files that should not be visible in the namespace are

  read without checking.


  Fix this issue by treating the inode numbers of these internal files as

  errors in the sanity check helper when reading directory folios/pages.


  Also thanks to Hillf Danton and Matthew Wilcox for their initial mm-layer

  analysis.


  Link: https://lkml.kernel.org/r/20240623051135.4180-3-konishi.ryusuke@gmail.com

  Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>

  Reported-by: syzbot+d79afb004be235636ee8@syzkaller.appspotmail.com

  Closes: https://syzkaller.appspot.com/bug?extid=d79afb004be235636ee8

  Reported-by: Jan Kara <jack@suse.cz>

  Closes: https://lkml.kernel.org/r/20240617075758.wewhukbrjod5fp5o@quack3

  Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>

  Cc: Hillf Danton <hdanton@sina.com>

  Cc: Matthew Wilcox (Oracle) <willy@infradead.org>

  Cc: <stable@vger.kernel.org>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  '
submodule:
- fs/nilfs2
hunk_count: 3
covered_count: 0
