id: 444ca0907e96f7c5e48b
bug_link: https://syzkaller.appspot.com/bug?extid=444ca0907e96f7c5e48b
title: general protection fault in __sk_mem_raise_allocated
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: aa015a204b6094f909ee9863cd41e50b426dea7d
fix_commit: ad42a35bdfc6d3c0fc4cb4027d7b2757ce665665
datetime: '2023-05-25T10:51:58+02:00'
fix_commit_message: "udplite: Fix NULL pointer dereference in __sk_mem_raise_allocated().\n\
  \nsyzbot reported [0] a null-ptr-deref in sk_get_rmem0() while using\nIPPROTO_UDPLITE\
  \ (0x88):\n\n  14:25:52 executing program 1:\n  r0 = socket$inet6(0xa, 0x80002,\
  \ 0x88)\n\nWe had a similar report [1] for probably sk_memory_allocated_add()\n\
  in __sk_mem_raise_allocated(), and commit c915fe13cbaa (\"udplite: fix\nNULL pointer\
  \ dereference\") fixed it by setting .memory_allocated for\nudplite_prot and udplitev6_prot.\n\
  \nTo fix the variant, we need to set either .sysctl_wmem_offset or\n.sysctl_rmem.\n\
  \nNow UDP and UDPLITE share the same value for .memory_allocated, so we\nuse the\
  \ same .sysctl_wmem_offset for UDP and UDPLITE.\n\n[0]:\ngeneral protection fault,\
  \ probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN\n\
  KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]\nCPU: 0 PID:\
  \ 6829 Comm: syz-executor.1 Not tainted 6.4.0-rc2-syzkaller #0\nHardware name: Google\
  \ Google Compute Engine/Google Compute Engine, BIOS Google 04/28/2023\nRIP: 0010:sk_get_rmem0\
  \ include/net/sock.h:2907 [inline]\nRIP: 0010:__sk_mem_raise_allocated+0x806/0x17a0\
  \ net/core/sock.c:3006\nCode: c1 ea 03 80 3c 02 00 0f 85 23 0f 00 00 48 8b 44 24\
  \ 08 48 8b 98 38 01 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 da 48 c1 ea 03 <0f>\
  \ b6 14 02 48 89 d8 83 e0 07 83 c0 03 38 d0 0f 8d 6f 0a 00 00 8b\nRSP: 0018:ffffc90005d7f450\
  \ EFLAGS: 00010246\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffc90004d92000\n\
  RDX: 0000000000000000 RSI: ffffffff88066482 RDI: ffffffff8e2ccbb8\nRBP: ffff8880173f7000\
  \ R08: 0000000000000005 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000000\
  \ R12: 0000000000030000\nR13: 0000000000000001 R14: 0000000000000340 R15: 0000000000000001\n\
  FS:  0000000000000000(0000) GS:ffff8880b9800000(0063) knlGS:00000000f7f1cb40\nCS:\
  \  0010 DS: 002b ES: 002b CR0: 0000000080050033\nCR2: 000000002e82f000 CR3: 0000000034ff0000\
  \ CR4: 00000000003506f0\nCall Trace:\n <TASK>\n __sk_mem_schedule+0x6c/0xe0 net/core/sock.c:3077\n\
  \ udp_rmem_schedule net/ipv4/udp.c:1539 [inline]\n __udp_enqueue_schedule_skb+0x776/0xb30\
  \ net/ipv4/udp.c:1581\n __udpv6_queue_rcv_skb net/ipv6/udp.c:666 [inline]\n udpv6_queue_rcv_one_skb+0xc39/0x16c0\
  \ net/ipv6/udp.c:775\n udpv6_queue_rcv_skb+0x194/0xa10 net/ipv6/udp.c:793\n __udp6_lib_mcast_deliver\
  \ net/ipv6/udp.c:906 [inline]\n __udp6_lib_rcv+0x1bda/0x2bd0 net/ipv6/udp.c:1013\n\
  \ ip6_protocol_deliver_rcu+0x2e7/0x1250 net/ipv6/ip6_input.c:437\n ip6_input_finish+0x150/0x2f0\
  \ net/ipv6/ip6_input.c:482\n NF_HOOK include/linux/netfilter.h:303 [inline]\n NF_HOOK\
  \ include/linux/netfilter.h:297 [inline]\n ip6_input+0xa0/0xd0 net/ipv6/ip6_input.c:491\n\
  \ ip6_mc_input+0x40b/0xf50 net/ipv6/ip6_input.c:585\n dst_input include/net/dst.h:468\
  \ [inline]\n ip6_rcv_finish net/ipv6/ip6_input.c:79 [inline]\n NF_HOOK include/linux/netfilter.h:303\
  \ [inline]\n NF_HOOK include/linux/netfilter.h:297 [inline]\n ipv6_rcv+0x250/0x380\
  \ net/ipv6/ip6_input.c:309\n __netif_receive_skb_one_core+0x114/0x180 net/core/dev.c:5491\n\
  \ __netif_receive_skb+0x1f/0x1c0 net/core/dev.c:5605\n netif_receive_skb_internal\
  \ net/core/dev.c:5691 [inline]\n netif_receive_skb+0x133/0x7a0 net/core/dev.c:5750\n\
  \ tun_rx_batched+0x4b3/0x7a0 drivers/net/tun.c:1553\n tun_get_user+0x2452/0x39c0\
  \ drivers/net/tun.c:1989\n tun_chr_write_iter+0xdf/0x200 drivers/net/tun.c:2035\n\
  \ call_write_iter include/linux/fs.h:1868 [inline]\n new_sync_write fs/read_write.c:491\
  \ [inline]\n vfs_write+0x945/0xd50 fs/read_write.c:584\n ksys_write+0x12b/0x250\
  \ fs/read_write.c:637\n do_syscall_32_irqs_on arch/x86/entry/common.c:112 [inline]\n\
  \ __do_fast_syscall_32+0x65/0xf0 arch/x86/entry/common.c:178\n do_fast_syscall_32+0x33/0x70\
  \ arch/x86/entry/common.c:203\n entry_SYSENTER_compat_after_hwframe+0x70/0x82\n\
  RIP: 0023:0xf7f21579\nCode: b8 01 10 06 03 74 b4 01 10 07 03 74 b0 01 10 08 03 74\
  \ d8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 51 52 55 89 e5 0f 34 cd 80 <5d> 5a\
  \ 59 c3 90 90 90 90 8d b4 26 00 00 00 00 8d b4 26 00 00 00 00\nRSP: 002b:00000000f7f1c590\
  \ EFLAGS: 00000282 ORIG_RAX: 0000000000000004\nRAX: ffffffffffffffda RBX: 00000000000000c8\
  \ RCX: 0000000020000040\nRDX: 0000000000000083 RSI: 00000000f734e000 RDI: 0000000000000000\n\
  RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000\
  \ R11: 0000000000000296 R12: 0000000000000000\nR13: 0000000000000000 R14: 0000000000000000\
  \ R15: 0000000000000000\n </TASK>\nModules linked in:\n\nLink: https://lore.kernel.org/netdev/CANaxB-yCk8hhP68L4Q2nFOJht8sqgXGGQO2AftpHs0u1xyGG5A@mail.gmail.com/\
  \ [1]\nFixes: 850cbaddb52d (\"udp: use it's own memory accounting schema\")\nReported-by:\
  \ syzbot+444ca0907e96f7c5e48b@syzkaller.appspotmail.com\nCloses: https://syzkaller.appspot.com/bug?extid=444ca0907e96f7c5e48b\n\
  Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nLink: https://lore.kernel.org/r/20230523163305.66466-1-kuniyu@amazon.com\n\
  Signed-off-by: Paolo Abeni <pabeni@redhat.com>\n"
submodule:
- net/ipv4
- net/ipv6
hunk_count: 2
covered_count: 0
