id: 63913e558c084f7f8fdc
bug_link: https://syzkaller.appspot.com/bug?extid=63913e558c084f7f8fdc
title: possible deadlock in btrfs_tree_lock_nested
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 9d0c23db26cb58c9fc6ee8817e8f9ebeb25776e5
fix_commit: a216542027b892e6651c1b4e076012140d04afaf
datetime: '2025-01-23T22:34:05+01:00'
fix_commit_message: "btrfs: fix lockdep splat while merging a relocation root\n\n\
  When COWing a relocation tree path, at relocation.c:replace_path(), we\ncan trigger\
  \ a lockdep splat while we are in the btrfs_search_slot() call\nagainst the relocation\
  \ root. This happens in that callchain at\nctree.c:read_block_for_search() when\
  \ we happen to find a child extent\nbuffer already loaded through the fs tree with\
  \ a lockdep class set to\nthe fs tree. So when we attempt to lock that extent buffer\
  \ through a\nrelocation tree we have to reset the lockdep class to the class for\
  \ a\nrelocation tree, since a relocation tree has extent buffers that used\nto belong\
  \ to a fs tree and may currently be already loaded (we swap\nextent buffers between\
  \ the two trees at the end of replace_path()).\n\nHowever we are missing calls to\
  \ btrfs_maybe_reset_lockdep_class() to reset\nthe lockdep class at ctree.c:read_block_for_search()\
  \ before we read lock\nan extent buffer, just like we did for btrfs_search_slot()\
  \ in commit\nb40130b23ca4 (\"btrfs: fix lockdep splat with reloc root extent buffers\"\
  ).\n\nSo add the missing btrfs_maybe_reset_lockdep_class() calls before the\nattempts\
  \ to read lock an extent buffer at ctree.c:read_block_for_search().\n\nThe lockdep\
  \ splat was reported by syzbot and it looks like this:\n\n   ======================================================\n\
  \   WARNING: possible circular locking dependency detected\n   6.13.0-rc5-syzkaller-00163-gab75170520d4\
  \ #0 Not tainted\n   ------------------------------------------------------\n  \
  \ syz.0.0/5335 is trying to acquire lock:\n   ffff8880545dbc38 (btrfs-tree-01){++++}-{4:4},\
  \ at: btrfs_tree_read_lock_nested+0x2f/0x250 fs/btrfs/locking.c:146\n\n   but task\
  \ is already holding lock:\n   ffff8880545dba58 (btrfs-treloc-02/1){+.+.}-{4:4},\
  \ at: btrfs_tree_lock_nested+0x2f/0x250 fs/btrfs/locking.c:189\n\n   which lock\
  \ already depends on the new lock.\n\n   the existing dependency chain (in reverse\
  \ order) is:\n\n   -> #2 (btrfs-treloc-02/1){+.+.}-{4:4}:\n          reacquire_held_locks+0x3eb/0x690\
  \ kernel/locking/lockdep.c:5374\n          __lock_release kernel/locking/lockdep.c:5563\
  \ [inline]\n          lock_release+0x396/0xa30 kernel/locking/lockdep.c:5870\n \
  \         up_write+0x79/0x590 kernel/locking/rwsem.c:1629\n          btrfs_force_cow_block+0x14b3/0x1fd0\
  \ fs/btrfs/ctree.c:660\n          btrfs_cow_block+0x371/0x830 fs/btrfs/ctree.c:755\n\
  \          btrfs_search_slot+0xc01/0x3180 fs/btrfs/ctree.c:2153\n          replace_path+0x1243/0x2740\
  \ fs/btrfs/relocation.c:1224\n          merge_reloc_root+0xc46/0x1ad0 fs/btrfs/relocation.c:1692\n\
  \          merge_reloc_roots+0x3b3/0x980 fs/btrfs/relocation.c:1942\n          relocate_block_group+0xb0a/0xd40\
  \ fs/btrfs/relocation.c:3754\n          btrfs_relocate_block_group+0x77d/0xd90 fs/btrfs/relocation.c:4087\n\
  \          btrfs_relocate_chunk+0x12c/0x3b0 fs/btrfs/volumes.c:3494\n          __btrfs_balance+0x1b0f/0x26b0\
  \ fs/btrfs/volumes.c:4278\n          btrfs_balance+0xbdc/0x10c0 fs/btrfs/volumes.c:4655\n\
  \          btrfs_ioctl_balance+0x493/0x7c0 fs/btrfs/ioctl.c:3670\n          vfs_ioctl\
  \ fs/ioctl.c:51 [inline]\n          __do_sys_ioctl fs/ioctl.c:906 [inline]\n   \
  \       __se_sys_ioctl+0xf5/0x170 fs/ioctl.c:892\n          do_syscall_x64 arch/x86/entry/common.c:52\
  \ [inline]\n          do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n    \
  \      entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\n   -> #1 (btrfs-tree-01/1){+.+.}-{4:4}:\n\
  \          lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5849\n          down_write_nested+0xa2/0x220\
  \ kernel/locking/rwsem.c:1693\n          btrfs_tree_lock_nested+0x2f/0x250 fs/btrfs/locking.c:189\n\
  \          btrfs_init_new_buffer fs/btrfs/extent-tree.c:5052 [inline]\n        \
  \  btrfs_alloc_tree_block+0x41c/0x1440 fs/btrfs/extent-tree.c:5132\n          btrfs_force_cow_block+0x526/0x1fd0\
  \ fs/btrfs/ctree.c:573\n          btrfs_cow_block+0x371/0x830 fs/btrfs/ctree.c:755\n\
  \          btrfs_search_slot+0xc01/0x3180 fs/btrfs/ctree.c:2153\n          btrfs_insert_empty_items+0x9c/0x1a0\
  \ fs/btrfs/ctree.c:4351\n          btrfs_insert_empty_item fs/btrfs/ctree.h:688\
  \ [inline]\n          btrfs_insert_inode_ref+0x2bb/0xf80 fs/btrfs/inode-item.c:330\n\
  \          btrfs_rename_exchange fs/btrfs/inode.c:7990 [inline]\n          btrfs_rename2+0xcb7/0x2b90\
  \ fs/btrfs/inode.c:8374\n          vfs_rename+0xbdb/0xf00 fs/namei.c:5067\n    \
  \      do_renameat2+0xd94/0x13f0 fs/namei.c:5224\n          __do_sys_renameat2 fs/namei.c:5258\
  \ [inline]\n          __se_sys_renameat2 fs/namei.c:5255 [inline]\n          __x64_sys_renameat2+0xce/0xe0\
  \ fs/namei.c:5255\n          do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n\
  \          do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n          entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\
  \n   -> #0 (btrfs-tree-01){++++}-{4:4}:\n          check_prev_add kernel/locking/lockdep.c:3161\
  \ [inline]\n          check_prevs_add kernel/locking/lockdep.c:3280 [inline]\n \
  \         validate_chain+0x18ef/0x5920 kernel/locking/lockdep.c:3904\n         \
  \ __lock_acquire+0x1397/0x2100 kernel/locking/lockdep.c:5226\n          lock_acquire+0x1ed/0x550\
  \ kernel/locking/lockdep.c:5849\n          down_read_nested+0xb5/0xa50 kernel/locking/rwsem.c:1649\n\
  \          btrfs_tree_read_lock_nested+0x2f/0x250 fs/btrfs/locking.c:146\n     \
  \     btrfs_tree_read_lock fs/btrfs/locking.h:188 [inline]\n          read_block_for_search+0x718/0xbb0\
  \ fs/btrfs/ctree.c:1610\n          btrfs_search_slot+0x1274/0x3180 fs/btrfs/ctree.c:2237\n\
  \          replace_path+0x1243/0x2740 fs/btrfs/relocation.c:1224\n          merge_reloc_root+0xc46/0x1ad0\
  \ fs/btrfs/relocation.c:1692\n          merge_reloc_roots+0x3b3/0x980 fs/btrfs/relocation.c:1942\n\
  \          relocate_block_group+0xb0a/0xd40 fs/btrfs/relocation.c:3754\n       \
  \   btrfs_relocate_block_group+0x77d/0xd90 fs/btrfs/relocation.c:4087\n        \
  \  btrfs_relocate_chunk+0x12c/0x3b0 fs/btrfs/volumes.c:3494\n          __btrfs_balance+0x1b0f/0x26b0\
  \ fs/btrfs/volumes.c:4278\n          btrfs_balance+0xbdc/0x10c0 fs/btrfs/volumes.c:4655\n\
  \          btrfs_ioctl_balance+0x493/0x7c0 fs/btrfs/ioctl.c:3670\n          vfs_ioctl\
  \ fs/ioctl.c:51 [inline]\n          __do_sys_ioctl fs/ioctl.c:906 [inline]\n   \
  \       __se_sys_ioctl+0xf5/0x170 fs/ioctl.c:892\n          do_syscall_x64 arch/x86/entry/common.c:52\
  \ [inline]\n          do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n    \
  \      entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\n   other info that might help\
  \ us debug this:\n\n   Chain exists of:\n     btrfs-tree-01 --> btrfs-tree-01/1\
  \ --> btrfs-treloc-02/1\n\n    Possible unsafe locking scenario:\n\n          CPU0\
  \                    CPU1\n          ----                    ----\n     lock(btrfs-treloc-02/1);\n\
  \                                  lock(btrfs-tree-01/1);\n                    \
  \              lock(btrfs-treloc-02/1);\n     rlock(btrfs-tree-01);\n\n    *** DEADLOCK\
  \ ***\n\n   8 locks held by syz.0.0/5335:\n    #0: ffff88801e3ae420 (sb_writers#13){.+.+}-{0:0},\
  \ at: mnt_want_write_file+0x5e/0x200 fs/namespace.c:559\n    #1: ffff888052c760d0\
  \ (&fs_info->reclaim_bgs_lock){+.+.}-{4:4}, at: __btrfs_balance+0x4c2/0x26b0 fs/btrfs/volumes.c:4183\n\
  \    #2: ffff888052c74850 (&fs_info->cleaner_mutex){+.+.}-{4:4}, at: btrfs_relocate_block_group+0x775/0xd90\
  \ fs/btrfs/relocation.c:4086\n    #3: ffff88801e3ae610 (sb_internal#2){.+.+}-{0:0},\
  \ at: merge_reloc_root+0xf11/0x1ad0 fs/btrfs/relocation.c:1659\n    #4: ffff888052c76470\
  \ (btrfs_trans_num_writers){++++}-{0:0}, at: join_transaction+0x405/0xda0 fs/btrfs/transaction.c:288\n\
  \    #5: ffff888052c76498 (btrfs_trans_num_extwriters){++++}-{0:0}, at: join_transaction+0x405/0xda0\
  \ fs/btrfs/transaction.c:288\n    #6: ffff8880545db878 (btrfs-tree-01/1){+.+.}-{4:4},\
  \ at: btrfs_tree_lock_nested+0x2f/0x250 fs/btrfs/locking.c:189\n    #7: ffff8880545dba58\
  \ (btrfs-treloc-02/1){+.+.}-{4:4}, at: btrfs_tree_lock_nested+0x2f/0x250 fs/btrfs/locking.c:189\n\
  \n   stack backtrace:\n   CPU: 0 UID: 0 PID: 5335 Comm: syz.0.0 Not tainted 6.13.0-rc5-syzkaller-00163-gab75170520d4\
  \ #0\n   Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1\
  \ 04/01/2014\n   Call Trace:\n    <TASK>\n    __dump_stack lib/dump_stack.c:94 [inline]\n\
  \    dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120\n    print_circular_bug+0x13a/0x1b0\
  \ kernel/locking/lockdep.c:2074\n    check_noncircular+0x36a/0x4a0 kernel/locking/lockdep.c:2206\n\
  \    check_prev_add kernel/locking/lockdep.c:3161 [inline]\n    check_prevs_add\
  \ kernel/locking/lockdep.c:3280 [inline]\n    validate_chain+0x18ef/0x5920 kernel/locking/lockdep.c:3904\n\
  \    __lock_acquire+0x1397/0x2100 kernel/locking/lockdep.c:5226\n    lock_acquire+0x1ed/0x550\
  \ kernel/locking/lockdep.c:5849\n    down_read_nested+0xb5/0xa50 kernel/locking/rwsem.c:1649\n\
  \    btrfs_tree_read_lock_nested+0x2f/0x250 fs/btrfs/locking.c:146\n    btrfs_tree_read_lock\
  \ fs/btrfs/locking.h:188 [inline]\n    read_block_for_search+0x718/0xbb0 fs/btrfs/ctree.c:1610\n\
  \    btrfs_search_slot+0x1274/0x3180 fs/btrfs/ctree.c:2237\n    replace_path+0x1243/0x2740\
  \ fs/btrfs/relocation.c:1224\n    merge_reloc_root+0xc46/0x1ad0 fs/btrfs/relocation.c:1692\n\
  \    merge_reloc_roots+0x3b3/0x980 fs/btrfs/relocation.c:1942\n    relocate_block_group+0xb0a/0xd40\
  \ fs/btrfs/relocation.c:3754\n    btrfs_relocate_block_group+0x77d/0xd90 fs/btrfs/relocation.c:4087\n\
  \    btrfs_relocate_chunk+0x12c/0x3b0 fs/btrfs/volumes.c:3494\n    __btrfs_balance+0x1b0f/0x26b0\
  \ fs/btrfs/volumes.c:4278\n    btrfs_balance+0xbdc/0x10c0 fs/btrfs/volumes.c:4655\n\
  \    btrfs_ioctl_balance+0x493/0x7c0 fs/btrfs/ioctl.c:3670\n    vfs_ioctl fs/ioctl.c:51\
  \ [inline]\n    __do_sys_ioctl fs/ioctl.c:906 [inline]\n    __se_sys_ioctl+0xf5/0x170\
  \ fs/ioctl.c:892\n    do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n    do_syscall_64+0xf3/0x230\
  \ arch/x86/entry/common.c:83\n    entry_SYSCALL_64_after_hwframe+0x77/0x7f\n   RIP:\
  \ 0033:0x7f1ac6985d29\n   Code: ff ff c3 (...)\n   RSP: 002b:00007f1ac63fe038 EFLAGS:\
  \ 00000246 ORIG_RAX: 0000000000000010\n   RAX: ffffffffffffffda RBX: 00007f1ac6b76160\
  \ RCX: 00007f1ac6985d29\n   RDX: 0000000020000180 RSI: 00000000c4009420 RDI: 0000000000000007\n\
  \   RBP: 00007f1ac6a01b08 R08: 0000000000000000 R09: 0000000000000000\n   R10: 0000000000000000\
  \ R11: 0000000000000246 R12: 0000000000000000\n   R13: 0000000000000001 R14: 00007f1ac6b76160\
  \ R15: 00007fffda145a88\n    </TASK>\n\nReported-by: syzbot+63913e558c084f7f8fdc@syzkaller.appspotmail.com\n\
  Link: https://lore.kernel.org/linux-btrfs/677b3014.050a0220.3b53b0.0064.GAE@google.com/\n\
  Fixes: 99785998ed1c (\"btrfs: reduce lock contention when eb cache miss for btree\
  \ search\")\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by: David\
  \ Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>\n"
submodule:
- fs/btrfs
hunk_count: 2
covered_count: 0
