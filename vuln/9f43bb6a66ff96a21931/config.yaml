id: 9f43bb6a66ff96a21931
bug_link: https://syzkaller.appspot.com/bug?extid=9f43bb6a66ff96a21931
title: 'KASAN: use-after-free Read in tcf_action_init'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: e49d8c22f1261c43a986a7fdbf677ac309682a07
fix_commit: 0fedc63fadf0404a729e73a35349481c8009c02f
datetime: '2020-09-24T19:46:21-07:00'
fix_commit_message: 'net_sched: commit action insertions together


  syzbot is able to trigger a failure case inside the loop in

  tcf_action_init(), and when this happens we clean up with

  tcf_action_destroy(). But, as these actions are already inserted

  into the global IDR, other parallel process could free them

  before tcf_action_destroy(), then we will trigger a use-after-free.


  Fix this by deferring the insertions even later, after the loop,

  and committing all the insertions in a separate loop, so we will

  never fail in the middle of the insertions any more.


  One side effect is that the window between alloction and final

  insertion becomes larger, now it is more likely that the loop in

  tcf_del_walker() sees the placeholder -EBUSY pointer. So we have

  to check for error pointer in tcf_del_walker().


  Reported-and-tested-by: syzbot+2287853d392e4b42374a@syzkaller.appspotmail.com

  Fixes: 0190c1d452a9 ("net: sched: atomically check-allocate action")

  Cc: Vlad Buslov <vladbu@mellanox.com>

  Cc: Jamal Hadi Salim <jhs@mojatatu.com>

  Cc: Jiri Pirko <jiri@resnulli.us>

  Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>

  Signed-off-by: David S. Miller <davem@davemloft.net>

  '
submodule:
- net/sched
hunk_count: 4
covered_count: 3
