id: 082fa4af80a5bb1a9843
bug_link: https://syzkaller.appspot.com/bug?extid=082fa4af80a5bb1a9843
title: general protection fault in cache_first_page
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: c1c551bebf928889e7a8fef7415b44f9a64975f4
fix_commit: f65c4bbbd682b0877b669828b4e033b8d5d0a2dc
datetime: '2023-01-31T16:44:10-08:00'
fix_commit_message: "Squashfs: fix handling and sanity checking of xattr_ids count\n\
  \nA Sysbot [1] corrupted filesystem exposes two flaws in the handling and\nsanity\
  \ checking of the xattr_ids count in the filesystem.  Both of these\nflaws cause\
  \ computation overflow due to incorrect typing.\n\nIn the corrupted filesystem the\
  \ xattr_ids value is 4294967071, which\nstored in a signed variable becomes the\
  \ negative number -225.\n\nFlaw 1 (64-bit systems only):\n\nThe signed integer xattr_ids\
  \ variable causes sign extension.\n\nThis causes variable overflow in the SQUASHFS_XATTR_*(A)\
  \ macros.  The\nvariable is first multiplied by sizeof(struct squashfs_xattr_id)\
  \ where the\ntype of the sizeof operator is \"unsigned long\".\n\nOn a 64-bit system\
  \ this is 64-bits in size, and causes the negative number\nto be sign extended and\
  \ widened to 64-bits and then become unsigned.  This\nproduces the very large number\
  \ 18446744073709548016 or 2^64 - 3600.  This\nnumber when rounded up by SQUASHFS_METADATA_SIZE\
  \ - 1 (8191 bytes) and\ndivided by SQUASHFS_METADATA_SIZE overflows and produces\
  \ a length of 0\n(stored in len).\n\nFlaw 2 (32-bit systems only):\n\nOn a 32-bit\
  \ system the integer variable is not widened by the unsigned\nlong type of the sizeof\
  \ operator (32-bits), and the signedness of the\nvariable has no effect due it always\
  \ being treated as unsigned.\n\nThe above corrupted xattr_ids value of 4294967071,\
  \ when multiplied\noverflows and produces the number 4294963696 or 2^32 - 3400.\
  \  This number\nwhen rounded up by SQUASHFS_METADATA_SIZE - 1 (8191 bytes) and divided\
  \ by\nSQUASHFS_METADATA_SIZE overflows again and produces a length of 0.\n\nThe\
  \ effect of the 0 length computation:\n\nIn conjunction with the corrupted xattr_ids\
  \ field, the filesystem also has\na corrupted xattr_table_start value, where it\
  \ matches the end of\nfilesystem value of 850.\n\nThis causes the following sanity\
  \ check code to fail because the\nincorrectly computed len of 0 matches the incorrect\
  \ size of the table\nreported by the superblock (0 bytes).\n\n    len = SQUASHFS_XATTR_BLOCK_BYTES(*xattr_ids);\n\
  \    indexes = SQUASHFS_XATTR_BLOCKS(*xattr_ids);\n\n    /*\n     * The computed\
  \ size of the index table (len bytes) should exactly\n     * match the table start\
  \ and end points\n    */\n    start = table_start + sizeof(*id_table);\n    end\
  \ = msblk->bytes_used;\n\n    if (len != (end - start))\n            return ERR_PTR(-EINVAL);\n\
  \nChanging the xattr_ids variable to be \"usigned int\" fixes the flaw on a\n64-bit\
  \ system.  This relies on the fact the computation is widened by the\nunsigned long\
  \ type of the sizeof operator.\n\nCasting the variable to u64 in the above macro\
  \ fixes this flaw on a 32-bit\nsystem.\n\nIt also means 64-bit systems do not implicitly\
  \ rely on the type of the\nsizeof operator to widen the computation.\n\n[1] https://lore.kernel.org/lkml/000000000000cd44f005f1a0f17f@google.com/\n\
  \nLink: https://lkml.kernel.org/r/20230127061842.10965-1-phillip@squashfs.org.uk\n\
  Fixes: 506220d2ba21 (\"squashfs: add more sanity checks in xattr id lookup\")\n\
  Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>\nReported-by: <syzbot+082fa4af80a5bb1a9843@syzkaller.appspotmail.com>\n\
  Cc: Alexey Khoroshilov <khoroshilov@ispras.ru>\nCc: Fedor Pchelkin <pchelkin@ispras.ru>\n\
  Cc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\n"
submodule:
- fs/squashfs
hunk_count: 4
covered_count: 1
