id: 1a8e2b31f2ac9bd3d148
bug_link: https://syzkaller.appspot.com/bug?extid=1a8e2b31f2ac9bd3d148
title: 'KASAN: null-ptr-deref Write in f2fs_stop_gc_thread'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: ebd3309aec6271c4616573b0cb83ea25e623070a
fix_commit: c7f114d864ac91515bb07ac271e9824a20f5ed95
datetime: '2024-08-21T00:56:28+00:00'
fix_commit_message: "f2fs: fix to avoid use-after-free in f2fs_stop_gc_thread()\n\n\
  syzbot reports a f2fs bug as below:\n\n __dump_stack lib/dump_stack.c:88 [inline]\n\
  \ dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114\n print_report+0xe8/0x550 mm/kasan/report.c:491\n\
  \ kasan_report+0x143/0x180 mm/kasan/report.c:601\n kasan_check_range+0x282/0x290\
  \ mm/kasan/generic.c:189\n instrument_atomic_read_write include/linux/instrumented.h:96\
  \ [inline]\n atomic_fetch_add_relaxed include/linux/atomic/atomic-instrumented.h:252\
  \ [inline]\n __refcount_add include/linux/refcount.h:184 [inline]\n __refcount_inc\
  \ include/linux/refcount.h:241 [inline]\n refcount_inc include/linux/refcount.h:258\
  \ [inline]\n get_task_struct include/linux/sched/task.h:118 [inline]\n kthread_stop+0xca/0x630\
  \ kernel/kthread.c:704\n f2fs_stop_gc_thread+0x65/0xb0 fs/f2fs/gc.c:210\n f2fs_do_shutdown+0x192/0x540\
  \ fs/f2fs/file.c:2283\n f2fs_ioc_shutdown fs/f2fs/file.c:2325 [inline]\n __f2fs_ioctl+0x443a/0xbe60\
  \ fs/f2fs/file.c:4325\n vfs_ioctl fs/ioctl.c:51 [inline]\n __do_sys_ioctl fs/ioctl.c:907\
  \ [inline]\n __se_sys_ioctl+0xfc/0x170 fs/ioctl.c:893\n do_syscall_x64 arch/x86/entry/common.c:52\
  \ [inline]\n do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\
  \nThe root cause is below race condition, it may cause use-after-free\nissue in\
  \ sbi->gc_th pointer.\n\n- remount\n - f2fs_remount\n  - f2fs_stop_gc_thread\n \
  \  - kfree(gc_th)\n\t\t\t\t- f2fs_ioc_shutdown\n\t\t\t\t - f2fs_do_shutdown\n\t\t\
  \t\t  - f2fs_stop_gc_thread\n\t\t\t\t   - kthread_stop(gc_th->f2fs_gc_task)\n  \
  \ : sbi->gc_thread = NULL;\n\nWe will call f2fs_do_shutdown() in two paths:\n- for\
  \ f2fs_ioc_shutdown() path, we should grab sb->s_umount semaphore\nfor fixing.\n\
  - for f2fs_shutdown() path, it's safe since caller has already grabbed\nsb->s_umount\
  \ semaphore.\n\nReported-by: syzbot+1a8e2b31f2ac9bd3d148@syzkaller.appspotmail.com\n\
  Closes: https://lore.kernel.org/linux-f2fs-devel/0000000000005c7ccb061e032b9b@google.com\n\
  Fixes: 7950e9ac638e (\"f2fs: stop gc/discard thread after fs shutdown\")\nSigned-off-by:\
  \ Chao Yu <chao@kernel.org>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>\n"
submodule:
- fs/f2fs
hunk_count: 5
covered_count: 2
