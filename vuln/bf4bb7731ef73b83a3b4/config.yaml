id: bf4bb7731ef73b83a3b4
bug_link: https://syzkaller.appspot.com/bug?extid=bf4bb7731ef73b83a3b4
title: 'KASAN: use-after-free Read in ext4_find_extent (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 1dedde690303c05ef732b7c5c8356fdf60a4ade3
fix_commit: 835659598c67907b98cd2aa57bb951dfaf675c69
datetime: '2023-04-28T12:56:35-04:00'
fix_commit_message: "ext4: fix use-after-free read in ext4_find_extent for bigalloc\
  \ + inline\n\nSyzbot found the following issue:\nloop0: detected capacity change\
  \ from 0 to 2048\nEXT4-fs (loop0): mounted filesystem 00000000-0000-0000-0000-000000000000\
  \ without journal. Quota mode: none.\n==================================================================\n\
  BUG: KASAN: use-after-free in ext4_ext_binsearch_idx fs/ext4/extents.c:768 [inline]\n\
  BUG: KASAN: use-after-free in ext4_find_extent+0x76e/0xd90 fs/ext4/extents.c:931\n\
  Read of size 4 at addr ffff888073644750 by task syz-executor420/5067\n\nCPU: 0 PID:\
  \ 5067 Comm: syz-executor420 Not tainted 6.2.0-rc1-syzkaller #0\nHardware name:\
  \ Google Google Compute Engine/Google Compute Engine, BIOS Google 10/26/2022\nCall\
  \ Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x1b1/0x290\
  \ lib/dump_stack.c:106\n print_address_description+0x74/0x340 mm/kasan/report.c:306\n\
  \ print_report+0x107/0x1f0 mm/kasan/report.c:417\n kasan_report+0xcd/0x100 mm/kasan/report.c:517\n\
  \ ext4_ext_binsearch_idx fs/ext4/extents.c:768 [inline]\n ext4_find_extent+0x76e/0xd90\
  \ fs/ext4/extents.c:931\n ext4_clu_mapped+0x117/0x970 fs/ext4/extents.c:5809\n ext4_insert_delayed_block\
  \ fs/ext4/inode.c:1696 [inline]\n ext4_da_map_blocks fs/ext4/inode.c:1806 [inline]\n\
  \ ext4_da_get_block_prep+0x9e8/0x13c0 fs/ext4/inode.c:1870\n ext4_block_write_begin+0x6a8/0x2290\
  \ fs/ext4/inode.c:1098\n ext4_da_write_begin+0x539/0x760 fs/ext4/inode.c:3082\n\
  \ generic_perform_write+0x2e4/0x5e0 mm/filemap.c:3772\n ext4_buffered_write_iter+0x122/0x3a0\
  \ fs/ext4/file.c:285\n ext4_file_write_iter+0x1d0/0x18f0\n call_write_iter include/linux/fs.h:2186\
  \ [inline]\n new_sync_write fs/read_write.c:491 [inline]\n vfs_write+0x7dc/0xc50\
  \ fs/read_write.c:584\n ksys_write+0x177/0x2a0 fs/read_write.c:637\n do_syscall_x64\
  \ arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80\n\
  \ entry_SYSCALL_64_after_hwframe+0x63/0xcd\nRIP: 0033:0x7f4b7a9737b9\nRSP: 002b:00007ffc5cac3668\
  \ EFLAGS: 00000246 ORIG_RAX: 0000000000000001\nRAX: ffffffffffffffda RBX: 0000000000000000\
  \ RCX: 00007f4b7a9737b9\nRDX: 00000000175d9003 RSI: 0000000020000200 RDI: 0000000000000004\n\
  RBP: 00007f4b7a933050 R08: 0000000000000000 R09: 0000000000000000\nR10: 000000000000079f\
  \ R11: 0000000000000246 R12: 00007f4b7a9330e0\nR13: 0000000000000000 R14: 0000000000000000\
  \ R15: 0000000000000000\n </TASK>\n\nAbove issue is happens when enable bigalloc\
  \ and inline data feature. As\ncommit 131294c35ed6 fixed delayed allocation bug\
  \ in ext4_clu_mapped for\nbigalloc + inline. But it only resolved issue when has\
  \ inline data, if\ninline data has been converted to extent(ext4_da_convert_inline_data_to_extent)\n\
  before writepages, there is no EXT4_STATE_MAY_INLINE_DATA flag. However\ni_data\
  \ is still store inline data in this scene. Then will trigger UAF\nwhen find extent.\n\
  To resolve above issue, there is need to add judge \"ext4_has_inline_data(inode)\"\
  \nin ext4_clu_mapped().\n\nFixes: 131294c35ed6 (\"ext4: fix delayed allocation bug\
  \ in ext4_clu_mapped for bigalloc + inline\")\nReported-by: syzbot+bf4bb7731ef73b83a3b4@syzkaller.appspotmail.com\n\
  Reviewed-by: Jan Kara <jack@suse.cz>\nReviewed-by: Ye Bin <yebin10@huawei.com>\n\
  Reviewed-by: Tudor Ambarus <tudor.ambarus@linaro.org>\nTested-by: Tudor Ambarus\
  \ <tudor.ambarus@linaro.org>\nLink: https://lore.kernel.org/r/20230406111627.1916759-1-tudor.ambarus@linaro.org\n\
  Signed-off-by: Theodore Ts'o <tytso@mit.edu>\n"
submodule:
- fs/ext4
hunk_count: 1
covered_count: 1
