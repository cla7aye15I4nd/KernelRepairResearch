id: 43a3fa52c0d9c5c94f41
bug_link: https://syzkaller.appspot.com/bug?extid=43a3fa52c0d9c5c94f41
title: 'KASAN: use-after-free Read in brnf_exit_net'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 22f2efd337761dd03e79b8ddf988653bdb5c20f9
fix_commit: 7e6daf50e1f4ea0ecd56406beb64ffc66e1e94db
datetime: '2019-06-20T12:23:33+02:00'
fix_commit_message: "netfilter: bridge: prevent UAF in brnf_exit_net()\n\nPrevent\
  \ a UAF in brnf_exit_net().\n\nWhen unregister_net_sysctl_table() is called the\
  \ ctl_hdr pointer will\nobviously be freed and so accessing it righter after is\
  \ invalid. Fix\nthis by stashing a pointer to the table we want to free before we\n\
  unregister the sysctl header.\n\nNote that syzkaller falsely chased this down to\
  \ the drm tree so the\nFixes tag that syzkaller requested would be wrong. This commit\
  \ uses a\ndifferent but the correct Fixes tag.\n\n/* Splat */\n\nBUG: KASAN: use-after-free\
  \ in br_netfilter_sysctl_exit_net\nnet/bridge/br_netfilter_hooks.c:1121 [inline]\n\
  BUG: KASAN: use-after-free in brnf_exit_net+0x38c/0x3a0\nnet/bridge/br_netfilter_hooks.c:1141\n\
  Read of size 8 at addr ffff8880a4078d60 by task kworker/u4:4/8749\n\nCPU: 0 PID:\
  \ 8749 Comm: kworker/u4:4 Not tainted 5.2.0-rc5-next-20190618 #17\nHardware name:\
  \ Google Google Compute Engine/Google Compute Engine, BIOS Google\n01/01/2011\n\
  Workqueue: netns cleanup_net\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n\
  \ dump_stack+0x172/0x1f0 lib/dump_stack.c:113\n print_address_description.cold+0xd4/0x306\
  \ mm/kasan/report.c:351\n __kasan_report.cold+0x1b/0x36 mm/kasan/report.c:482\n\
  \ kasan_report+0x12/0x20 mm/kasan/common.c:614\n __asan_report_load8_noabort+0x14/0x20\
  \ mm/kasan/generic_report.c:132\n br_netfilter_sysctl_exit_net net/bridge/br_netfilter_hooks.c:1121\
  \ [inline]\n brnf_exit_net+0x38c/0x3a0 net/bridge/br_netfilter_hooks.c:1141\n ops_exit_list.isra.0+0xaa/0x150\
  \ net/core/net_namespace.c:154\n cleanup_net+0x3fb/0x960 net/core/net_namespace.c:553\n\
  \ process_one_work+0x989/0x1790 kernel/workqueue.c:2269\n worker_thread+0x98/0xe40\
  \ kernel/workqueue.c:2415\n kthread+0x354/0x420 kernel/kthread.c:255\n ret_from_fork+0x24/0x30\
  \ arch/x86/entry/entry_64.S:352\n\nAllocated by task 11374:\n save_stack+0x23/0x90\
  \ mm/kasan/common.c:71\n set_track mm/kasan/common.c:79 [inline]\n __kasan_kmalloc\
  \ mm/kasan/common.c:489 [inline]\n __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462\n\
  \ kasan_kmalloc+0x9/0x10 mm/kasan/common.c:503\n __do_kmalloc mm/slab.c:3645 [inline]\n\
  \ __kmalloc+0x15c/0x740 mm/slab.c:3654\n kmalloc include/linux/slab.h:552 [inline]\n\
  \ kzalloc include/linux/slab.h:743 [inline]\n __register_sysctl_table+0xc7/0xef0\
  \ fs/proc/proc_sysctl.c:1327\n register_net_sysctl+0x29/0x30 net/sysctl_net.c:121\n\
  \ br_netfilter_sysctl_init_net net/bridge/br_netfilter_hooks.c:1105 [inline]\n brnf_init_net+0x379/0x6a0\
  \ net/bridge/br_netfilter_hooks.c:1126\n ops_init+0xb3/0x410 net/core/net_namespace.c:130\n\
  \ setup_net+0x2d3/0x740 net/core/net_namespace.c:316\n copy_net_ns+0x1df/0x340 net/core/net_namespace.c:439\n\
  \ create_new_namespaces+0x400/0x7b0 kernel/nsproxy.c:103\n unshare_nsproxy_namespaces+0xc2/0x200\
  \ kernel/nsproxy.c:202\n ksys_unshare+0x444/0x980 kernel/fork.c:2822\n __do_sys_unshare\
  \ kernel/fork.c:2890 [inline]\n __se_sys_unshare kernel/fork.c:2888 [inline]\n __x64_sys_unshare+0x31/0x40\
  \ kernel/fork.c:2888\n do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  \nFreed by task 9:\n save_stack+0x23/0x90 mm/kasan/common.c:71\n set_track mm/kasan/common.c:79\
  \ [inline]\n __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451\n kasan_slab_free+0xe/0x10\
  \ mm/kasan/common.c:459\n __cache_free mm/slab.c:3417 [inline]\n kfree+0x10a/0x2c0\
  \ mm/slab.c:3746\n __rcu_reclaim kernel/rcu/rcu.h:215 [inline]\n rcu_do_batch kernel/rcu/tree.c:2092\
  \ [inline]\n invoke_rcu_callbacks kernel/rcu/tree.c:2310 [inline]\n rcu_core+0xcc7/0x1500\
  \ kernel/rcu/tree.c:2291\n __do_softirq+0x25c/0x94c kernel/softirq.c:292\n\nThe\
  \ buggy address belongs to the object at ffff8880a4078d40\n which belongs to the\
  \ cache kmalloc-512 of size 512\nThe buggy address is located 32 bytes inside of\n\
  \ 512-byte region [ffff8880a4078d40, ffff8880a4078f40)\nThe buggy address belongs\
  \ to the page:\npage:ffffea0002901e00 refcount:1 mapcount:0 mapping:ffff8880aa400a80\n\
  index:0xffff8880a40785c0\nflags: 0x1fffc0000000200(slab)\nraw: 01fffc0000000200\
  \ ffffea0001d636c8 ffffea0001b07308 ffff8880aa400a80\nraw: ffff8880a40785c0 ffff8880a40780c0\
  \ 0000000100000004 0000000000000000\npage dumped because: kasan: bad access detected\n\
  \nMemory state around the buggy address:\n ffff8880a4078c00: fb fb fb fb fb fb fb\
  \ fb fb fb fb fb fb fb fb fb\n ffff8880a4078c80: fb fb fb fb fb fb fb fb fc fc fc\
  \ fc fc fc fc fc\n> ffff8880a4078d00: fc fc fc fc fc fc fc fc fb fb fb fb fb fb\
  \ fb fb\n                                                       ^\n ffff8880a4078d80:\
  \ fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff8880a4078e00: fb fb fb fb\
  \ fb fb fb fb fb fb fb fb fb fb fb fb\n\nReported-by: syzbot+43a3fa52c0d9c5c94f41@syzkaller.appspotmail.com\n\
  Fixes: 22567590b2e6 (\"netfilter: bridge: namespace bridge netfilter sysctls\")\n\
  Signed-off-by: Christian Brauner <christian@brauner.io>\nSigned-off-by: Pablo Neira\
  \ Ayuso <pablo@netfilter.org>\n"
submodule:
- net/bridge
hunk_count: 1
covered_count: 1
