======================================================
WARNING: possible circular locking dependency detected
6.10.0-rc2-syzkaller-00010-g2ab795141095 #0 Not tainted
------------------------------------------------------
kswapd0/89 is trying to acquire lock:
ffff888059c4de18 (&xfs_nondir_ilock_class#3){++++}-{3:3}, at: xfs_can_free_eofblocks+0x667/0x940 fs/xfs/xfs_bmap_util.c:552

but task is already holding lock:
ffffffff8e42b240 (fs_reclaim){+.+.}-{0:0}, at: balance_pgdat mm/vmscan.c:6798 [inline]
ffffffff8e42b240 (fs_reclaim){+.+.}-{0:0}, at: kswapd+0xbe8/0x3700 mm/vmscan.c:7180

which lock already depends on the new lock.


the existing dependency chain (in reverse order) is:

-> #1 (fs_reclaim){+.+.}-{0:0}:
       lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5754
       __fs_reclaim_acquire mm/page_alloc.c:3783 [inline]
       fs_reclaim_acquire+0x88/0x140 mm/page_alloc.c:3797
       might_alloc include/linux/sched/mm.h:334 [inline]
       slab_pre_alloc_hook mm/slub.c:3890 [inline]
       slab_alloc_node mm/slub.c:3980 [inline]
       __do_kmalloc_node mm/slub.c:4120 [inline]
       __kmalloc_noprof+0xa9/0x400 mm/slub.c:4134
       kmalloc_noprof include/linux/slab.h:664 [inline]
       xfs_attr_shortform_list+0x753/0x1900 fs/xfs/xfs_attr_list.c:117
       xfs_attr_list+0x1d0/0x270 fs/xfs/xfs_attr_list.c:595
       xfs_vn_listxattr+0x1d2/0x2c0 fs/xfs/xfs_xattr.c:324
       vfs_listxattr fs/xattr.c:493 [inline]
       listxattr+0x109/0x290 fs/xattr.c:840
       path_listxattr fs/xattr.c:864 [inline]
       __do_sys_llistxattr fs/xattr.c:882 [inline]
       __se_sys_llistxattr fs/xattr.c:879 [inline]
       __x64_sys_llistxattr+0x173/0x230 fs/xattr.c:879
       do_syscall_x64 arch/x86/entry/common.c:52 [inline]
       do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83
       entry_SYSCALL_64_after_hwframe+0x77/0x7f

-> #0 (&xfs_nondir_ilock_class#3){++++}-{3:3}:
       check_prev_add kernel/locking/lockdep.c:3134 [inline]
       check_prevs_add kernel/locking/lockdep.c:3253 [inline]
       validate_chain+0x18e0/0x5900 kernel/locking/lockdep.c:3869
       __lock_acquire+0x1346/0x1fd0 kernel/locking/lockdep.c:5137
       lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5754
       down_read_nested+0xb5/0xa50 kernel/locking/rwsem.c:1651
       xfs_can_free_eofblocks+0x667/0x940 fs/xfs/xfs_bmap_util.c:552
       xfs_inode_mark_reclaimable+0x1bb/0xf60 fs/xfs/xfs_icache.c:2147
       destroy_inode fs/inode.c:311 [inline]
       evict+0x54b/0x630 fs/inode.c:682
       dispose_list fs/inode.c:700 [inline]
       prune_icache_sb+0x239/0x2f0 fs/inode.c:885
       super_cache_scan+0x38c/0x4b0 fs/super.c:223
       do_shrink_slab+0x707/0x1160 mm/shrinker.c:435
       shrink_slab_memcg mm/shrinker.c:548 [inline]
       shrink_slab+0x87c/0x14d0 mm/shrinker.c:626
       shrink_one+0x453/0x880 mm/vmscan.c:4790
       shrink_many mm/vmscan.c:4851 [inline]
       lru_gen_shrink_node mm/vmscan.c:4951 [inline]
       shrink_node+0x37eb/0x3fe0 mm/vmscan.c:5910
       kswapd_shrink_node mm/vmscan.c:6720 [inline]
       balance_pgdat mm/vmscan.c:6911 [inline]
       kswapd+0x1882/0x3700 mm/vmscan.c:7180
       kthread+0x2f2/0x390 kernel/kthread.c:389
       ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147
       ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244

other info that might help us debug this:

 Possible unsafe locking scenario:

       CPU0                    CPU1
       ----                    ----
  lock(fs_reclaim);
                               lock(&xfs_nondir_ilock_class#3);
                               lock(fs_reclaim);
  rlock(&xfs_nondir_ilock_class#3);

 *** DEADLOCK ***

2 locks held by kswapd0/89:
 #0: ffffffff8e42b240 (fs_reclaim){+.+.}-{0:0}, at: balance_pgdat mm/vmscan.c:6798 [inline]
 #0: ffffffff8e42b240 (fs_reclaim){+.+.}-{0:0}, at: kswapd+0xbe8/0x3700 mm/vmscan.c:7180
 #1: ffff88802500e0e0 (&type->s_umount_key#68){++++}-{3:3}, at: super_trylock_shared fs/super.c:562 [inline]
 #1: ffff88802500e0e0 (&type->s_umount_key#68){++++}-{3:3}, at: super_cache_scan+0x94/0x4b0 fs/super.c:196

stack backtrace:
CPU: 0 PID: 89 Comm: kswapd0 Not tainted 6.10.0-rc2-syzkaller-00010-g2ab795141095 #0
Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 04/02/2024
Call Trace:
 <TASK>
 __dump_stack lib/dump_stack.c:88 [inline]
 dump_stack_lvl+0x241/0x360 lib/dump_stack.c:114
 check_noncircular+0x36a/0x4a0 kernel/locking/lockdep.c:2187
 check_prev_add kernel/locking/lockdep.c:3134 [inline]
 check_prevs_add kernel/locking/lockdep.c:3253 [inline]
 validate_chain+0x18e0/0x5900 kernel/locking/lockdep.c:3869
 __lock_acquire+0x1346/0x1fd0 kernel/locking/lockdep.c:5137
 lock_acquire+0x1ed/0x550 kernel/locking/lockdep.c:5754
 down_read_nested+0xb5/0xa50 kernel/locking/rwsem.c:1651
 xfs_can_free_eofblocks+0x667/0x940 fs/xfs/xfs_bmap_util.c:552
 xfs_inode_mark_reclaimable+0x1bb/0xf60 fs/xfs/xfs_icache.c:2147
 destroy_inode fs/inode.c:311 [inline]
 evict+0x54b/0x630 fs/inode.c:682
 dispose_list fs/inode.c:700 [inline]
 prune_icache_sb+0x239/0x2f0 fs/inode.c:885
 super_cache_scan+0x38c/0x4b0 fs/super.c:223
 do_shrink_slab+0x707/0x1160 mm/shrinker.c:435
 shrink_slab_memcg mm/shrinker.c:548 [inline]
 shrink_slab+0x87c/0x14d0 mm/shrinker.c:626
 shrink_one+0x453/0x880 mm/vmscan.c:4790
 shrink_many mm/vmscan.c:4851 [inline]
 lru_gen_shrink_node mm/vmscan.c:4951 [inline]
 shrink_node+0x37eb/0x3fe0 mm/vmscan.c:5910
 kswapd_shrink_node mm/vmscan.c:6720 [inline]
 balance_pgdat mm/vmscan.c:6911 [inline]
 kswapd+0x1882/0x3700 mm/vmscan.c:7180
 kthread+0x2f2/0x390 kernel/kthread.c:389
 ret_from_fork+0x4d/0x80 arch/x86/kernel/process.c:147
 ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244
 </TASK>
