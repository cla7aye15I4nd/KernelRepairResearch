id: 1ac5b398842451b74cec
bug_link: https://syzkaller.appspot.com/bug?extid=1ac5b398842451b74cec
title: possible deadlock in xfs_can_free_eofblocks
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 37641efaa3faa4b8292aba4bbd7d71c0b703a239
fix_commit: 6fe60465e1d53ea321ee909be26d97529e8f746c
datetime: '2024-04-24T19:34:26-07:00'
fix_commit_message: "stackdepot: respect __GFP_NOLOCKDEP allocation flag\n\nIf stack_depot_save_flags()\
  \ allocates memory it always drops\n__GFP_NOLOCKDEP flag.  So when KASAN tries to\
  \ track __GFP_NOLOCKDEP\nallocation we may end up with lockdep splat like bellow:\n\
  \n======================================================\n WARNING: possible circular\
  \ locking dependency detected\n 6.9.0-rc3+ #49 Not tainted\n ------------------------------------------------------\n\
  \ kswapd0/149 is trying to acquire lock:\n ffff88811346a920\n(&xfs_nondir_ilock_class){++++}-{4:4},\
  \ at: xfs_reclaim_inode+0x3ac/0x590\n[xfs]\n\n but task is already holding lock:\n\
  \ ffffffff8bb33100 (fs_reclaim){+.+.}-{0:0}, at:\nbalance_pgdat+0x5d9/0xad0\n\n\
  \ which lock already depends on the new lock.\n\n the existing dependency chain\
  \ (in reverse order) is:\n -> #1 (fs_reclaim){+.+.}-{0:0}:\n        __lock_acquire+0x7da/0x1030\n\
  \        lock_acquire+0x15d/0x400\n        fs_reclaim_acquire+0xb5/0x100\n prepare_alloc_pages.constprop.0+0xc5/0x230\n\
  \        __alloc_pages+0x12a/0x3f0\n        alloc_pages_mpol+0x175/0x340\n     \
  \   stack_depot_save_flags+0x4c5/0x510\n        kasan_save_stack+0x30/0x40\n   \
  \     kasan_save_track+0x10/0x30\n        __kasan_slab_alloc+0x83/0x90\n       \
  \ kmem_cache_alloc+0x15e/0x4a0\n        __alloc_object+0x35/0x370\n        __create_object+0x22/0x90\n\
  \ __kmalloc_node_track_caller+0x477/0x5b0\n        krealloc+0x5f/0x110\n       \
  \ xfs_iext_insert_raw+0x4b2/0x6e0 [xfs]\n        xfs_iext_insert+0x2e/0x130 [xfs]\n\
  \        xfs_iread_bmbt_block+0x1a9/0x4d0 [xfs]\n        xfs_btree_visit_block+0xfb/0x290\
  \ [xfs]\n        xfs_btree_visit_blocks+0x215/0x2c0 [xfs]\n        xfs_iread_extents+0x1a2/0x2e0\
  \ [xfs]\n xfs_buffered_write_iomap_begin+0x376/0x10a0 [xfs]\n        iomap_iter+0x1d1/0x2d0\n\
  \ iomap_file_buffered_write+0x120/0x1a0\n        xfs_file_buffered_write+0x128/0x4b0\
  \ [xfs]\n        vfs_write+0x675/0x890\n        ksys_write+0xc3/0x160\n        do_syscall_64+0x94/0x170\n\
  \ entry_SYSCALL_64_after_hwframe+0x71/0x79\n\nAlways preserve __GFP_NOLOCKDEP to\
  \ fix this.\n\nLink: https://lkml.kernel.org/r/20240418141133.22950-1-ryabinin.a.a@gmail.com\n\
  Fixes: cd11016e5f52 (\"mm, kasan: stackdepot implementation. Enable stackdepot for\
  \ SLAB\")\nSigned-off-by: Andrey Ryabinin <ryabinin.a.a@gmail.com>\nReported-by:\
  \ Xiubo Li <xiubli@redhat.com>\nCloses: https://lore.kernel.org/all/a0caa289-ca02-48eb-9bf2-d86fd47b71f4@redhat.com/\n\
  Reported-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>\nCloses: https://lore.kernel.org/all/f9ff999a-e170-b66b-7caf-293f2b147ac2@opensource.wdc.com/\n\
  Suggested-by: Dave Chinner <david@fromorbit.com>\nTested-by: Xiubo Li <xiubli@redhat.com>\n\
  Cc: Christoph Hellwig <hch@infradead.org>\nCc: Alexander Potapenko <glider@google.com>\n\
  Cc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\n"
submodule:
- lib
hunk_count: 1
covered_count: 0
