id: c94a3675a626f6333d74
bug_link: https://syzkaller.appspot.com/bug?extid=c94a3675a626f6333d74
title: 'BUG: corrupted list in rdma_listen (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 081bdc9fe05bb23248f5effb6f811da3da4b8252
fix_commit: 22e9f71072fa605cbf033158db58e0790101928d
datetime: '2022-02-25T16:46:51-04:00'
fix_commit_message: "RDMA/cma: Do not change route.addr.src_addr outside state checks\n\
  \nIf the state is not idle then resolve_prepare_src() should immediately\nfail and\
  \ no change to global state should happen. However, it\nunconditionally overwrites\
  \ the src_addr trying to build a temporary any\naddress.\n\nFor instance if the\
  \ state is already RDMA_CM_LISTEN then this will corrupt\nthe src_addr and would\
  \ cause the test in cma_cancel_operation():\n\n           if (cma_any_addr(cma_src_addr(id_priv))\
  \ && !id_priv->cma_dev)\n\nWhich would manifest as this trace from syzkaller:\n\n\
  \  BUG: KASAN: use-after-free in __list_add_valid+0x93/0xa0 lib/list_debug.c:26\n\
  \  Read of size 8 at addr ffff8881546491e0 by task syz-executor.1/32204\n\n  CPU:\
  \ 1 PID: 32204 Comm: syz-executor.1 Not tainted 5.12.0-rc8-syzkaller #0\n  Hardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\n\
  \  Call Trace:\n   __dump_stack lib/dump_stack.c:79 [inline]\n   dump_stack+0x141/0x1d7\
  \ lib/dump_stack.c:120\n   print_address_description.constprop.0.cold+0x5b/0x2f8\
  \ mm/kasan/report.c:232\n   __kasan_report mm/kasan/report.c:399 [inline]\n   kasan_report.cold+0x7c/0xd8\
  \ mm/kasan/report.c:416\n   __list_add_valid+0x93/0xa0 lib/list_debug.c:26\n   __list_add\
  \ include/linux/list.h:67 [inline]\n   list_add_tail include/linux/list.h:100 [inline]\n\
  \   cma_listen_on_all drivers/infiniband/core/cma.c:2557 [inline]\n   rdma_listen+0x787/0xe00\
  \ drivers/infiniband/core/cma.c:3751\n   ucma_listen+0x16a/0x210 drivers/infiniband/core/ucma.c:1102\n\
  \   ucma_write+0x259/0x350 drivers/infiniband/core/ucma.c:1732\n   vfs_write+0x28e/0xa30\
  \ fs/read_write.c:603\n   ksys_write+0x1ee/0x250 fs/read_write.c:658\n   do_syscall_64+0x2d/0x70\
  \ arch/x86/entry/common.c:46\n   entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nThis\
  \ is indicating that an rdma_id_private was destroyed without doing\ncma_cancel_listens().\n\
  \nInstead of trying to re-use the src_addr memory to indirectly create an\nany address\
  \ derived from the dst build one explicitly on the stack and\nbind to that as any\
  \ other normal flow would do. rdma_bind_addr() will copy\nit over the src_addr once\
  \ it knows the state is valid.\n\nThis is similar to commit bc0bdc5afaa7 (\"RDMA/cma:\
  \ Do not change\nroute.addr.src_addr.ss_family\")\n\nLink: https://lore.kernel.org/r/0-v2-e975c8fd9ef2+11e-syz_cma_srcaddr_jgg@nvidia.com\n\
  Cc: stable@vger.kernel.org\nFixes: 732d41c545bb (\"RDMA/cma: Make the locking for\
  \ automatic state transition more clear\")\nReported-by: syzbot+c94a3675a626f6333d74@syzkaller.appspotmail.com\n\
  Reviewed-by: Leon Romanovsky <leonro@nvidia.com>\nSigned-off-by: Jason Gunthorpe\
  \ <jgg@nvidia.com>\n"
submodule:
- drivers/infiniband/core
hunk_count: 1
covered_count: 0
