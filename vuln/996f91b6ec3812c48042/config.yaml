id: 996f91b6ec3812c48042
bug_link: https://syzkaller.appspot.com/bug?extid=996f91b6ec3812c48042
title: possible deadlock in __io_queue_deferred
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 0ba9c9edcd152158a0e321a4c13ac1dfc571ff3d
fix_commit: 7271ef3a93a832180068c7aade3f130b7f39b17e
datetime: '2020-08-10T15:19:25-06:00'
fix_commit_message: "io_uring: fix recursive completion locking on oveflow flush\n\
  \nsyszbot reports a scenario where we recurse on the completion lock\nwhen flushing\
  \ an overflow:\n\n1 lock held by syz-executor287/6816:\n #0: ffff888093cdb4d8 (&ctx->completion_lock){....}-{2:2},\
  \ at: io_cqring_overflow_flush+0xc6/0xab0 fs/io_uring.c:1333\n\nstack backtrace:\n\
  CPU: 1 PID: 6816 Comm: syz-executor287 Not tainted 5.8.0-syzkaller #0\nHardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\n\
  Call Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0x1f0/0x31e\
  \ lib/dump_stack.c:118\n print_deadlock_bug kernel/locking/lockdep.c:2391 [inline]\n\
  \ check_deadlock kernel/locking/lockdep.c:2432 [inline]\n validate_chain+0x69a4/0x88a0\
  \ kernel/locking/lockdep.c:3202\n __lock_acquire+0x1161/0x2ab0 kernel/locking/lockdep.c:4426\n\
  \ lock_acquire+0x160/0x730 kernel/locking/lockdep.c:5005\n __raw_spin_lock_irq include/linux/spinlock_api_smp.h:128\
  \ [inline]\n _raw_spin_lock_irq+0x67/0x80 kernel/locking/spinlock.c:167\n spin_lock_irq\
  \ include/linux/spinlock.h:379 [inline]\n io_queue_linked_timeout fs/io_uring.c:5928\
  \ [inline]\n __io_queue_async_work fs/io_uring.c:1192 [inline]\n __io_queue_deferred+0x36a/0x790\
  \ fs/io_uring.c:1237\n io_cqring_overflow_flush+0x774/0xab0 fs/io_uring.c:1359\n\
  \ io_ring_ctx_wait_and_kill+0x2a1/0x570 fs/io_uring.c:7808\n io_uring_release+0x59/0x70\
  \ fs/io_uring.c:7829\n __fput+0x34f/0x7b0 fs/file_table.c:281\n task_work_run+0x137/0x1c0\
  \ kernel/task_work.c:135\n exit_task_work include/linux/task_work.h:25 [inline]\n\
  \ do_exit+0x5f3/0x1f20 kernel/exit.c:806\n do_group_exit+0x161/0x2d0 kernel/exit.c:903\n\
  \ __do_sys_exit_group+0x13/0x20 kernel/exit.c:914\n __se_sys_exit_group+0x10/0x10\
  \ kernel/exit.c:912\n __x64_sys_exit_group+0x37/0x40 kernel/exit.c:912\n do_syscall_64+0x31/0x70\
  \ arch/x86/entry/common.c:46\n entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nFix this\
  \ by passing back the link from __io_queue_async_work(), and\nthen let the caller\
  \ handle the queueing of the link. Take care to also\npunt the submission reference\
  \ put to the caller, as we're holding the\ncompletion lock for the __io_queue_defer()\
  \ case. Hence we need to mark\nthe io_kiocb appropriately for that case.\n\nReported-by:\
  \ syzbot+996f91b6ec3812c48042@syzkaller.appspotmail.com\nSigned-off-by: Jens Axboe\
  \ <axboe@kernel.dk>\n"
submodule:
- fs
hunk_count: 6
covered_count: 5
