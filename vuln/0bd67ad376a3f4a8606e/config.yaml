id: 0bd67ad376a3f4a8606e
bug_link: https://syzkaller.appspot.com/bug?extid=0bd67ad376a3f4a8606e
title: 'KASAN: use-after-free Read in bpf_prog_kallsyms_find (2)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: ce197d83a9fc42795c248c90983bf05faf0f013b
fix_commit: cd7455f1013ef96d5cbf5c05d2b7c06f273810a6
datetime: '2019-10-22T11:26:09-07:00'
fix_commit_message: "bpf: Fix use after free in subprog's jited symbol removal\n\n\
  syzkaller managed to trigger the following crash:\n\n  [...]\n  BUG: unable to handle\
  \ page fault for address: ffffc90001923030\n  #PF: supervisor read access in kernel\
  \ mode\n  #PF: error_code(0x0000) - not-present page\n  PGD aa551067 P4D aa551067\
  \ PUD aa552067 PMD a572b067 PTE 80000000a1173163\n  Oops: 0000 [#1] PREEMPT SMP\
  \ KASAN\n  CPU: 0 PID: 7982 Comm: syz-executor912 Not tainted 5.4.0-rc3+ #0\n  Hardware\
  \ name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\n\
  \  RIP: 0010:bpf_jit_binary_hdr include/linux/filter.h:787 [inline]\n  RIP: 0010:bpf_get_prog_addr_region\
  \ kernel/bpf/core.c:531 [inline]\n  RIP: 0010:bpf_tree_comp kernel/bpf/core.c:600\
  \ [inline]\n  RIP: 0010:__lt_find include/linux/rbtree_latch.h:115 [inline]\n  RIP:\
  \ 0010:latch_tree_find include/linux/rbtree_latch.h:208 [inline]\n  RIP: 0010:bpf_prog_kallsyms_find\
  \ kernel/bpf/core.c:674 [inline]\n  RIP: 0010:is_bpf_text_address+0x184/0x3b0 kernel/bpf/core.c:709\n\
  \  [...]\n  Call Trace:\n   kernel_text_address kernel/extable.c:147 [inline]\n\
  \   __kernel_text_address+0x9a/0x110 kernel/extable.c:102\n   unwind_get_return_address+0x4c/0x90\
  \ arch/x86/kernel/unwind_frame.c:19\n   arch_stack_walk+0x98/0xe0 arch/x86/kernel/stacktrace.c:26\n\
  \   stack_trace_save+0xb6/0x150 kernel/stacktrace.c:123\n   save_stack mm/kasan/common.c:69\
  \ [inline]\n   set_track mm/kasan/common.c:77 [inline]\n   __kasan_kmalloc+0x11c/0x1b0\
  \ mm/kasan/common.c:510\n   kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:518\n  \
  \ slab_post_alloc_hook mm/slab.h:584 [inline]\n   slab_alloc mm/slab.c:3319 [inline]\n\
  \   kmem_cache_alloc+0x1f5/0x2e0 mm/slab.c:3483\n   getname_flags+0xba/0x640 fs/namei.c:138\n\
  \   getname+0x19/0x20 fs/namei.c:209\n   do_sys_open+0x261/0x560 fs/open.c:1091\n\
  \   __do_sys_open fs/open.c:1115 [inline]\n   __se_sys_open fs/open.c:1110 [inline]\n\
  \   __x64_sys_open+0x87/0x90 fs/open.c:1110\n   do_syscall_64+0xf7/0x1c0 arch/x86/entry/common.c:290\n\
  \   entry_SYSCALL_64_after_hwframe+0x49/0xbe\n  [...]\n\nAfter further debugging\
  \ it turns out that we walk kallsyms while in parallel\nwe tear down a BPF program\
  \ which contains subprograms that have been JITed\nthough the program itself has\
  \ not been fully exposed and is eventually bailing\nout with error.\n\nThe bpf_prog_kallsyms_del_subprogs()\
  \ in bpf_prog_load()'s error path removes\nthe symbols, however, bpf_prog_free()\
  \ tears down the JIT memory too early via\nscheduled work. Instead, it needs to\
  \ properly respect RCU grace period as the\nkallsyms walk for BPF is under RCU.\n\
  \nFix it by refactoring __bpf_prog_put()'s tear down and reuse it in our error\n\
  path where we defer final destruction when we have subprogs in the program.\n\n\
  Fixes: 7d1982b4e335 (\"bpf: fix panic in prog load calls cleanup\")\nFixes: 1c2a088a6626\
  \ (\"bpf: x64: add JIT support for multi-function programs\")\nReported-by: syzbot+710043c5d1d5b5013bc7@syzkaller.appspotmail.com\n\
  Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Alexei Starovoitov\
  \ <ast@kernel.org>\nTested-by: syzbot+710043c5d1d5b5013bc7@syzkaller.appspotmail.com\n\
  Link: https://lore.kernel.org/bpf/55f6367324c2d7e9583fa9ccf5385dcbba0d7a6e.1571752452.git.daniel@iogearbox.net\n"
submodule:
- include/linux
- kernel/bpf
hunk_count: 4
covered_count: 1
