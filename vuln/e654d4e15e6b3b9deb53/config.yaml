id: e654d4e15e6b3b9deb53
bug_link: https://syzkaller.appspot.com/bug?extid=e654d4e15e6b3b9deb53
title: possible deadlock in io_poll_double_wake (3)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: ab1dab960b8352cee082db0f8a54dc92a948bfd7
fix_commit: aa43477b040251f451db0d844073ac00a8ab66ee
datetime: '2021-12-28T09:51:15-08:00'
fix_commit_message: "io_uring: poll rework\n\nIt's not possible to go forward with\
  \ the current state of io_uring\npolling, we need a more straightforward and easier\
  \ synchronisation.\nThere are a lot of problems with how it is at the moment, including\n\
  missing events on rewait.\n\nThe main idea here is to introduce a notion of request\
  \ ownership while\npolling, no one but the owner can modify any part but ->poll_refs\
  \ of\nstruct io_kiocb, that grants us protection against all sorts of races.\n\n\
  Main users of such exclusivity are poll task_work handler, so before\nqueueing a\
  \ tw one should have/acquire ownership, which will be handed\noff to the tw handler.\n\
  The other user is __io_arm_poll_handler() do initial poll arming. It\nstarts taking\
  \ the ownership, so tw handlers won't be run until it's\nreleased later in the function\
  \ after vfs_poll. note: also prevents\nraces in __io_queue_proc().\nPoll wake/etc.\
  \ may not be able to get ownership, then they need to\nincrease the poll refcount\
  \ and the task_work should notice it and retry\nif necessary, see io_poll_check_events().\n\
  There is also IO_POLL_CANCEL_FLAG flag to notify that we want to kill\nrequest.\n\
  \nIt makes cancellations more reliable, enables double multishot polling,\nfixes\
  \ double poll rewait, fixes missing poll events and fixes another\nbunch of races.\n\
  \nEven though it adds some overhead for new refcounting, and there are a\ncouple\
  \ of nice performance wins:\n- no req->refs refcounting for poll requests anymore\n\
  - if the data is already there (once measured for some test to be 1-2%\n  of all\
  \ apoll requests), it removes it doesn't add atomics and removes\n  spin_lock/unlock\
  \ pair.\n- works well with multishots, we don't do remove from queue / add to\n\
  \  queue for each new poll event.\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\n\
  Link: https://lore.kernel.org/r/6b652927c77ed9580ea4330ac5612f0e0848c946.1639605189.git.asml.silence@gmail.com\n\
  Signed-off-by: Jens Axboe <axboe@kernel.dk>\n"
submodule:
- fs
hunk_count: 18
covered_count: 1
