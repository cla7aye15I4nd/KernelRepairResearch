id: 4684a000d5abdade83fac55b1e7d1f935ef1936e
bug_link: https://syzkaller.appspot.com/bug?extid=4684a000d5abdade83fac55b1e7d1f935ef1936e
title: possible deadlock in blkdev_reread_part
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 85b0a54a82e4fbceeb1aebb7cb6909edd1a24668
fix_commit: 0da03cab87e6323ff2e05b14bc7d5c6fcc531efd
datetime: '2018-11-08T06:30:32-07:00'
fix_commit_message: 'loop: Fix deadlock when calling blkdev_reread_part()


  Calling blkdev_reread_part() under loop_ctl_mutex causes lockdep to

  complain about circular lock dependency between bdev->bd_mutex and

  lo->lo_ctl_mutex. The problem is that on loop device open or close

  lo_open() and lo_release() get called with bdev->bd_mutex held and they

  need to acquire loop_ctl_mutex. OTOH when loop_reread_partitions() is

  called with loop_ctl_mutex held, it will call blkdev_reread_part() which

  acquires bdev->bd_mutex. See syzbot report for details [1].


  Move call to blkdev_reread_part() in __loop_clr_fd() from under

  loop_ctl_mutex to finish fixing of the lockdep warning and the possible

  deadlock.


  [1] https://syzkaller.appspot.com/bug?id=bf154052f0eea4bc7712499e4569505907d1588


  Reported-by: syzbot <syzbot+4684a000d5abdade83fac55b1e7d1f935ef1936e@syzkaller.appspotmail.com>

  Signed-off-by: Jan Kara <jack@suse.cz>

  Signed-off-by: Jens Axboe <axboe@kernel.dk>

  '
submodule:
- drivers/block
hunk_count: 5
covered_count: 2
