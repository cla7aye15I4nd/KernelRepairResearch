id: 273b547b15eb58ea35e8
bug_link: https://syzkaller.appspot.com/bug?extid=273b547b15eb58ea35e8
title: WARNING in __split_huge_page_tail
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 8ebe0a5eaaeb099de03d09ad20f54ed962e2261e
fix_commit: 5aae9265ee1a30cf716d6caf6b29fe99b9d55130
datetime: '2022-10-28T13:37:22-07:00'
fix_commit_message: 'mm: prep_compound_tail() clear page->private


  Although page allocation always clears page->private in the first page or

  head page of an allocation, it has never made a point of clearing

  page->private in the tails (though 0 is often what is already there).


  But now commit 71e2d666ef85 ("mm/huge_memory: do not clobber swp_entry_t

  during THP split") issues a warning when page_tail->private is found to be

  non-0 (unless it''s swapcache).


  Change that warning to dump page_tail (which also dumps head), instead of

  just the head: so far we have seen dead000000000122, dead000000000003,

  dead000000000001 or 0000000000000002 in the raw output for tail private.


  We could just delete the warning, but today''s consensus appears to want

  page->private to be 0, unless there''s a good reason for it to be set: so

  now clear it in prep_compound_tail() (more general than just for THP; but

  not for high order allocation, which makes no pass down the tails).


  Link: https://lkml.kernel.org/r/1c4233bb-4e4d-5969-fbd4-96604268a285@google.com

  Fixes: 71e2d666ef85 ("mm/huge_memory: do not clobber swp_entry_t during THP split")

  Signed-off-by: Hugh Dickins <hughd@google.com>

  Acked-by: Mel Gorman <mgorman@techsingularity.net>

  Cc: Matthew Wilcox (Oracle) <willy@infradead.org>

  Cc: <stable@vger.kernel.org>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  '
submodule:
- mm
hunk_count: 2
covered_count: 1
