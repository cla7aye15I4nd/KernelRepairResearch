id: d889b59b2bb87d4047a2
bug_link: https://syzkaller.appspot.com/bug?extid=d889b59b2bb87d4047a2
title: 'KASAN: slab-out-of-bounds Read in __kvm_gfn_to_hva_cache_init'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: fb56baae5ea509e63c2a068d66a4d8ea91969fca
fix_commit: b6467ab142b708dd076f6186ca274f14af379c72
datetime: '2020-04-14T10:39:56-04:00'
fix_commit_message: 'KVM: Check validity of resolved slot when searching memslots


  Check that the resolved slot (somewhat confusingly named ''start'') is a

  valid/allocated slot before doing the final comparison to see if the

  specified gfn resides in the associated slot.  The resolved slot can be

  invalid if the binary search loop terminated because the search index

  was incremented beyond the number of used slots.


  This bug has existed since the binary search algorithm was introduced,

  but went unnoticed because KVM statically allocated memory for the max

  number of slots, i.e. the access would only be truly out-of-bounds if

  all possible slots were allocated and the specified gfn was less than

  the base of the lowest memslot.  Commit 36947254e5f98 ("KVM: Dynamically

  size memslot array based on number of used slots") eliminated the "all

  possible slots allocated" condition and made the bug embarrasingly easy

  to hit.


  Fixes: 9c1a5d38780e6 ("kvm: optimize GFN to memslot lookup with large slots amount")

  Reported-by: syzbot+d889b59b2bb87d4047a2@syzkaller.appspotmail.com

  Cc: stable@vger.kernel.org

  Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>

  Message-Id: <20200408064059.8957-2-sean.j.christopherson@intel.com>

  Reviewed-by: Cornelia Huck <cohuck@redhat.com>

  Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

  '
submodule:
- include/linux
hunk_count: 1
covered_count: 1
