id: 2f807f4d3a2a4e87f18f
bug_link: https://syzkaller.appspot.com/bug?extid=2f807f4d3a2a4e87f18f
title: general protection fault in trace_probe_unlink
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 17f8607a1658a8e70415eef67909f990d13017b5
fix_commit: d59fae6fea39efe65bb3d3310aaa2a54b5f55c0d
datetime: '2019-09-17T11:21:29-04:00'
fix_commit_message: "tracing/kprobe: Fix NULL pointer access in trace_porbe_unlink()\n\
  \nFix NULL pointer access in trace_probe_unlink() by initializing\ntrace_probe.list\
  \ correctly in trace_probe_init().\n\nIn the error case of trace_probe_init(), it\
  \ can call trace_probe_unlink()\nbefore initializing trace_probe.list member. This\
  \ causes NULL pointer\ndereference at list_del_init() in trace_probe_unlink().\n\
  \nSyzbot reported :\n\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused\
  \ by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] PREEMPT\
  \ SMP KASAN\nCPU: 1 PID: 8633 Comm: syz-executor797 Not tainted 5.3.0-rc8-next-20190915\n\
  #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle\
  \ 01/01/2011\nRIP: 0010:__list_del_entry_valid+0x85/0xf5 lib/list_debug.c:51\nCode:\
  \ 0f 84 e1 00 00 00 48 b8 22 01 00 00 00 00 ad de 49 39 c4 0f 84 e2 00\n00 00 48\
  \ b8 00 00 00 00 00 fc ff df 4c 89 e2 48 c1 ea 03 <80> 3c 02 00 75\n53 49 8b 14\
  \ 24 4c 39 f2 0f 85 99 00 00 00 49 8d 7d\nRSP: 0018:ffff888090a7f9d8 EFLAGS: 00010246\n\
  RAX: dffffc0000000000 RBX: ffff88809b6f90c0 RCX: ffffffff817c0ca9\nRDX: 0000000000000000\
  \ RSI: ffffffff817c0a73 RDI: ffff88809b6f90c8\nRBP: ffff888090a7f9f0 R08: ffff88809a04e600\
  \ R09: ffffed1015d26aed\nR10: ffffed1015d26aec R11: ffff8880ae935763 R12: 0000000000000000\n\
  R13: 0000000000000000 R14: ffff88809b6f90c0 R15: ffff88809b6f90d0\nFS:  0000555556f99880(0000)\
  \ GS:ffff8880ae900000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000\
  \ CR0: 0000000080050033\nCR2: 00000000006cc090 CR3: 00000000962b2000 CR4: 00000000001406e0\n\
  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000\
  \ DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n  __list_del_entry include/linux/list.h:131\
  \ [inline]\n  list_del_init include/linux/list.h:190 [inline]\n  trace_probe_unlink+0x1f/0x200\
  \ kernel/trace/trace_probe.c:959\n  trace_probe_cleanup+0xd3/0x110 kernel/trace/trace_probe.c:973\n\
  \  trace_probe_init+0x3f2/0x510 kernel/trace/trace_probe.c:1011\n  alloc_trace_uprobe+0x5e/0x250\
  \ kernel/trace/trace_uprobe.c:353\n  create_local_trace_uprobe+0x109/0x4a0 kernel/trace/trace_uprobe.c:1508\n\
  \  perf_uprobe_init+0x131/0x210 kernel/trace/trace_event_perf.c:314\n  perf_uprobe_event_init+0x106/0x1a0\
  \ kernel/events/core.c:8898\n  perf_try_init_event+0x135/0x590 kernel/events/core.c:10184\n\
  \  perf_init_event kernel/events/core.c:10228 [inline]\n  perf_event_alloc.part.0+0x1b89/0x33d0\
  \ kernel/events/core.c:10505\n  perf_event_alloc kernel/events/core.c:10887 [inline]\n\
  \  __do_sys_perf_event_open+0xa2d/0x2d00 kernel/events/core.c:10989\n  __se_sys_perf_event_open\
  \ kernel/events/core.c:10871 [inline]\n  __x64_sys_perf_event_open+0xbe/0x150 kernel/events/core.c:10871\n\
  \  do_syscall_64+0xfa/0x760 arch/x86/entry/common.c:290\n  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\
  \nLink: http://lkml.kernel.org/r/156869709721.22406.5153754822203046939.stgit@devnote2\n\
  \nReported-by: syzbot+2f807f4d3a2a4e87f18f@syzkaller.appspotmail.com\nFixes: ca89bc071d5e\
  \ (\"tracing/kprobe: Add multi-probe per event support\")\nSigned-off-by: Masami\
  \ Hiramatsu <mhiramat@kernel.org>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>\n"
submodule:
- kernel/trace
hunk_count: 2
covered_count: 2
