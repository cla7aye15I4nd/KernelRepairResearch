id: ffb4f000dc2872c93f62
bug_link: https://syzkaller.appspot.com/bug?extid=ffb4f000dc2872c93f62
title: 'BUG: unable to handle kernel paging request in get_desc'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 80d72a8f76e8f3f0b5a70b8c7022578e17bde8e7
fix_commit: 97650148a15e0b30099d6175ffe278b9f55ec66a
datetime: '2022-12-15T10:37:28-08:00'
fix_commit_message: "x86/mm: Populate KASAN shadow for entire per-CPU range of CPU\
  \ entry area\n\nPopulate a KASAN shadow for the entire possible per-CPU range of\
  \ the CPU\nentry area instead of requiring that each individual chunk map a shadow.\n\
  Mapping shadows individually is error prone, e.g. the per-CPU GDT mapping\nwas left\
  \ behind, which can lead to not-present page faults during KASAN\nvalidation if\
  \ the kernel performs a software lookup into the GDT.  The DS\nbuffer is also likely\
  \ affected.\n\nThe motivation for mapping the per-CPU areas on-demand was to avoid\n\
  mapping the entire 512GiB range that's reserved for the CPU entry area,\nshaving\
  \ a few bytes by not creating shadows for potentially unused memory\nwas not a goal.\n\
  \nThe bug is most easily reproduced by doing a sigreturn with a garbage\nCS in the\
  \ sigcontext, e.g.\n\n  int main(void)\n  {\n    struct sigcontext regs;\n\n   \
  \ syscall(__NR_mmap, 0x1ffff000ul, 0x1000ul, 0ul, 0x32ul, -1, 0ul);\n    syscall(__NR_mmap,\
  \ 0x20000000ul, 0x1000000ul, 7ul, 0x32ul, -1, 0ul);\n    syscall(__NR_mmap, 0x21000000ul,\
  \ 0x1000ul, 0ul, 0x32ul, -1, 0ul);\n\n    memset(&regs, 0, sizeof(regs));\n    regs.cs\
  \ = 0x1d0;\n    syscall(__NR_rt_sigreturn);\n    return 0;\n  }\n\nto coerce the\
  \ kernel into doing a GDT lookup to compute CS.base when\nreading the instruction\
  \ bytes on the subsequent #GP to determine whether\nor not the #GP is something\
  \ the kernel should handle, e.g. to fixup UMIP\nviolations or to emulate CLI/STI\
  \ for IOPL=3 applications.\n\n  BUG: unable to handle page fault for address: fffffbc8379ace00\n\
  \  #PF: supervisor read access in kernel mode\n  #PF: error_code(0x0000) - not-present\
  \ page\n  PGD 16c03a067 P4D 16c03a067 PUD 15b990067 PMD 15b98f067 PTE 0\n  Oops:\
  \ 0000 [#1] PREEMPT SMP KASAN\n  CPU: 3 PID: 851 Comm: r2 Not tainted 6.1.0-rc3-next-20221103+\
  \ #432\n  Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 0.0.0 02/06/2015\n\
  \  RIP: 0010:kasan_check_range+0xdf/0x190\n  Call Trace:\n   <TASK>\n   get_desc+0xb0/0x1d0\n\
  \   insn_get_seg_base+0x104/0x270\n   insn_fetch_from_user+0x66/0x80\n   fixup_umip_exception+0xb1/0x530\n\
  \   exc_general_protection+0x181/0x210\n   asm_exc_general_protection+0x22/0x30\n\
  \  RIP: 0003:0x0\n  Code: Unable to access opcode bytes at 0xffffffffffffffd6.\n\
  \  RSP: 0003:0000000000000000 EFLAGS: 00000202\n  RAX: 0000000000000000 RBX: 0000000000000000\
  \ RCX: 00000000000001d0\n  RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000\n\
  \  RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000\n  R10: 0000000000000000\
  \ R11: 0000000000000000 R12: 0000000000000000\n  R13: 0000000000000000 R14: 0000000000000000\
  \ R15: 0000000000000000\n   </TASK>\n\nFixes: 9fd429c28073 (\"x86/kasan: Map shadow\
  \ for percpu pages on demand\")\nReported-by: syzbot+ffb4f000dc2872c93f62@syzkaller.appspotmail.com\n\
  Suggested-by: Andrey Ryabinin <ryabinin.a.a@gmail.com>\nSigned-off-by: Sean Christopherson\
  \ <seanjc@google.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\n\
  Reviewed-by: Andrey Ryabinin <ryabinin.a.a@gmail.com>\nLink: https://lkml.kernel.org/r/20221110203504.1985010-3-seanjc@google.com\n"
submodule:
- arch/x86/mm
hunk_count: 2
covered_count: 0
