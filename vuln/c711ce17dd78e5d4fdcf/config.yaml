id: c711ce17dd78e5d4fdcf
bug_link: https://syzkaller.appspot.com/bug?extid=c711ce17dd78e5d4fdcf
title: WARNING in reg_bounds_sanity_check
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 2b1fd82cbaffef05a35bd04ba2d62d96f4d8a622
fix_commit: 6279846b9b2532e1b04559ef8bd0dec049f29383
datetime: '2025-07-11T10:45:25-07:00'
fix_commit_message: "bpf: Forget ranges when refining tnum after JSET\n\nSyzbot reported\
  \ a kernel warning due to a range invariant violation on\nthe following BPF program.\n\
  \n  0: call bpf_get_netns_cookie\n  1: if r0 == 0 goto <exit>\n  2: if r0 & Oxffffffff\
  \ goto <exit>\n\nThe issue is on the path where we fall through both jumps.\n\n\
  That path is unreachable at runtime: after insn 1, we know r0 != 0, but\nwith the\
  \ sign extension on the jset, we would only fallthrough insn 2\nif r0 == 0. Unfortunately,\
  \ is_branch_taken() isn't currently able to\nfigure this out, so the verifier walks\
  \ all branches. The verifier then\nrefines the register bounds using the second\
  \ condition and we end\nup with inconsistent bounds on this unreachable path:\n\n\
  \  1: if r0 == 0 goto <exit>\n    r0: u64=[0x1, 0xffffffffffffffff] var_off=(0,\
  \ 0xffffffffffffffff)\n  2: if r0 & 0xffffffff goto <exit>\n    r0 before reg_bounds_sync:\
  \ u64=[0x1, 0xffffffffffffffff] var_off=(0, 0)\n    r0 after reg_bounds_sync:  u64=[0x1,\
  \ 0] var_off=(0, 0)\n\nImproving the range refinement for JSET to cover all cases\
  \ is tricky. We\nalso don't expect many users to rely on JSET given LLVM doesn't\
  \ generate\nthose instructions. So instead of improving the range refinement for\n\
  JSETs, Eduard suggested we forget the ranges whenever we're narrowing\ntnums after\
  \ a JSET. This patch implements that approach.\n\nReported-by: syzbot+c711ce17dd78e5d4fdcf@syzkaller.appspotmail.com\n\
  Suggested-by: Eduard Zingerman <eddyz87@gmail.com>\nAcked-by: Yonghong Song <yonghong.song@linux.dev>\n\
  Acked-by: Eduard Zingerman <eddyz87@gmail.com>\nSigned-off-by: Paul Chaignon <paul.chaignon@gmail.com>\n\
  Link: https://lore.kernel.org/r/9d4fd6432a095d281f815770608fdcd16028ce0b.1752171365.git.paul.chaignon@gmail.com\n\
  Signed-off-by: Alexei Starovoitov <ast@kernel.org>\n"
submodule:
- kernel/bpf
hunk_count: 1
covered_count: 1
