id: f2977222e0e95cec15c8
bug_link: https://syzkaller.appspot.com/bug?extid=f2977222e0e95cec15c8
title: WARNING in __sk_msg_free
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 894d7508316e7ad722df597d68b4b1797a9eee11
fix_commit: dc9dfc8dc629e42f2234e3327b75324ffc752bc9
datetime: '2024-01-14T12:17:14+00:00'
fix_commit_message: 'net: tls, fix WARNIING in __sk_msg_free


  A splice with MSG_SPLICE_PAGES will cause tls code to use the

  tls_sw_sendmsg_splice path in the TLS sendmsg code to move the user

  provided pages from the msg into the msg_pl. This will loop over the

  msg until msg_pl is full, checked by sk_msg_full(msg_pl). The user

  can also set the MORE flag to hint stack to delay sending until receiving

  more pages and ideally a full buffer.


  If the user adds more pages to the msg than can fit in the msg_pl

  scatterlist (MAX_MSG_FRAGS) we should ignore the MORE flag and send

  the buffer anyways.


  What actually happens though is we abort the msg to msg_pl scatterlist

  setup and then because we forget to set ''full record'' indicating we

  can no longer consume data without a send we fallthrough to the ''continue''

  path which will check if msg_data_left(msg) has more bytes to send and

  then attempts to fit them in the already full msg_pl. Then next

  iteration of sender doing send will encounter a full msg_pl and throw

  the warning in the syzbot report.


  To fix simply check if we have a full_record in splice code path and

  if not send the msg regardless of MORE flag.


  Reported-and-tested-by: syzbot+f2977222e0e95cec15c8@syzkaller.appspotmail.com

  Reported-by: Edward Adam Davis <eadavis@qq.com>

  Fixes: fe1e81d4f73b ("tls/sw: Support MSG_SPLICE_PAGES")

  Reviewed-by: Jakub Kicinski <kuba@kernel.org>

  Signed-off-by: John Fastabend <john.fastabend@gmail.com>

  Signed-off-by: David S. Miller <davem@davemloft.net>

  '
submodule:
- net/tls
hunk_count: 1
covered_count: 0
