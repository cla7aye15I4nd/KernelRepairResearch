id: 6f8cd9a0155b366d227f
bug_link: https://syzkaller.appspot.com/bug?extid=6f8cd9a0155b366d227f
title: memory leak in z_erofs_do_read_page
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 927e5010ff5bd7446a22c511ab8643b9385ddf4d
fix_commit: c42c0ffe81176940bd5dead474216b7198d77675
datetime: '2022-12-07T10:56:31+08:00'
fix_commit_message: "erofs: Fix pcluster memleak when its block address is zero\n\n\
  syzkaller reported a memleak:\nhttps://syzkaller.appspot.com/bug?id=62f37ff612f0021641eda5b17f056f1668aa9aed\n\
  \nunreferenced object 0xffff88811009c7f8 (size 136):\n  ...\n  backtrace:\n    [<ffffffff821db19b>]\
  \ z_erofs_do_read_page+0x99b/0x1740\n    [<ffffffff821dee9e>] z_erofs_readahead+0x24e/0x580\n\
  \    [<ffffffff814bc0d6>] read_pages+0x86/0x3d0\n    ...\n\nsyzkaller constructed\
  \ a case: in z_erofs_register_pcluster(),\nztailpacking = false and map->m_pa =\
  \ zero. This makes pcl->obj.index be\nzero although pcl is not a inline pcluster.\n\
  \nThen following path adds refcount for grp, but the refcount won't be put\nbecause\
  \ pcl is inline.\n\nz_erofs_readahead()\n  z_erofs_do_read_page() # for another\
  \ page\n    z_erofs_collector_begin()\n      erofs_find_workgroup()\n        erofs_workgroup_get()\n\
  \nSince it's illegal for the block address of a non-inlined pcluster to\nbe zero,\
  \ add check here to avoid registering the pcluster which would\nbe leaked.\n\nFixes:\
  \ cecf864d3d76 (\"erofs: support inline data decompression\")\nReported-by: syzbot+6f8cd9a0155b366d227f@syzkaller.appspotmail.com\n\
  Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>\nReviewed-by: Yue Hu <huyue2@coolpad.com>\n\
  Reviewed-by: Gao Xiang <hsiangkao@linux.alibaba.com>\nReviewed-by: Chao Yu <chao@kernel.org>\n\
  Link: https://lore.kernel.org/r/Y42Kz6sVkf+XqJRB@debian\nSigned-off-by: Gao Xiang\
  \ <hsiangkao@linux.alibaba.com>\n"
submodule:
- fs/erofs
hunk_count: 1
covered_count: 1
