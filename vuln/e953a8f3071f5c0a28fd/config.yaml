id: e953a8f3071f5c0a28fd
bug_link: https://syzkaller.appspot.com/bug?extid=e953a8f3071f5c0a28fd
title: possible deadlock in gtp_encap_enable_socket
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: cfe82469a00f0c0983bf4652de3a2972637dfc56
fix_commit: 752e2217d789be2c6a6ac66554b981cd71cd9f31
datetime: '2025-04-11T14:14:26-07:00'
fix_commit_message: "smc: Fix lockdep false-positive for IPPROTO_SMC.\n\nSMC consists\
  \ of two sockets: smc_sock and kernel TCP socket.\n\nCurrently, there are two ways\
  \ of creating the sockets, and syzbot reported\na lockdep splat [0] for the newer\
  \ way introduced by commit d25a92ccae6b\n(\"net/smc: Introduce IPPROTO_SMC\").\n\
  \n  socket(AF_SMC             , SOCK_STREAM, SMCPROTO_SMC or SMCPROTO_SMC6)\n  socket(AF_INET\
  \ or AF_INET6, SOCK_STREAM, IPPROTO_SMC)\n\nWhen a socket is allocated, sock_lock_init()\
  \ sets a lockdep lock class to\nsk->sk_lock.slock based on its protocol family.\
  \  In the IPPROTO_SMC case,\nAF_INET or AF_INET6 lock class is assigned to smc_sock.\n\
  \nThe repro sets IPV6_JOIN_ANYCAST for IPv6 UDP and SMC socket and exercises\nsmc_switch_to_fallback()\
  \ for IPPROTO_SMC.\n\n  1. smc_switch_to_fallback() is called under lock_sock()\
  \ and holds\n     smc->clcsock_release_lock.\n\n      sk_lock-AF_INET6 -> &smc->clcsock_release_lock\n\
  \      (sk_lock-AF_SMC)\n\n  2. Setting IPV6_JOIN_ANYCAST to SMC holds smc->clcsock_release_lock\n\
  \     and calls setsockopt() for the kernel TCP socket, which holds RTNL\n     and\
  \ the kernel socket's lock_sock().\n\n      &smc->clcsock_release_lock -> rtnl_mutex\
  \ (-> k-sk_lock-AF_INET6)\n\n  3. Setting IPV6_JOIN_ANYCAST to UDP holds RTNL and\
  \ lock_sock().\n\n      rtnl_mutex -> sk_lock-AF_INET6\n\nThen, lockdep detects\
  \ a false-positive circular locking,\n\n  .-> sk_lock-AF_INET6 -> &smc->clcsock_release_lock\
  \ -> rtnl_mutex -.\n  `-----------------------------------------------------------------'\n\
  \nbut IPPROTO_SMC should have the same locking rule as AF_SMC.\n\n      sk_lock-AF_SMC\
  \   -> &smc->clcsock_release_lock -> rtnl_mutex -> k-sk_lock-AF_INET6\n\nLet's set\
  \ the same lock class for smc_sock.\n\nGiven AF_SMC uses the same lock class for\
  \ SMCPROTO_SMC and SMCPROTO_SMC6,\nwe do not need to separate the class for AF_INET\
  \ and AF_INET6.\n\n[0]:\nWARNING: possible circular locking dependency detected\n\
  6.14.0-rc3-syzkaller-00267-gff202c5028a1 #0 Not tainted\n\nsyz.4.1528/11571 is trying\
  \ to acquire lock:\nffffffff8fef8de8 (rtnl_mutex){+.+.}-{4:4}, at: ipv6_sock_ac_close+0xd9/0x110\
  \ net/ipv6/anycast.c:220\n\nbut task is already holding lock:\nffff888027f596a8\
  \ (&smc->clcsock_release_lock){+.+.}-{4:4}, at: smc_clcsock_release+0x75/0xe0 net/smc/smc_close.c:30\n\
  \nwhich lock already depends on the new lock.\n\nthe existing dependency chain (in\
  \ reverse order) is:\n\n -> #2 (&smc->clcsock_release_lock){+.+.}-{4:4}:\n     \
  \  __mutex_lock_common kernel/locking/mutex.c:585 [inline]\n       __mutex_lock+0x19b/0xb10\
  \ kernel/locking/mutex.c:730\n       smc_switch_to_fallback+0x2d/0xa00 net/smc/af_smc.c:903\n\
  \       smc_sendmsg+0x13d/0x520 net/smc/af_smc.c:2781\n       sock_sendmsg_nosec\
  \ net/socket.c:718 [inline]\n       __sock_sendmsg net/socket.c:733 [inline]\n \
  \      ____sys_sendmsg+0xaaf/0xc90 net/socket.c:2573\n       ___sys_sendmsg+0x135/0x1e0\
  \ net/socket.c:2627\n       __sys_sendmsg+0x16e/0x220 net/socket.c:2659\n      \
  \ do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n       do_syscall_64+0xcd/0x250\
  \ arch/x86/entry/common.c:83\n       entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\n\
  \ -> #1 (sk_lock-AF_INET6){+.+.}-{0:0}:\n       lock_sock_nested+0x3a/0xf0 net/core/sock.c:3645\n\
  \       lock_sock include/net/sock.h:1624 [inline]\n       sockopt_lock_sock net/core/sock.c:1133\
  \ [inline]\n       sockopt_lock_sock+0x54/0x70 net/core/sock.c:1124\n       do_ipv6_setsockopt+0x2160/0x4520\
  \ net/ipv6/ipv6_sockglue.c:567\n       ipv6_setsockopt+0xcb/0x170 net/ipv6/ipv6_sockglue.c:993\n\
  \       udpv6_setsockopt+0x7d/0xd0 net/ipv6/udp.c:1850\n       do_sock_setsockopt+0x222/0x480\
  \ net/socket.c:2303\n       __sys_setsockopt+0x1a0/0x230 net/socket.c:2328\n   \
  \    __do_sys_setsockopt net/socket.c:2334 [inline]\n       __se_sys_setsockopt\
  \ net/socket.c:2331 [inline]\n       __x64_sys_setsockopt+0xbd/0x160 net/socket.c:2331\n\
  \       do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n       do_syscall_64+0xcd/0x250\
  \ arch/x86/entry/common.c:83\n       entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\n\
  \ -> #0 (rtnl_mutex){+.+.}-{4:4}:\n       check_prev_add kernel/locking/lockdep.c:3163\
  \ [inline]\n       check_prevs_add kernel/locking/lockdep.c:3282 [inline]\n    \
  \   validate_chain kernel/locking/lockdep.c:3906 [inline]\n       __lock_acquire+0x249e/0x3c40\
  \ kernel/locking/lockdep.c:5228\n       lock_acquire.part.0+0x11b/0x380 kernel/locking/lockdep.c:5851\n\
  \       __mutex_lock_common kernel/locking/mutex.c:585 [inline]\n       __mutex_lock+0x19b/0xb10\
  \ kernel/locking/mutex.c:730\n       ipv6_sock_ac_close+0xd9/0x110 net/ipv6/anycast.c:220\n\
  \       inet6_release+0x47/0x70 net/ipv6/af_inet6.c:485\n       __sock_release net/socket.c:647\
  \ [inline]\n       sock_release+0x8e/0x1d0 net/socket.c:675\n       smc_clcsock_release+0xb7/0xe0\
  \ net/smc/smc_close.c:34\n       __smc_release+0x5c2/0x880 net/smc/af_smc.c:301\n\
  \       smc_release+0x1fc/0x5f0 net/smc/af_smc.c:344\n       __sock_release+0xb0/0x270\
  \ net/socket.c:647\n       sock_close+0x1c/0x30 net/socket.c:1398\n       __fput+0x3ff/0xb70\
  \ fs/file_table.c:464\n       task_work_run+0x14e/0x250 kernel/task_work.c:227\n\
  \       resume_user_mode_work include/linux/resume_user_mode.h:50 [inline]\n   \
  \    exit_to_user_mode_loop kernel/entry/common.c:114 [inline]\n       exit_to_user_mode_prepare\
  \ include/linux/entry-common.h:329 [inline]\n       __syscall_exit_to_user_mode_work\
  \ kernel/entry/common.c:207 [inline]\n       syscall_exit_to_user_mode+0x27b/0x2a0\
  \ kernel/entry/common.c:218\n       do_syscall_64+0xda/0x250 arch/x86/entry/common.c:89\n\
  \       entry_SYSCALL_64_after_hwframe+0x77/0x7f\n\nother info that might help us\
  \ debug this:\n\nChain exists of:\n  rtnl_mutex --> sk_lock-AF_INET6 --> &smc->clcsock_release_lock\n\
  \n Possible unsafe locking scenario:\n\n       CPU0                    CPU1\n  \
  \     ----                    ----\n  lock(&smc->clcsock_release_lock);\n      \
  \                         lock(sk_lock-AF_INET6);\n                            \
  \   lock(&smc->clcsock_release_lock);\n  lock(rtnl_mutex);\n\n *** DEADLOCK ***\n\
  \n2 locks held by syz.4.1528/11571:\n #0: ffff888077e88208 (&sb->s_type->i_mutex_key#10){+.+.}-{4:4},\
  \ at: inode_lock include/linux/fs.h:877 [inline]\n #0: ffff888077e88208 (&sb->s_type->i_mutex_key#10){+.+.}-{4:4},\
  \ at: __sock_release+0x86/0x270 net/socket.c:646\n #1: ffff888027f596a8 (&smc->clcsock_release_lock){+.+.}-{4:4},\
  \ at: smc_clcsock_release+0x75/0xe0 net/smc/smc_close.c:30\n\nstack backtrace:\n\
  CPU: 0 UID: 0 PID: 11571 Comm: syz.4.1528 Not tainted 6.14.0-rc3-syzkaller-00267-gff202c5028a1\
  \ #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\
  \ 02/12/2025\nCall Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:94 [inline]\n\
  \ dump_stack_lvl+0x116/0x1f0 lib/dump_stack.c:120\n print_circular_bug+0x490/0x760\
  \ kernel/locking/lockdep.c:2076\n check_noncircular+0x31a/0x400 kernel/locking/lockdep.c:2208\n\
  \ check_prev_add kernel/locking/lockdep.c:3163 [inline]\n check_prevs_add kernel/locking/lockdep.c:3282\
  \ [inline]\n validate_chain kernel/locking/lockdep.c:3906 [inline]\n __lock_acquire+0x249e/0x3c40\
  \ kernel/locking/lockdep.c:5228\n lock_acquire.part.0+0x11b/0x380 kernel/locking/lockdep.c:5851\n\
  \ __mutex_lock_common kernel/locking/mutex.c:585 [inline]\n __mutex_lock+0x19b/0xb10\
  \ kernel/locking/mutex.c:730\n ipv6_sock_ac_close+0xd9/0x110 net/ipv6/anycast.c:220\n\
  \ inet6_release+0x47/0x70 net/ipv6/af_inet6.c:485\n __sock_release net/socket.c:647\
  \ [inline]\n sock_release+0x8e/0x1d0 net/socket.c:675\n smc_clcsock_release+0xb7/0xe0\
  \ net/smc/smc_close.c:34\n __smc_release+0x5c2/0x880 net/smc/af_smc.c:301\n smc_release+0x1fc/0x5f0\
  \ net/smc/af_smc.c:344\n __sock_release+0xb0/0x270 net/socket.c:647\n sock_close+0x1c/0x30\
  \ net/socket.c:1398\n __fput+0x3ff/0xb70 fs/file_table.c:464\n task_work_run+0x14e/0x250\
  \ kernel/task_work.c:227\n resume_user_mode_work include/linux/resume_user_mode.h:50\
  \ [inline]\n exit_to_user_mode_loop kernel/entry/common.c:114 [inline]\n exit_to_user_mode_prepare\
  \ include/linux/entry-common.h:329 [inline]\n __syscall_exit_to_user_mode_work kernel/entry/common.c:207\
  \ [inline]\n syscall_exit_to_user_mode+0x27b/0x2a0 kernel/entry/common.c:218\n do_syscall_64+0xda/0x250\
  \ arch/x86/entry/common.c:89\n entry_SYSCALL_64_after_hwframe+0x77/0x7f\nRIP: 0033:0x7f8b4b38d169\n\
  Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89\
  \ d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3\
  \ 48 c7 c1 a8 ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007ffe4efd22d8 EFLAGS: 00000246\
  \ ORIG_RAX: 00000000000001b4\nRAX: 0000000000000000 RBX: 00000000000b14a3 RCX: 00007f8b4b38d169\n\
  RDX: 0000000000000000 RSI: 000000000000001e RDI: 0000000000000003\nRBP: 00007f8b4b5a7ba0\
  \ R08: 0000000000000001 R09: 000000114efd25cf\nR10: 00007f8b4b200000 R11: 0000000000000246\
  \ R12: 00007f8b4b5a5fac\nR13: 00007f8b4b5a5fa0 R14: ffffffffffffffff R15: 00007ffe4efd23f0\n\
  \ </TASK>\n\nFixes: d25a92ccae6b (\"net/smc: Introduce IPPROTO_SMC\")\nReported-by:\
  \ syzbot+be6f4b383534d88989f7@syzkaller.appspotmail.com\nCloses: https://syzkaller.appspot.com/bug?extid=be6f4b383534d88989f7\n\
  Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: Wenjia Zhang\
  \ <wenjia@linux.ibm.com>\nLink: https://patch.msgid.link/20250407170332.26959-1-kuniyu@amazon.com\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/smc
hunk_count: 2
covered_count: 0
