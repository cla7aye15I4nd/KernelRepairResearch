id: bd8d55ee2acd0a71d8ce
bug_link: https://syzkaller.appspot.com/bug?extid=bd8d55ee2acd0a71d8ce
title: inconsistent lock state in ppp_input
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 8ed7cf66f4841bcc8c15a89be0732b933703b51c
fix_commit: aec7291003df78cb71fd461d7b672912bde55807
datetime: '2024-10-02T17:24:10-07:00'
fix_commit_message: "ppp: do not assume bh is held in ppp_channel_bridge_input()\n\
  \nNetworking receive path is usually handled from BH handler.\nHowever, some protocols\
  \ need to acquire the socket lock, and\npackets might be stored in the socket backlog\
  \ is the socket was\nowned by a user process.\n\nIn this case, release_sock(), __release_sock(),\
  \ and sk_backlog_rcv()\nmight call the sk->sk_backlog_rcv() handler in process context.\n\
  \nsybot caught ppp was not considering this case in\nppp_channel_bridge_input()\
  \ :\n\nWARNING: inconsistent lock state\n6.11.0-rc7-syzkaller-g5f5673607153 #0 Not\
  \ tainted\n--------------------------------\ninconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W}\
  \ usage.\nksoftirqd/1/24 [HC0[0]:SC1[1]:HE1:SE0] takes:\n ffff0000db7f11e0 (&pch->downl){+.?.}-{2:2},\
  \ at: spin_lock include/linux/spinlock.h:351 [inline]\n ffff0000db7f11e0 (&pch->downl){+.?.}-{2:2},\
  \ at: ppp_channel_bridge_input drivers/net/ppp/ppp_generic.c:2272 [inline]\n ffff0000db7f11e0\
  \ (&pch->downl){+.?.}-{2:2}, at: ppp_input+0x16c/0x854 drivers/net/ppp/ppp_generic.c:2304\n\
  {SOFTIRQ-ON-W} state was registered at:\n   lock_acquire+0x240/0x728 kernel/locking/lockdep.c:5759\n\
  \   __raw_spin_lock include/linux/spinlock_api_smp.h:133 [inline]\n   _raw_spin_lock+0x48/0x60\
  \ kernel/locking/spinlock.c:154\n   spin_lock include/linux/spinlock.h:351 [inline]\n\
  \   ppp_channel_bridge_input drivers/net/ppp/ppp_generic.c:2272 [inline]\n   ppp_input+0x16c/0x854\
  \ drivers/net/ppp/ppp_generic.c:2304\n   pppoe_rcv_core+0xfc/0x314 drivers/net/ppp/pppoe.c:379\n\
  \   sk_backlog_rcv include/net/sock.h:1111 [inline]\n   __release_sock+0x1a8/0x3d8\
  \ net/core/sock.c:3004\n   release_sock+0x68/0x1b8 net/core/sock.c:3558\n   pppoe_sendmsg+0xc8/0x5d8\
  \ drivers/net/ppp/pppoe.c:903\n   sock_sendmsg_nosec net/socket.c:730 [inline]\n\
  \   __sock_sendmsg net/socket.c:745 [inline]\n   __sys_sendto+0x374/0x4f4 net/socket.c:2204\n\
  \   __do_sys_sendto net/socket.c:2216 [inline]\n   __se_sys_sendto net/socket.c:2212\
  \ [inline]\n   __arm64_sys_sendto+0xd8/0xf8 net/socket.c:2212\n   __invoke_syscall\
  \ arch/arm64/kernel/syscall.c:35 [inline]\n   invoke_syscall+0x98/0x2b8 arch/arm64/kernel/syscall.c:49\n\
  \   el0_svc_common+0x130/0x23c arch/arm64/kernel/syscall.c:132\n   do_el0_svc+0x48/0x58\
  \ arch/arm64/kernel/syscall.c:151\n   el0_svc+0x54/0x168 arch/arm64/kernel/entry-common.c:712\n\
  \   el0t_64_sync_handler+0x84/0xfc arch/arm64/kernel/entry-common.c:730\n   el0t_64_sync+0x190/0x194\
  \ arch/arm64/kernel/entry.S:598\nirq event stamp: 282914\n hardirqs last  enabled\
  \ at (282914): [<ffff80008b42e30c>] __raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:151\
  \ [inline]\n hardirqs last  enabled at (282914): [<ffff80008b42e30c>] _raw_spin_unlock_irqrestore+0x38/0x98\
  \ kernel/locking/spinlock.c:194\n hardirqs last disabled at (282913): [<ffff80008b42e13c>]\
  \ __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:108 [inline]\n hardirqs\
  \ last disabled at (282913): [<ffff80008b42e13c>] _raw_spin_lock_irqsave+0x2c/0x7c\
  \ kernel/locking/spinlock.c:162\n softirqs last  enabled at (282904): [<ffff8000801f8e88>]\
  \ softirq_handle_end kernel/softirq.c:400 [inline]\n softirqs last  enabled at (282904):\
  \ [<ffff8000801f8e88>] handle_softirqs+0xa3c/0xbfc kernel/softirq.c:582\n softirqs\
  \ last disabled at (282909): [<ffff8000801fbdf8>] run_ksoftirqd+0x70/0x158 kernel/softirq.c:928\n\
  \nother info that might help us debug this:\n Possible unsafe locking scenario:\n\
  \n       CPU0\n       ----\n  lock(&pch->downl);\n  <Interrupt>\n    lock(&pch->downl);\n\
  \n *** DEADLOCK ***\n\n1 lock held by ksoftirqd/1/24:\n  #0: ffff80008f74dfa0 (rcu_read_lock){....}-{1:2},\
  \ at: rcu_lock_acquire+0x10/0x4c include/linux/rcupdate.h:325\n\nstack backtrace:\n\
  CPU: 1 UID: 0 PID: 24 Comm: ksoftirqd/1 Not tainted 6.11.0-rc7-syzkaller-g5f5673607153\
  \ #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\
  \ 08/06/2024\nCall trace:\n  dump_backtrace+0x1b8/0x1e4 arch/arm64/kernel/stacktrace.c:319\n\
  \  show_stack+0x2c/0x3c arch/arm64/kernel/stacktrace.c:326\n  __dump_stack lib/dump_stack.c:93\
  \ [inline]\n  dump_stack_lvl+0xe4/0x150 lib/dump_stack.c:119\n  dump_stack+0x1c/0x28\
  \ lib/dump_stack.c:128\n  print_usage_bug+0x698/0x9ac kernel/locking/lockdep.c:4000\n\
  \ mark_lock_irq+0x980/0xd2c\n  mark_lock+0x258/0x360 kernel/locking/lockdep.c:4677\n\
  \  __lock_acquire+0xf48/0x779c kernel/locking/lockdep.c:5096\n  lock_acquire+0x240/0x728\
  \ kernel/locking/lockdep.c:5759\n  __raw_spin_lock include/linux/spinlock_api_smp.h:133\
  \ [inline]\n  _raw_spin_lock+0x48/0x60 kernel/locking/spinlock.c:154\n  spin_lock\
  \ include/linux/spinlock.h:351 [inline]\n  ppp_channel_bridge_input drivers/net/ppp/ppp_generic.c:2272\
  \ [inline]\n  ppp_input+0x16c/0x854 drivers/net/ppp/ppp_generic.c:2304\n  ppp_async_process+0x98/0x150\
  \ drivers/net/ppp/ppp_async.c:495\n  tasklet_action_common+0x318/0x3f4 kernel/softirq.c:785\n\
  \  tasklet_action+0x68/0x8c kernel/softirq.c:811\n  handle_softirqs+0x2e4/0xbfc\
  \ kernel/softirq.c:554\n  run_ksoftirqd+0x70/0x158 kernel/softirq.c:928\n  smpboot_thread_fn+0x4b0/0x90c\
  \ kernel/smpboot.c:164\n  kthread+0x288/0x310 kernel/kthread.c:389\n  ret_from_fork+0x10/0x20\
  \ arch/arm64/kernel/entry.S:860\n\nFixes: 4cf476ced45d (\"ppp: add PPPIOCBRIDGECHAN\
  \ and PPPIOCUNBRIDGECHAN ioctls\")\nReported-by: syzbot+bd8d55ee2acd0a71d8ce@syzkaller.appspotmail.com\n\
  Closes: https://lore.kernel.org/netdev/66f661e2.050a0220.38ace9.000f.GAE@google.com/T/#u\n\
  Signed-off-by: Eric Dumazet <edumazet@google.com>\nCc: Tom Parkin <tparkin@katalix.com>\n\
  Cc: James Chapman <jchapman@katalix.com>\nLink: https://patch.msgid.link/20240927074553.341910-1-edumazet@google.com\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- drivers/net/ppp
hunk_count: 2
covered_count: 2
