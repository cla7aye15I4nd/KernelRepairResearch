id: 9ed140de7b79fa93497b
bug_link: https://syzkaller.appspot.com/bug?extid=9ed140de7b79fa93497b
title: 'BUG: unable to handle kernel NULL pointer dereference in try_async_pf'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 405906600a33a37e225817c085b1807ad46784b4
fix_commit: 3021e69219e2f3df6d01243000db32d1325cdd0d
datetime: '2020-06-10T19:14:17-07:00'
fix_commit_message: 'kcov: check kcov_softirq in kcov_remote_stop()


  kcov_remote_stop() should check that the corresponding kcov_remote_start()

  actually found the specified remote handle and started collecting

  coverage.  This is done by checking the per thread kcov_softirq flag.


  A particular failure scenario where this was observed involved a softirq

  with a remote coverage collection section coming between check_kcov_mode()

  and the access to t->kcov_area in __sanitizer_cov_trace_pc().  In that

  softirq kcov_remote_start() bailed out after kcov_remote_find() check, but

  the matching kcov_remote_stop() didn''t check if kcov_remote_start()

  succeeded, and overwrote per thread kcov parameters with invalid (zero)

  values.


  Fixes: 5ff3b30ab57d ("kcov: collect coverage from interrupts")

  Signed-off-by: Andrey Konovalov <andreyknvl@google.com>

  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

  Reviewed-by: Dmitry Vyukov <dvyukov@google.com>

  Cc: Alexander Potapenko <glider@google.com>

  Cc: Marco Elver <elver@google.com>

  Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>

  Link: http://lkml.kernel.org/r/fcd1cd16eac1d2c01a66befd8ea4afc6f8d09833.1591576806.git.andreyknvl@google.com

  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

  '
submodule:
- kernel
hunk_count: 4
covered_count: 0
