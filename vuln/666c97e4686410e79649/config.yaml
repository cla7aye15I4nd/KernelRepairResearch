id: 666c97e4686410e79649
bug_link: https://syzkaller.appspot.com/bug?extid=666c97e4686410e79649
title: general protection fault in prepare_to_wait (2)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 5c905279a1b7ebb676d73cec8819533e2b74d646
fix_commit: c2f8fd7949603efb03908e05abbf7726748c8de3
datetime: '2023-08-28T06:58:46+01:00'
fix_commit_message: "netrom: Deny concurrent connect().\n\nsyzkaller reported null-ptr-deref\
  \ [0] related to AF_NETROM.\nThis is another self-accept issue from the strace log.\
  \ [1]\n\nsyz-executor creates an AF_NETROM socket and calls connect(), which\nis\
  \ blocked at that time.  Then, sk->sk_state is TCP_SYN_SENT and\nsock->state is\
  \ SS_CONNECTING.\n\n  [pid  5059] socket(AF_NETROM, SOCK_SEQPACKET, 0) = 4\n  [pid\
  \  5059] connect(4, {sa_family=AF_NETROM, sa_data=\"...\" <unfinished ...>\n\nAnother\
  \ thread calls connect() concurrently, which finally fails\nwith -EINVAL.  However,\
  \ the problem here is the socket state is\nreset even while the first connect()\
  \ is blocked.\n\n  [pid  5060] connect(4, NULL, 0 <unfinished ...>\n  [pid  5060]\
  \ <... connect resumed>)      = -1 EINVAL (Invalid argument)\n\nAs sk->state is\
  \ TCP_CLOSE and sock->state is SS_UNCONNECTED, the\nfollowing listen() succeeds.\
  \  Then, the first connect() looks up\nitself as a listener and puts skb into the\
  \ queue with skb->sk itself.\nAs a result, the next accept() gets another FD of\
  \ itself as 3, and\nthe first connect() finishes.\n\n  [pid  5060] listen(4, 0 <unfinished\
  \ ...>\n  [pid  5060] <... listen resumed>)       = 0\n  [pid  5060] accept(4, NULL,\
  \ NULL <unfinished ...>\n  [pid  5060] <... accept resumed>)       = 3\n  [pid \
  \ 5059] <... connect resumed>)      = 0\n\nThen, accept4() is called but blocked,\
  \ which causes the general protection\nfault later.\n\n  [pid  5059] accept4(4,\
  \ NULL, 0x20000400, SOCK_NONBLOCK <unfinished ...>\n\nAfter that, another self-accept\
  \ occurs by accept() and writev().\n\n  [pid  5060] accept(4, NULL, NULL <unfinished\
  \ ...>\n  [pid  5061] writev(3, [{iov_base=...}] <unfinished ...>\n  [pid  5061]\
  \ <... writev resumed>)       = 99\n  [pid  5060] <... accept resumed>)       =\
  \ 6\n\nFinally, the leader thread close()s all FDs.  Since the three FDs\nreference\
  \ the same socket, nr_release() does the cleanup for it\nthree times, and the remaining\
  \ accept4() causes the following fault.\n\n  [pid  5058] close(3)              \
  \      = 0\n  [pid  5058] close(4)                    = 0\n  [pid  5058] close(5)\
  \                    = -1 EBADF (Bad file descriptor)\n  [pid  5058] close(6)  \
  \                  = 0\n  [pid  5058] <... exit_group resumed>)   = ?\n  [   83.456055][\
  \ T5059] general protection fault, probably for non-canonical address 0xdffffc0000000003:\
  \ 0000 [#1] PREEMPT SMP KASAN\n\nTo avoid the issue, we need to return an error\
  \ for connect() if\nanother connect() is in progress, as done in __inet_stream_connect().\n\
  \n[0]:\ngeneral protection fault, probably for non-canonical address 0xdffffc0000000003:\
  \ 0000 [#1] PREEMPT SMP KASAN\nKASAN: null-ptr-deref in range [0x0000000000000018-0x000000000000001f]\n\
  CPU: 0 PID: 5059 Comm: syz-executor.0 Not tainted 6.5.0-rc5-syzkaller-00194-gace0ab3a4b54\
  \ #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\
  \ 07/26/2023\nRIP: 0010:__lock_acquire+0x109/0x5de0 kernel/locking/lockdep.c:5012\n\
  Code: 45 85 c9 0f 84 cc 0e 00 00 44 8b 05 11 6e 23 0b 45 85 c0 0f 84 be 0d 00 00\
  \ 48 ba 00 00 00 00 00 fc ff df 4c 89 d1 48 c1 e9 03 <80> 3c 11 00 0f 85 e8 40 00\
  \ 00 49 81 3a a0 69 48 90 0f 84 96 0d 00\nRSP: 0018:ffffc90003d6f9e0 EFLAGS: 00010006\n\
  RAX: ffff8880244c8000 RBX: 1ffff920007adf6c RCX: 0000000000000003\nRDX: dffffc0000000000\
  \ RSI: 0000000000000000 RDI: 0000000000000018\nRBP: 0000000000000001 R08: 0000000000000001\
  \ R09: 0000000000000001\nR10: 0000000000000018 R11: 0000000000000000 R12: 0000000000000000\n\
  R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\nFS:  00007f51d519a6c0(0000)\
  \ GS:ffff8880b9800000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000\
  \ CR0: 0000000080050033\nCR2: 00007f51d5158d58 CR3: 000000002943f000 CR4: 00000000003506f0\n\
  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000\
  \ DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <TASK>\n lock_acquire\
  \ kernel/locking/lockdep.c:5761 [inline]\n lock_acquire+0x1ae/0x510 kernel/locking/lockdep.c:5726\n\
  \ __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]\n _raw_spin_lock_irqsave+0x3a/0x50\
  \ kernel/locking/spinlock.c:162\n prepare_to_wait+0x47/0x380 kernel/sched/wait.c:269\n\
  \ nr_accept+0x20d/0x650 net/netrom/af_netrom.c:798\n do_accept+0x3a6/0x570 net/socket.c:1872\n\
  \ __sys_accept4_file net/socket.c:1913 [inline]\n __sys_accept4+0x99/0x120 net/socket.c:1943\n\
  \ __do_sys_accept4 net/socket.c:1954 [inline]\n __se_sys_accept4 net/socket.c:1951\
  \ [inline]\n __x64_sys_accept4+0x96/0x100 net/socket.c:1951\n do_syscall_x64 arch/x86/entry/common.c:50\
  \ [inline]\n do_syscall_64+0x38/0xb0 arch/x86/entry/common.c:80\n entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\
  RIP: 0033:0x7f51d447cae9\nCode: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00\
  \ 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05\
  \ <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f51d519a0c8\
  \ EFLAGS: 00000246 ORIG_RAX: 0000000000000120\nRAX: ffffffffffffffda RBX: 00007f51d459bf80\
  \ RCX: 00007f51d447cae9\nRDX: 0000000020000400 RSI: 0000000000000000 RDI: 0000000000000004\n\
  RBP: 00007f51d44c847a R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000800\
  \ R11: 0000000000000246 R12: 0000000000000000\nR13: 000000000000000b R14: 00007f51d459bf80\
  \ R15: 00007ffc25c34e48\n </TASK>\n\nLink: https://syzkaller.appspot.com/text?tag=CrashLog&x=152cdb63a80000\
  \ [1]\nFixes: 1da177e4c3f4 (\"Linux-2.6.12-rc2\")\nReported-by: syzbot+666c97e4686410e79649@syzkaller.appspotmail.com\n\
  Closes: https://syzkaller.appspot.com/bug?extid=666c97e4686410e79649\nSigned-off-by:\
  \ Kuniyuki Iwashima <kuniyu@amazon.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>\n"
submodule:
- net/netrom
hunk_count: 1
covered_count: 0
