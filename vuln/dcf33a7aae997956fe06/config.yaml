id: dcf33a7aae997956fe06
bug_link: https://syzkaller.appspot.com/bug?extid=dcf33a7aae997956fe06
title: 'UBSAN: shift-out-of-bounds in init_sb (3)'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 204c0300c4e99707e9fb6e57840aa1127060e63f
fix_commit: 670f8ce56dd0632dc29a0322e188cc73ce3c6b92
datetime: '2022-09-20T14:12:14+02:00'
fix_commit_message: "gfs2: Check sb_bsize_shift after reading superblock\n\nFuzzers\
  \ like to scribble over sb_bsize_shift but in reality it's very\nunlikely that this\
  \ field would be corrupted on its own. Nevertheless it\nshould be checked to avoid\
  \ the possibility of messy mount errors due to\nbad calculations. It's always a\
  \ fixed value based on the block size so\nwe can just check that it's the expected\
  \ value.\n\nTested with:\n\n    mkfs.gfs2 -O -p lock_nolock /dev/vdb\n    for i\
  \ in 0 -1 64 65 32 33; do\n        gfs2_edit -p sb field sb_bsize_shift $i /dev/vdb\n\
  \        mount /dev/vdb /mnt/test && umount /mnt/test\n    done\n\nBefore this patch\
  \ we get a withdraw after\n\n[   76.413681] gfs2: fsid=loop0.0: fatal: invalid metadata\
  \ block\n[   76.413681]   bh = 19 (type: exp=5, found=4)\n[   76.413681]   function\
  \ = gfs2_meta_buffer, file = fs/gfs2/meta_io.c, line = 492\n\nand with UBSAN configured\
  \ we also get complaints like\n\n[   76.373395] UBSAN: shift-out-of-bounds in fs/gfs2/ops_fstype.c:295:19\n\
  [   76.373815] shift exponent 4294967287 is too large for 64-bit type 'long unsigned\
  \ int'\n\nAfter the patch, these complaints don't appear, mount fails immediately\n\
  and we get an explanation in dmesg.\n\nReported-by: syzbot+dcf33a7aae997956fe06@syzkaller.appspotmail.com\n\
  Signed-off-by: Andrew Price <anprice@redhat.com>\nSigned-off-by: Andreas Gruenbacher\
  \ <agruenba@redhat.com>\n"
submodule:
- fs/gfs2
hunk_count: 1
covered_count: 1
