id: 9baaae5fc5795e2e6acf
bug_link: https://syzkaller.appspot.com/bug?extid=9baaae5fc5795e2e6acf
title: 'BUG: sleeping function called from invalid context in kernfs_walk_and_get_ns'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 4de65c5830233e7a4adf2e679510089ec4e210c7
fix_commit: 46307fd6e27a3f678a1678b02e667678c22aa8cc
datetime: '2022-10-10T10:23:18-10:00'
fix_commit_message: 'cgroup: Reorganize css_set_lock and kernfs path processing


  The commit 74e4b956eb1c incorrectly wrapped kernfs_walk_and_get

  (might_sleep) under css_set_lock (spinlock). css_set_lock is needed by

  __cset_cgroup_from_root to ensure stable cset->cgrp_links but not for

  kernfs_walk_and_get.


  We only need to make sure that the returned root_cgrp won''t be freed

  under us. This is given in the case of global root because it is static

  (cgrp_dfl_root.cgrp). When the root_cgrp is lower in the hierarchy, it

  is pinned by cgroup_ns->root_cset (and `current` task cannot switch

  namespace asynchronously so ns_proxy pins cgroup_ns).


  Note this reasoning won''t hold for root cgroups in v1 hierarchies,

  therefore create a special-cased helper function just for the default

  hierarchy.


  Fixes: 74e4b956eb1c ("cgroup: Honor caller''s cgroup NS when resolving path")

  Reported-by: Dan Carpenter <dan.carpenter@oracle.com>

  Signed-off-by: Michal Koutn√Ω <mkoutny@suse.com>

  Signed-off-by: Tejun Heo <tj@kernel.org>

  '
submodule:
- kernel/cgroup
hunk_count: 6
covered_count: 1
