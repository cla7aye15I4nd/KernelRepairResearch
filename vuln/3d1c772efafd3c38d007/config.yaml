id: 3d1c772efafd3c38d007
bug_link: https://syzkaller.appspot.com/bug?extid=3d1c772efafd3c38d007
title: 'KASAN: use-after-free Read in rxrpc_get_skb'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 3401e4aa43a540881cc97190afead650e709c418
fix_commit: 7b5eab57cac45e270a0ad624ba157c5b30b3d44d
datetime: '2021-02-04T18:11:08-08:00'
fix_commit_message: "rxrpc: Fix clearance of Tx/Rx ring when releasing a call\n\n\
  At the end of rxrpc_release_call(), rxrpc_cleanup_ring() is called to clear\nthe\
  \ Rx/Tx skbuff ring, but this doesn't lock the ring whilst it's accessing\nit. \
  \ Unfortunately, rxrpc_resend() might be trying to retransmit a packet\nconcurrently\
  \ with this - and whilst it does lock the ring, this isn't\nprotection against rxrpc_cleanup_call().\n\
  \nFix this by removing the call to rxrpc_cleanup_ring() from\nrxrpc_release_call().\
  \  rxrpc_cleanup_ring() will be called again anyway\nfrom rxrpc_cleanup_call().\
  \  The earlier call is just an optimisation to\nrecycle skbuffs more quickly.\n\n\
  Alternative solutions include rxrpc_release_call() could try to cancel the\nwork\
  \ item or wait for it to complete or rxrpc_cleanup_ring() could lock\nwhen accessing\
  \ the ring (which would require a bh lock).\n\nThis can produce a report like the\
  \ following:\n\n  BUG: KASAN: use-after-free in rxrpc_send_data_packet+0x19b4/0x1e70\
  \ net/rxrpc/output.c:372\n  Read of size 4 at addr ffff888011606e04 by task kworker/0:0/5\n\
  \  ...\n  Workqueue: krxrpcd rxrpc_process_call\n  Call Trace:\n   ...\n   kasan_report.cold+0x79/0xd5\
  \ mm/kasan/report.c:413\n   rxrpc_send_data_packet+0x19b4/0x1e70 net/rxrpc/output.c:372\n\
  \   rxrpc_resend net/rxrpc/call_event.c:266 [inline]\n   rxrpc_process_call+0x1634/0x1f60\
  \ net/rxrpc/call_event.c:412\n   process_one_work+0x98d/0x15f0 kernel/workqueue.c:2275\n\
  \   ...\n\n  Allocated by task 2318:\n   ...\n   sock_alloc_send_pskb+0x793/0x920\
  \ net/core/sock.c:2348\n   rxrpc_send_data+0xb51/0x2bf0 net/rxrpc/sendmsg.c:358\n\
  \   rxrpc_do_sendmsg+0xc03/0x1350 net/rxrpc/sendmsg.c:744\n   rxrpc_sendmsg+0x420/0x630\
  \ net/rxrpc/af_rxrpc.c:560\n   ...\n\n  Freed by task 2318:\n   ...\n   kfree_skb+0x140/0x3f0\
  \ net/core/skbuff.c:704\n   rxrpc_free_skb+0x11d/0x150 net/rxrpc/skbuff.c:78\n \
  \  rxrpc_cleanup_ring net/rxrpc/call_object.c:485 [inline]\n   rxrpc_release_call+0x5dd/0x860\
  \ net/rxrpc/call_object.c:552\n   rxrpc_release_calls_on_socket+0x21c/0x300 net/rxrpc/call_object.c:579\n\
  \   rxrpc_release_sock net/rxrpc/af_rxrpc.c:885 [inline]\n   rxrpc_release+0x263/0x5a0\
  \ net/rxrpc/af_rxrpc.c:916\n   __sock_release+0xcd/0x280 net/socket.c:597\n   ...\n\
  \n  The buggy address belongs to the object at ffff888011606dc0\n   which belongs\
  \ to the cache skbuff_head_cache of size 232\n\nFixes: 248f219cb8bc (\"rxrpc: Rewrite\
  \ the data and ack handling code\")\nReported-by: syzbot+174de899852504e4a74a@syzkaller.appspotmail.com\n\
  Reported-by: syzbot+3d1c772efafd3c38d007@syzkaller.appspotmail.com\nSigned-off-by:\
  \ David Howells <dhowells@redhat.com>\ncc: Hillf Danton <hdanton@sina.com>\nLink:\
  \ https://lore.kernel.org/r/161234207610.653119.5287360098400436976.stgit@warthog.procyon.org.uk\n\
  Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/rxrpc
hunk_count: 1
covered_count: 1
