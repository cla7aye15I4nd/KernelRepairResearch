id: a0e6f8738b58f7654417
bug_link: https://syzkaller.appspot.com/bug?extid=a0e6f8738b58f7654417
title: WARNING in sk_stream_kill_queues (8)
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 6faee3d4ee8be0f0367d0c3d826afb3571b7a5e0
fix_commit: e9c6e79760265f019cde39d3f2c443dfbc1395b0
datetime: '2022-08-18T11:04:55-07:00'
fix_commit_message: 'tcp: fix sock skb accounting in tcp_read_skb()


  Before commit 965b57b469a5 ("net: Introduce a new proto_ops

  ->read_skb()"), skb was not dequeued from receive queue hence

  when we close TCP socket skb can be just flushed synchronously.


  After this commit, we have to uncharge skb immediately after being

  dequeued, otherwise it is still charged in the original sock. And we

  still need to retain skb->sk, as eBPF programs may extract sock

  information from skb->sk. Therefore, we have to call

  skb_set_owner_sk_safe() here.


  Fixes: 965b57b469a5 ("net: Introduce a new proto_ops ->read_skb()")

  Reported-and-tested-by: syzbot+a0e6f8738b58f7654417@syzkaller.appspotmail.com

  Tested-by: Stanislav Fomichev <sdf@google.com>

  Cc: Eric Dumazet <edumazet@google.com>

  Cc: John Fastabend <john.fastabend@gmail.com>

  Cc: Jakub Sitnicki <jakub@cloudflare.com>

  Signed-off-by: Cong Wang <cong.wang@bytedance.com>

  Signed-off-by: Jakub Kicinski <kuba@kernel.org>

  '
submodule:
- net/ipv4
hunk_count: 1
covered_count: 0
