id: 8ea26396ff85d23a8929
bug_link: https://syzkaller.appspot.com/bug?extid=8ea26396ff85d23a8929
title: 'WARNING: refcount bug in inet_twsk_kill'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 1e557246f8dbdb476f7112ab58d2de947f22acc5
fix_commit: 565d121b69980637f040eb4d84289869cdaabedf
datetime: '2024-08-19T08:46:49-07:00'
fix_commit_message: "tcp: prevent concurrent execution of tcp_sk_exit_batch\n\nIts\
  \ possible that two threads call tcp_sk_exit_batch() concurrently,\nonce from the\
  \ cleanup_net workqueue, once from a task that failed to clone\na new netns.  In\
  \ the latter case, error unwinding calls the exit handlers\nin reverse order for\
  \ the 'failed' netns.\n\ntcp_sk_exit_batch() calls tcp_twsk_purge().\nProblem is\
  \ that since commit b099ce2602d8 (\"net: Batch inet_twsk_purge\"),\nthis function\
  \ picks up twsk in any dying netns, not just the one passed\nin via exit_batch list.\n\
  \nThis means that the error unwind of setup_net() can \"steal\" and destroy\ntimewait\
  \ sockets belonging to the exiting netns.\n\nThis allows the netns exit worker to\
  \ proceed to call\n\nWARN_ON_ONCE(!refcount_dec_and_test(&net->ipv4.tcp_death_row.tw_refcount));\n\
  \nwithout the expected 1 -> 0 transition, which then splats.\n\nAt same time, error\
  \ unwind path that is also running inet_twsk_purge()\nwill splat as well:\n\nWARNING:\
  \ .. at lib/refcount.c:31 refcount_warn_saturate+0x1ed/0x210\n...\n refcount_dec\
  \ include/linux/refcount.h:351 [inline]\n inet_twsk_kill+0x758/0x9c0 net/ipv4/inet_timewait_sock.c:70\n\
  \ inet_twsk_deschedule_put net/ipv4/inet_timewait_sock.c:221\n inet_twsk_purge+0x725/0x890\
  \ net/ipv4/inet_timewait_sock.c:304\n tcp_sk_exit_batch+0x1c/0x170 net/ipv4/tcp_ipv4.c:3522\n\
  \ ops_exit_list+0x128/0x180 net/core/net_namespace.c:178\n setup_net+0x714/0xb40\
  \ net/core/net_namespace.c:375\n copy_net_ns+0x2f0/0x670 net/core/net_namespace.c:508\n\
  \ create_new_namespaces+0x3ea/0xb10 kernel/nsproxy.c:110\n\n... because refcount_dec()\
  \ of tw_refcount unexpectedly dropped to 0.\n\nThis doesn't seem like an actual\
  \ bug (no tw sockets got lost and I don't\nsee a use-after-free) but as erroneous\
  \ trigger of debug check.\n\nAdd a mutex to force strict ordering: the task that\
  \ calls tcp_twsk_purge()\nblocks other task from doing final _dec_and_test before\
  \ mutex-owner has\nremoved all tw sockets of dying netns.\n\nFixes: e9bd0cca09d1\
  \ (\"tcp: Don't allocate tcp_death_row outside of struct netns_ipv4.\")\nReported-by:\
  \ syzbot+8ea26396ff85d23a8929@syzkaller.appspotmail.com\nCloses: https://lore.kernel.org/netdev/0000000000003a5292061f5e4e19@google.com/\n\
  Link: https://lore.kernel.org/netdev/20240812140104.GA21559@breakpoint.cc/\nSigned-off-by:\
  \ Florian Westphal <fw@strlen.de>\nReviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>\n\
  Reviewed-by: Jason Xing <kerneljasonxing@gmail.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\n\
  Link: https://patch.msgid.link/20240812222857.29837-1-fw@strlen.de\nSigned-off-by:\
  \ Jakub Kicinski <kuba@kernel.org>\n"
submodule:
- net/ipv4
hunk_count: 3
covered_count: 2
