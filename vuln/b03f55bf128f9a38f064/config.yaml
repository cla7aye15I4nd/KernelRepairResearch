id: b03f55bf128f9a38f064
bug_link: https://syzkaller.appspot.com/bug?extid=b03f55bf128f9a38f064
title: memory leak in __vsock_create
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 6fd2c17fb6e02a8c0ab51df1cfec82ce96b8e83d
fix_commit: 7e97cfed9929eaabc41829c395eb0d1350fccb9d
datetime: '2022-08-10T09:50:18+01:00'
fix_commit_message: "vsock: Fix memory leak in vsock_connect()\n\nAn O_NONBLOCK vsock_connect()\
  \ request may try to reschedule\n@connect_work.  Imagine the following sequence\
  \ of vsock_connect()\nrequests:\n\n  1. The 1st, non-blocking request schedules\
  \ @connect_work, which will\n     expire after 200 jiffies.  Socket state is now\
  \ SS_CONNECTING;\n\n  2. Later, the 2nd, blocking request gets interrupted by a\
  \ signal after\n     a few jiffies while waiting for the connection to be established.\n\
  \     Socket state is back to SS_UNCONNECTED, but @connect_work is still\n     pending,\
  \ and will expire after 100 jiffies.\n\n  3. Now, the 3rd, non-blocking request\
  \ tries to schedule @connect_work\n     again.  Since @connect_work is already scheduled,\n\
  \     schedule_delayed_work() silently returns.  sock_hold() is called\n     twice,\
  \ but sock_put() will only be called once in\n     vsock_connect_timeout(), causing\
  \ a memory leak reported by syzbot:\n\n  BUG: memory leak\n  unreferenced object\
  \ 0xffff88810ea56a40 (size 1232):\n    comm \"syz-executor756\", pid 3604, jiffies\
  \ 4294947681 (age 12.350s)\n    hex dump (first 32 bytes):\n      00 00 00 00 00\
  \ 00 00 00 00 00 00 00 00 00 00 00  ................\n      28 00 07 40 00 00 00\
  \ 00 00 00 00 00 00 00 00 00  (..@............\n    backtrace:\n      [<ffffffff837c830e>]\
  \ sk_prot_alloc+0x3e/0x1b0 net/core/sock.c:1930\n      [<ffffffff837cbe22>] sk_alloc+0x32/0x2e0\
  \ net/core/sock.c:1989\n      [<ffffffff842ccf68>] __vsock_create.constprop.0+0x38/0x320\
  \ net/vmw_vsock/af_vsock.c:734\n      [<ffffffff842ce8f1>] vsock_create+0xc1/0x2d0\
  \ net/vmw_vsock/af_vsock.c:2203\n      [<ffffffff837c0cbb>] __sock_create+0x1ab/0x2b0\
  \ net/socket.c:1468\n      [<ffffffff837c3acf>] sock_create net/socket.c:1519 [inline]\n\
  \      [<ffffffff837c3acf>] __sys_socket+0x6f/0x140 net/socket.c:1561\n      [<ffffffff837c3bba>]\
  \ __do_sys_socket net/socket.c:1570 [inline]\n      [<ffffffff837c3bba>] __se_sys_socket\
  \ net/socket.c:1568 [inline]\n      [<ffffffff837c3bba>] __x64_sys_socket+0x1a/0x20\
  \ net/socket.c:1568\n      [<ffffffff84512815>] do_syscall_x64 arch/x86/entry/common.c:50\
  \ [inline]\n      [<ffffffff84512815>] do_syscall_64+0x35/0x80 arch/x86/entry/common.c:80\n\
  \      [<ffffffff84600068>] entry_SYSCALL_64_after_hwframe+0x44/0xae\n  <...>\n\n\
  Use mod_delayed_work() instead: if @connect_work is already scheduled,\nreschedule\
  \ it, and undo sock_hold() to keep the reference count\nbalanced.\n\nReported-and-tested-by:\
  \ syzbot+b03f55bf128f9a38f064@syzkaller.appspotmail.com\nFixes: d021c344051a (\"\
  VSOCK: Introduce VM Sockets\")\nCo-developed-by: Stefano Garzarella <sgarzare@redhat.com>\n\
  Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>\nReviewed-by: Stefano Garzarella\
  \ <sgarzare@redhat.com>\nSigned-off-by: Peilin Ye <peilin.ye@bytedance.com>\nSigned-off-by:\
  \ David S. Miller <davem@davemloft.net>\n"
submodule:
- net/vmw_vsock
hunk_count: 1
covered_count: 1
