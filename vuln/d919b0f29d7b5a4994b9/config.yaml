id: d919b0f29d7b5a4994b9
bug_link: https://syzkaller.appspot.com/bug?extid=d919b0f29d7b5a4994b9
title: 'INFO: task hung in usb_kill_urb'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: 67130830ce420b54490ec69a775528afdaef6a54
fix_commit: 50896c410354432e8e7baf97fcdd7df265e683ae
datetime: '2019-05-03T09:13:47+03:00'
fix_commit_message: 'USB: dummy-hcd: Fix failure to give back unlinked URBs


  The syzkaller USB fuzzer identified a failure mode in which dummy-hcd

  would never give back an unlinked URB.  This causes usb_kill_urb() to

  hang, leading to WARNINGs and unkillable threads.


  In dummy-hcd, all URBs are given back by the dummy_timer() routine as

  it scans through the list of pending URBS.  Failure to give back URBs

  can be caused by failure to start or early exit from the scanning

  loop.  The code currently has two such pathways: One is triggered when

  an unsupported bus transfer speed is encountered, and the other by

  exhausting the simulated bandwidth for USB transfers during a frame.


  This patch removes those two paths, thereby allowing all unlinked URBs

  to be given back in a timely manner.  It adds a check for the bus

  speed when the gadget first starts running, so that dummy_timer() will

  never thereafter encounter an unsupported speed.  And it prevents the

  loop from exiting as soon as the total bandwidth has been used up (the

  scanning loop continues, giving back unlinked URBs as they are found,

  but not transferring any more data).


  Thanks to Andrey Konovalov for manually running the syzkaller fuzzer

  to help track down the source of the bug.


  Signed-off-by: Alan Stern <stern@rowland.harvard.edu>

  Reported-and-tested-by: syzbot+d919b0f29d7b5a4994b9@syzkaller.appspotmail.com

  CC: <stable@vger.kernel.org>

  Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

  '
submodule:
- drivers/usb/gadget/udc
hunk_count: 3
covered_count: 0
