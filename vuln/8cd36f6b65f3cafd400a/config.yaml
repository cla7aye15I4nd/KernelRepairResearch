id: 8cd36f6b65f3cafd400a
bug_link: https://syzkaller.appspot.com/bug?extid=8cd36f6b65f3cafd400a
title: 'BUG: unable to handle kernel NULL pointer dereference in dev_map_hash_update_elem'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: c7d4274e90a1e7aa43d11d2a16066cbbe610070e
fix_commit: 281d464a34f540de166cee74b723e97ac2515ec3
datetime: '2024-03-07T20:02:38-08:00'
fix_commit_message: 'bpf: Fix DEVMAP_HASH overflow check on 32-bit arches


  The devmap code allocates a number hash buckets equal to the next power

  of two of the max_entries value provided when creating the map. When

  rounding up to the next power of two, the 32-bit variable storing the

  number of buckets can overflow, and the code checks for overflow by

  checking if the truncated 32-bit value is equal to 0. However, on 32-bit

  arches the rounding up itself can overflow mid-way through, because it

  ends up doing a left-shift of 32 bits on an unsigned long value. If the

  size of an unsigned long is four bytes, this is undefined behaviour, so

  there is no guarantee that we''ll end up with a nice and tidy 0-value at

  the end.


  Syzbot managed to turn this into a crash on arm32 by creating a

  DEVMAP_HASH with max_entries > 0x80000000 and then trying to update it.

  Fix this by moving the overflow check to before the rounding up

  operation.


  Fixes: 6f9d451ab1a3 ("xdp: Add devmap_hash map type for looking up devices by hashed
  index")

  Link: https://lore.kernel.org/r/000000000000ed666a0611af6818@google.com

  Reported-and-tested-by: syzbot+8cd36f6b65f3cafd400a@syzkaller.appspotmail.com

  Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>

  Message-ID: <20240307120340.99577-2-toke@redhat.com>

  Signed-off-by: Alexei Starovoitov <ast@kernel.org>

  '
submodule:
- kernel/bpf
hunk_count: 1
covered_count: 1
