id: 53619be9444215e785ed
bug_link: https://syzkaller.appspot.com/bug?extid=53619be9444215e785ed
title: general protection fault in btf_decl_tag_resolve
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: ca33aa4ec5cbae7ddb995e565bc3b67ee4532b7a
fix_commit: d7e7b42f4f956f2c68ad8cda87d750093dbba737
datetime: '2022-02-03T13:06:04-08:00'
fix_commit_message: "bpf: Fix a btf decl_tag bug when tagging a function\n\nsyzbot\
  \ reported a btf decl_tag bug with stack trace below:\n\n  general protection fault,\
  \ probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP KASAN\n\
  \  KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]\n  CPU:\
  \ 0 PID: 3592 Comm: syz-executor914 Not tainted 5.16.0-syzkaller-11424-gb7892f7d5cb2\
  \ #0\n  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS\
  \ Google 01/01/2011\n  RIP: 0010:btf_type_vlen include/linux/btf.h:231 [inline]\n\
  \  RIP: 0010:btf_decl_tag_resolve+0x83e/0xaa0 kernel/bpf/btf.c:3910\n  ...\n  Call\
  \ Trace:\n   <TASK>\n   btf_resolve+0x251/0x1020 kernel/bpf/btf.c:4198\n   btf_check_all_types\
  \ kernel/bpf/btf.c:4239 [inline]\n   btf_parse_type_sec kernel/bpf/btf.c:4280 [inline]\n\
  \   btf_parse kernel/bpf/btf.c:4513 [inline]\n   btf_new_fd+0x19fe/0x2370 kernel/bpf/btf.c:6047\n\
  \   bpf_btf_load kernel/bpf/syscall.c:4039 [inline]\n   __sys_bpf+0x1cbb/0x5970\
  \ kernel/bpf/syscall.c:4679\n   __do_sys_bpf kernel/bpf/syscall.c:4738 [inline]\n\
  \   __se_sys_bpf kernel/bpf/syscall.c:4736 [inline]\n   __x64_sys_bpf+0x75/0xb0\
  \ kernel/bpf/syscall.c:4736\n   do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n\
  \   do_syscall_64+0x35/0xb0 arch/x86/entry/common.c:80\n   entry_SYSCALL_64_after_hwframe+0x44/0xae\n\
  \nThe kasan error is triggered with an illegal BTF like below:\n   type 0: void\n\
  \   type 1: int\n   type 2: decl_tag to func type 3\n   type 3: func to func_proto\
  \ type 8\nThe total number of types is 4 and the type 3 is illegal\nsince its func_proto\
  \ type is out of range.\n\nCurrently, the target type of decl_tag can be struct/union,\
  \ var or func.\nBoth struct/union and var implemented their own 'resolve' callback\
  \ functions\nand hence handled properly in kernel.\nBut func type doesn't have 'resolve'\
  \ callback function. When\nbtf_decl_tag_resolve() tries to check func type, it tries\
  \ to get\nvlen of its func_proto type, which triggered the above kasan error.\n\n\
  To fix the issue, btf_decl_tag_resolve() needs to do btf_func_check()\nbefore trying\
  \ to accessing func_proto type.\nIn the current implementation, func type is checked\
  \ with\nbtf_func_check() in the main checking function btf_check_all_types().\n\
  To fix the above kasan issue, let us implement 'resolve' callback\nfunc type properly.\
  \ The 'resolve' callback will be also called\nin btf_check_all_types() for func\
  \ types.\n\nFixes: b5ea834dde6b (\"bpf: Support for new btf kind BTF_KIND_TAG\"\
  )\nReported-by: syzbot+53619be9444215e785ed@syzkaller.appspotmail.com\nSigned-off-by:\
  \ Yonghong Song <yhs@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\n\
  Acked-by: Martin KaFai Lau <kafai@fb.com>\nLink: https://lore.kernel.org/bpf/20220203191727.741862-1-yhs@fb.com\n"
submodule:
- kernel/bpf
hunk_count: 5
covered_count: 4
