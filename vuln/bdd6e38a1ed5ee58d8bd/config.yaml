id: bdd6e38a1ed5ee58d8bd
bug_link: https://syzkaller.appspot.com/bug?extid=bdd6e38a1ed5ee58d8bd
title: 'KCSAN: data-race in do_epoll_wait / do_epoll_wait'
source_page: https://syzkaller.appspot.com/upstream/fixed
trigger_commit: f485922d8fe4e44f6d52a5bb95a603b7c65554bb
fix_commit: d679ae94fdd5d3ab00c35078f5af5f37e068b03d
datetime: '2022-04-29T14:38:01-07:00'
fix_commit_message: "list: fix a data-race around ep->rdllist\n\nep_poll() first calls\
  \ ep_events_available() with no lock held and checks\nif ep->rdllist is empty by\
  \ list_empty_careful(), which reads\nrdllist->prev.  Thus all accesses to it need\
  \ some protection to avoid\nstore/load-tearing.\n\nNote INIT_LIST_HEAD_RCU() already\
  \ has the annotation for both prev\nand next.\n\nCommit bf3b9f6372c4 (\"epoll: Add\
  \ busy poll support to epoll with socket\nfds.\") added the first lockless ep_events_available(),\
  \ and commit\nc5a282e9635e (\"fs/epoll: reduce the scope of wq lock in epoll_wait()\"\
  )\nmade some ep_events_available() calls lockless and added single call under\n\
  a lock, finally commit e59d3c64cba6 (\"epoll: eliminate unnecessary lock\nfor zero\
  \ timeout\") made the last ep_events_available() lockless.\n\nBUG: KCSAN: data-race\
  \ in do_epoll_wait / do_epoll_wait\n\nwrite to 0xffff88810480c7d8 of 8 bytes by\
  \ task 1802 on cpu 0:\n INIT_LIST_HEAD include/linux/list.h:38 [inline]\n list_splice_init\
  \ include/linux/list.h:492 [inline]\n ep_start_scan fs/eventpoll.c:622 [inline]\n\
  \ ep_send_events fs/eventpoll.c:1656 [inline]\n ep_poll fs/eventpoll.c:1806 [inline]\n\
  \ do_epoll_wait+0x4eb/0xf40 fs/eventpoll.c:2234\n do_epoll_pwait fs/eventpoll.c:2268\
  \ [inline]\n __do_sys_epoll_pwait fs/eventpoll.c:2281 [inline]\n __se_sys_epoll_pwait+0x12b/0x240\
  \ fs/eventpoll.c:2275\n __x64_sys_epoll_pwait+0x74/0x80 fs/eventpoll.c:2275\n do_syscall_x64\
  \ arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80\n\
  \ entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nread to 0xffff88810480c7d8 of 8 bytes\
  \ by task 1799 on cpu 1:\n list_empty_careful include/linux/list.h:329 [inline]\n\
  \ ep_events_available fs/eventpoll.c:381 [inline]\n ep_poll fs/eventpoll.c:1797\
  \ [inline]\n do_epoll_wait+0x279/0xf40 fs/eventpoll.c:2234\n do_epoll_pwait fs/eventpoll.c:2268\
  \ [inline]\n __do_sys_epoll_pwait fs/eventpoll.c:2281 [inline]\n __se_sys_epoll_pwait+0x12b/0x240\
  \ fs/eventpoll.c:2275\n __x64_sys_epoll_pwait+0x74/0x80 fs/eventpoll.c:2275\n do_syscall_x64\
  \ arch/x86/entry/common.c:50 [inline]\n do_syscall_64+0x44/0xd0 arch/x86/entry/common.c:80\n\
  \ entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nvalue changed: 0xffff88810480c7d0\
  \ -> 0xffff888103c15098\n\nReported by Kernel Concurrency Sanitizer on:\nCPU: 1\
  \ PID: 1799 Comm: syz-fuzzer Tainted: G        W         5.17.0-rc7-syzkaller-dirty\
  \ #0\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\
  \ 01/01/2011\n\nLink: https://lkml.kernel.org/r/20220322002653.33865-3-kuniyu@amazon.co.jp\n\
  Fixes: e59d3c64cba6 (\"epoll: eliminate unnecessary lock for zero timeout\")\nFixes:\
  \ c5a282e9635e (\"fs/epoll: reduce the scope of wq lock in epoll_wait()\")\nFixes:\
  \ bf3b9f6372c4 (\"epoll: Add busy poll support to epoll with socket fds.\")\nSigned-off-by:\
  \ Kuniyuki Iwashima <kuniyu@amazon.co.jp>\nReported-by: syzbot+bdd6e38a1ed5ee58d8bd@syzkaller.appspotmail.com\n\
  Cc: Al Viro <viro@zeniv.linux.org.uk>, Andrew Morton <akpm@linux-foundation.org>\n\
  Cc: Kuniyuki Iwashima <kuniyu@amazon.co.jp>\nCc: Kuniyuki Iwashima <kuni1840@gmail.com>\n\
  Cc: \"Soheil Hassas Yeganeh\" <soheil@google.com>\nCc: Davidlohr Bueso <dave@stgolabs.net>\n\
  Cc: \"Sridhar Samudrala\" <sridhar.samudrala@intel.com>\nCc: Alexander Duyck <alexander.h.duyck@intel.com>\n\
  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>\n"
submodule:
- include/linux
hunk_count: 3
covered_count: 3
